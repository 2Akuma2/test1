<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302C02141216D3317E787D2377D448D09595450717DBA0F102146D395C7CBA42A79674D4BD3C565A240A91802BDB"
          version="6.0.3">
  <include>qfs.qft</include>
  <comment>(c) 2014 imbus AG
Version 1.1</comment>
  <TestCase id="_1nj3" name="do not execute directly">
    <comment>node;errorlevel&gt;=MESSAGE</comment>
    <ThrowStep id="_1nj4"
               throwmessage="Do not execute this test suite directly."/>
  </TestCase>
  <TestCase externalizename="$(currentTestCaseUID)" id="_1nit"
            name="execute next test case">
    <ServerScriptStep id="_1niy" interpreter="groovy"
                      name="test case execution loop">
      <code>import de.qfs.apps.qftest.extensions.qftest.TestRunEvent
import de.qfs.apps.qftest.shared.exceptions.UserException
import static de.imbus.itep.ItepConstant.ITEP_OK
import static de.imbus.itep.ItepConstant.ITEP_E_END

// For normal operation and error handling TestRunEvent.STATE is used (try)
// (catch) is only used for exceptional situations, e.g. like exceptions thrown by iTEP.
while(currentCommandResult != ITEP_E_END) {
    rc.logMessage("$currentTestCaseUID: executing $currentProcedureName $currentParameters")
    testResultsCollector.reset()
    try {
        beforeInteractionPlugin()
        rc.callProcedure(currentProcedureName, currentParameters)
        switch (testResultsCollector.gravestProblem.state) {
            case TestRunEvent.STATE_OK:
                setItepResult(0, "")
                break
            case TestRunEvent.STATE_WARNING:
                println("Warning: ${testResultsCollector.gravestProblem.message}")
                setItepResult(1, testResultsCollector.gravestProblem.message)
                break
            case TestRunEvent.STATE_ERROR:
            case TestRunEvent.STATE_EXCEPTION:
                println("Error: ${testResultsCollector.gravestProblem.message}")
                setItepResult(-1, testResultsCollector.gravestProblem.message)
                break
            default:
                println("Attention: Unknown state ${testResultsCollector.gravestProblem.state}")
                rc.logWarning("unknown state " + testResultsCollector.gravestProblem.state)
                setItepResult(-1, testResultsCollector.gravestProblem.message)
                break
        }
    } catch (Exception e) {
        def message = e.class.name + ": " + e.localizedMessage ?: e.message ?: ("---")
        if (e.cause != null) message = message + "\ncaused by " + e.cause
        println("Error: $message")
        rc.logError(message)
        setItepResult(-1, message)
    }

    try {
        currentCommandResult = nextItepCommand()
    } catch (Exception e) {
        if (e instanceof UserException) throw e
        setItepResult(-1, "Exception while fetching the next command: " + e)
    }
    if (itep.hasStartedANewTestCase()) break
}</code>
    </ServerScriptStep>
  </TestCase>
  <PackageRoot id="_3"/>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
