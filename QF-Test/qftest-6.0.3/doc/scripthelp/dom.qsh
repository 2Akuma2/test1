/**
 * @script sut
 */
public abstract class Node
{
    /**
     * Get the parent node.
     *
     * @return  The parent node.
     */
    public abstract Node getParent();

    /**
     * Get the interesting parent node.
     *
     * @param   level   How many parents you want to go up. 0 is this node,
     *                  1 the first interesting parent, etc.
     *
     * @return  The interesting parent node from QF-Test perspective.
     */
    public Node getInterestingParent(int level=0);

    /**
     * Get the number of child nodes.
     *
     * @return  The number of child nodes.
     */
    public abstract int getChildCount();
    
    /**
     * Get the child node at the given index.
     *
     * @param   index   The index of the child node, starting with 0.
     *
     * @return  The child node at the index.
     *
     * @throws  IllegalArgumentException    if index is negative or exceeds the number of child nodes.
     */
    public abstract Node getChild(int index);

    /**
     * Get the children of this node as an array.
     *
     * @return  An array with the children, empty if there are none.
     */
    public Node[] getChildren();

    /**
     * Get the index of a child in a node's list of children.
     *
     * @param   child   The child node to get the index for.
     *
     * @return  The index of the child node, starting with 0, or -1 in case it is not a child of the this node.
     */
    public int getIndexOfChild(Node child);

    /**
     * Get the first child node: An element node, a text node or a comment.
     *
     * @return The first child node.
     */
    public Node getFirstChild()

    /**
     * Get the first child element (text nodes and comments are skipped).
     *
     * @return The first child element.
     */
    public Node getFirstElementChild()

    /**
     * Get the previous element in the same tree level.
     *
     * @return The previous element sibling.
     */
    public Node getPreviousElementSibling()

    /**
     * Get the previous sibling node: An element node, a text node, or a comment node.
     *
     * @return The previous sibling.
     */
    public Node getPreviousSibling()

    /**
     * Get the next element in the same tree level.
     *
     * @return The next element sibling.
     */
    public Node getNextElementSibling()

    /**
     * Get the next sibling node: An element node, a text node, or a comment node.
     *
     * @return The next sibling.
     */
    public Node getNextSibling()

    /**
     * Get the document to which the node belongs.
     *
     * @return  The document to which this node belongs. A DocumentNode will return itself, a DialogNode will return null.
     */
    public abstract DocumentNode getDocument();

    /**
     * Get all child nodes of the root element of this node with a given ID attribute.
     *
     * @param   id      The ID attribute to look for.
     *
     * @return  An array of child nodes with the given ID attribute. If none are found, an empty array is returned. A DialogNode will always return an empty array, a FrameNode forwards the call to its DocumentNode child node and a DocumentNode to its <HTML> root element.
     */
    public Node[] getElementsById(String id);

    /**
     * Get all direct or indirect child nodes of this node with a given ID attribute.
     *
     * @param   tagName The tag name to look for.
     *
     * @return  An array of child nodes with the given tag name. If none are found, an empty array is returned. A DialogNode will always return an empty array, a FrameNode forwards the call to its DocumentNode child node and a DocumentNode to its <HTML> root element.
     */
    public Node[] getElementsByTagName(String tagName);
    
    /**
     * Get an identifier for the type of the node.
     * Though this method is not fully in line with pure OO doctrine, while traversing the DOM it is often necessary to find out the type of a given node and this is quite convenient.
     *
     * @return  An identifier for the type of the node.
     */
    public abstract String getNodeType();

    /**
     * Get the value of an attribute of the node.
     * For convenience this method is defined at Node level. If this node is not a DomNode the result will always be null.
     * In some cases this method also returns attributes that have not been explicitly specified, like the width and height of an <IMG> node.
     * Which attributes can be retrieved in that way is browser dependent.
     *
     * @param   name    The name of the attribute.
     *
     * @return  The attribute value or null if the attribute is not (explicitly or implicitly) specified.
     */
    public String getAttribute(String name);

     /**
     * Get the value of an attribute of the node if it is explicitly specified in the HTML code.
     * For convenience this method is defined at Node level. If this node is not a DomNode the result will always be null.
     *
     * @param   name    The name of the attribute.
     *
     * @return  The attribute value or null if the attribute is not explicitly specified.
     */
    public String getAttributeIfSpecified(String name);

    /**
     * Test whether an attribute of the node is explicitly specified in the HTML code.
     * For convenience this method is defined at Node level. If this node is not a DomNode the result will always be false.
     *
     * @param   name    The name of the attribute to test.
     *
     * @return  True if the attribute is explicitly speicified.
     */
    public boolean isAttributeSpecified(String name);

    /**
     * Get the tag name of the node. The tag name is the type of node in upper case like "HTML"
     * for an <HTML> node. Plain text nodes are represented as a DomNode with tag name "#text".
     * Pseudo tag names are defined for DocumentNodes ("DOCUMENT") and DialogNodes ("DIALOG").
     *
     * @return  The tag name of the node.
     */
    public String getName();
  
    /**
     * Get the text content of a Node. In case of a TEXT node, return its value.
     * Otherwise traverse the DOM and collect all nested Text node's values.
     * Care is taken to collapse whitespace between nodes to get as close as possible to what is displayed in the browser.
     *
     * @return  The text content of a node.
     */
    public String getText();

    /**
     * Get the flat text content of a Node. In case of a plain Text node return its value.
     * Otherwise collect the values of all Text nodes directly contained within this node,
     * excluding those nested at a deeper level.
     *
     * @return  The flat text content of a node.
     */
    public String getFlatText();

    /**
     * Get the simple text content of a Node. In case of a plain Text node, return its value.
     * Otherwise traverse the DOM and collect all Text nodes contained directly within this node or in "simple" nodes like <B>, but do not descend into structurally more complex nodes like <TABLE>.
     *
     * @return  The simple text content of a node.
     */
    public String getSimpleText();

    /**
     * Retrieve a user-defined property.
     * 
     * @param   name  The name of the property to retrieve.
     * 
     * @return  The value of the specified property.
     */
    public Object getProperty(String name);

    /**
     * Set a user-defined property.
     * 
     * @param   name   The name of the property.
     * @param   value  The property value. A value of null will remove an existing property. 
     */
    public void setProperty(String name, Object value);
 
    /**
     * Get the n-th parent node. 0 is the node itself, 1 the parent etc. Convenience method to
     * simplify checking for null.
     *
     * @return  The n-th parent node.
     */
    public Node getNthParent(int n);
    
    /**
     * Get the direct or indirect parent with a given class.
     *
     * @param   clazz  The class to look for.
     *
     * @return  The node's ancestor or null.
     */
    public Node getAncestorOfClass(String clazz);
    
    /**
     * Get a common ancestor of two nodes.
     *
     * @param node1    The first node.
     * @param node2    The second node.
     * @param topmost  The node which limits the search.
     *
     * @return The common ancestor.
     */
    public static Node findCommonAncestor(Node node1, Node node2, Node topmost);
    
    /**
     * Check whether a node is an ancestor of this node.
     *
     * @param node  The node which might be an ancestor.
     *
     * @return Whether the node is an ancestor.
     */
    public boolean isAncestor(Node node);
    
    /**
     * Get all child nodes of this node with a given class name.
     *
     * @param   className The class name to look for.
     *
     * @return  The default is an empty array.
     */
    public Node[] getElementsByClassName(String className);
    
    /**
     * Get the class names of the Node.
     *
     * @return The - possibly resolved - class names of the node, most specific first.
     */
    public String[] getClassNames();
    
    /**
     * Get the class name of the Node.
     *
     * @return The - possibly resolved - class name of the node.
     */
    public String getClassName();
    
    /**
     * Get the generic class name of the Node.
     *
     * @return The generic class name of the node or null if the resolvers did not return a generic
     *          class name.
     */
    public String getGenericClassName();
    
    /**
     * Test whether this node is of a given class.
     *
     * @param   className       The class name, can be resolved, default, tagname or node type.
     *
     * @return  True if className matches any variant.
     */
    public boolean isMatchingClass(String className);

}

/**
    @script sut
    @context node.*
    @description A DOM node (QF-Test/web).
 */
public class DomNode
    extends Node
{
    /**
     * Get the cached "id" attribute of the node that may have been processed by an IdResolver.
     * The original, unmodified "id" attribute is available via getAttribute("id").
     *
     * @return  The id of the DomNode.
     */
    public String getId();

    /**
     * Set an attribute value on the node.
     *
     * @param   name    The name of the attribute.
     * @param   value   The value to set.
     */
    public void setAttribute(String name, String value);

    /**
     * Get all direct child nodes of this node with a given tag name.
     *
     * @param   tagName  The tag name to look for.
     *
     * @return  An array of child nodes with the given tag name. If none are found, an empty array is returned.
     */
    public Node[] getChildrenByTagName(String tagName);

    /**
     * Test whether the node has the keyboard focus.
     *
     * @return  True if the node has the focus.
     */
    public boolean hasFocus();

    /**
     * Tell the node to request the keyboard focus.
     * This is a best-effort implementation. Whether the node can actually receive the keyboard depends on the browser and operating system settings.
     */
    public void requestFocus();
    
    /**
     * Test whether the node and all its parent nodes are visible.
     *
     * @return  True if the node is actually showing.
     */
    public boolean isShowing();
    
    /**
     * Try to scroll the page or a frame so as to make the node fully visible.
     * This is a best effort implementation. Whether the node can actually be made visible depends on the browser and operating system settings.
     */
    public void scrollVisible();

    /**
     * Get the location and size of the node relative to desktop.
     *
     * @return  The node's geometry in the form [x, y, width, height].
     */
    public int[] getLocationOnScreen();

    /**
     * Set a Javascript variable in the context of this node's document to this node.
     *
     * @param   varname  The name of the variable to bind.
     */
    public void toJS(String varname);

    /**
     * Evaluate Javascript code in the context of the document.
     *
     * @param   script  The script to execute.
     *
     * @return  Whatever the script returns, converted to the proper object type. Even returning a DOM node, frame or document works.
     */
    public Object evalJS(String script);
    
   /**
     * Test whether the class attribute contains a given CSS identifier.
     *
     * @param   cl      The identifier to test for.
     *
     * @return  True if the class attribute contains the given CSS identifier.
     */
    public boolean hasCSSClass(String cl);
    
      /**
     * Get a DomNode via XPath.
     *
     * @param   xpath   The XPath expression relative to this node.
     *
     * @return  The first matching node.
     */
    public DomNode getByXPath(String xpath);
    
     /**
     * Get several DomNodes via XPath.
     *
     * @param   xpath   The XPath expression relative to this node.
     *
     * @return  The matching nodes.
     */
    public DomNode[] getAllByXPath(String xpath);
    
     /**
     * Get a DomNode via a CSS selector.
     *
     * @param   css     The CSS selector relative to this node.
     *
     * @return  The first matching node.
     */
    public DomNode getByCSS(String css);
    
     /**
     * Get several DomNodes via a CSS selector.
     *
     * @param   css     The CSS selector relative to this node.
     *
     * @return  The matching nodes.
     */
    public DomNode[] getAllByCSS(String css);
  
}


/**
    @script sut
    @context doc.*
    @description A document node (QF-Test/web).
 */
public class DocumentNode
    extends Node
{
    /**
     * To test whether a document is a top-level document this method should be used instead of testing whether the result of getParent() is null.
     * The reason is that loading of nested child documents may be completed before loading of the main document. During this time it is known that the nested document will have a parent, but the parent is not available yet.
     *
     * @return  True if the document has a parent, false if it is a top-level document.
     */
    public boolean hasParent();

    /**
     * Get the <HTML> root element of the document.
     *
     * @return  The root element of the document.
     */
    public DomNode getRootElement()

    /**
     * Get the child frames of the document.
     *
     * @return  The child frames of the document, an empty array in case there are none.
     */
    public FrameNode[] getFrames();

    /**
     * Get the URL of the document.
     *
     * @return  The url of the DocumentNode.
     */
    public final String getUrl();

    /**
     * Get the title of the document as defined in the <TITLE> of the <HEAD> of its root element.
     *
     * @return  The title of the document.
     */
    public String getTitle();

    /**
     * Get the source code of the document, i.e. the plain HTML text that was loaded by the browser. Note that this does not necessarily represent the current structure of the document because that may have been changed dynamically by Javascript code. Still, the source code or a document can be very useful for logging or verification purposes.
     *
     * @return  The HTML text content of the document.
     */
    public String getSourcecode();
    
    /**
     * Evaluate Javascript code in the context of the document.
     *
     * @param   script  The script to execute.
     *
     * @return  Whatever the script returns, converted to the proper object type. Even returning a DOM node, frame or document works.
     */
    public Object evalJS(String script);

    /**
     * Get the base part of an URL, including host and directory but excluding possible parameters separated by '?' and excluding a possible Tomcat session ID.
     *
     * @param   url     The URL.
     *
     * @return  The base part of the URL, null if the URL is null.
     */
    public static String getUrlBase(String url);

    /**
     * Get the host part of an URL.
     *
     * @param   url     The URL.
     *
     * @return The host part between http(s):// and the next /. Null if the URL's protocol is
     *         neither http nor https.
     */
    public static String getUrlHost(String url);

    /**
     * Normalize an URL by replacing '\' with '/', "file:/(/(/))" with "file:///", up-casing windows drive letters and decoding %.. sequences. 
     *
     * @param   url     The URL to normalize.
     *
     * @return  The normalized URL.
     */
    public static String normalizeUrl(String url);

    /**
     * Get the parameters of an URL, including those separated by '?' and a possible Tomcat session ID, in the form of an ExtraFeatureSet that can be used for an ExtraFeatureResolver.
     *
     * @param   url The URL.
     *
     * @return  The parameters, an empty set if the URL is null.
     */
    public static ExtraFeatureSet getUrlParameters(String url);
}


/**
    @script sut
    @context frame.*
    @description A frame node (QF-Test/web).
 */
class FrameNode
    extends Node
{

    /**
     * Get the child document of the frame.
     *
     * @return  The child document of the frame.
     */
    public DocumentNode getChildDocument()

    /**
     * Get the name of the frame as defined by its name attribute.
     *
     * @return  The name of the frame.
     */
    public String getFrameName()
}
