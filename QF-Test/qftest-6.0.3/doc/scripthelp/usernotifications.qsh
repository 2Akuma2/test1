/**
 @script sut
 @context notifications
 @description User notifications provide a simple API for posting and handling notifications from user scripts.  Notifications are identified by a name, e.g. "user.sut.login" and provide a userInfo map, which can hold arbitrary key-value pairs.  To post notifications, use notification.post(notificationName, userInfo).  To observe notifications, add an observer method using addObserver(nameOfObserver, observerMethod, notificationName)
 */
class SutNotifications{
    
    /**
     "user."
     */
    NOTIFICATION_PREFIX
    /**
     
     */
    RECORDING_STARTED
    /**
     
     */
    RECORDING_STOPPED
    /**
     
     */
    RECORDING_PAUSED
    /**
     
     */
    RECORDING_RESUMED
    /**
     
     */
    CHECK_RECORDING_STARTED
    /**
     
     */
    CHECK_RECORDING_STOPPED
    /**
     
     */
    REQUEST_RECORDING_STARTED
    /**
     
     */
    REQUEST_RECORDING_STOPPED
    /**
     
     */
    COMPONENT_RECORDING_STARTED
    /**
     
     */
    COMPONENT_RECORDING_STOPPED
    /**
     
     */
    PROCBUILDER_STARTED
    /**
     
     */
    PROCBUILDER_STOPPED
    /**
     
     */
    INSPECTOR_MODE_STARTED
    /**
     
     */
    INSPECTOR_MODE_STOPPED
    /**
     Sent when a window is about to be raised. Put a member <code>didRaise</code> into the userInfo
to prevent QF-Test raising the window.
     */
    WINDOW_RAISE
    /**
     Called as soon as the application tries to open an external webbrowser to display a website.
The userInfo contains the members "url" - a String pointing to the URL to open (read only) - and
"open" - a Boolean which can be set to "FALSE" to prohibit the actual browser opening.
     */
    BROWSER_OPEN
    /**
     Called as soon as the application is about to start an external process.

The userInfo contains the following entries:
* command - A List of Strings of the command to start (modifiable/replaceable)
* directory - A File with the process working directory (or null) (replaceable)
* environment - A Map of String-String entries representing the environment passed to the process (modifiable/replaceable)

These entries can be added to the userInfo:
* stdout - If set, a mock process is started which returns the given String on STDOUT
* stderr - If set, a mock process is started which returns the given String on STDERR
* exitcode - If set, a mock process is started which returns with the given exit code
* runtime - If set, a mock process is started which returns after the given runtime (in milliseconds)
* ioexception - If set, instead of starting the process the given exception is thrown (can be a String)
     */
    PROCESS_START
    /**
     Called as soon as a request is about to be sent from the browser.

The userInfo contains the following entries:
* url - The url called by the browser - (replaceable)
* method - The method used to request (replaceable)
* postData - A String containing the post data, if available (replaceable)
* resourceType - the requested resource - one of Document, Stylesheet, Image, Media, Font, Script, TextTrack, XHR, Fetch, EventSource, WebSocket, Manifest, SignedExchange, Ping, CSPViolationReport, Preflight, Other
* requestHeaders - A Map of String-String entries representing the headers sent with the request (modifiable/replaceable)

These entries can be added to the userInfo:
* errorReason - If set, the request fails with the given reason. Allowed values: Failed, Aborted, TimedOut, AccessDenied, ConnectionClosed, ConnectionReset, ConnectionRefused, ConnectionAborted, ConnectionFailed, NameNotResolved, InternetDisconnected, AddressUnreachable, BlockedByClient, BlockedByResponse
* responseCode - If set, the request will be fulfilled with the given response status code, e.g. "404"
* responseHeaders - If set, the request will be fulfilled with the given response headers (Should be a String or a Map of String-String entries)
* responseBody (String or byte[]) - If set, the request will be fulfilled with the given body.

Only available when CDP-Driver is used to connect the browser.
     */
    WEB_REQUEST_RECEIVED
    /**
     Called as soon as a request is responded from the server to the browser.

The userInfo contains all information as described for WEB_REQUEST_RECEIVED.

In addition, the following entries are prefilled:
* errorReason - Only in case of error (replaceable)
* responseCode - If available (replaceable)
* responseHeaders - The headers returned from the server (replaceable)
* responseBodyAccessor - An object who's "get()"-Method returns the body of the response (String or byte[])

Information: Only modify the response headers or request the responseBody if the request content is
about to be small to avoid OutOfMemeory errors, since the complete body will go through QF-Test
for technical reasons.

Only available when CDP-Driver is used to connect the browser.
     */
    WEB_RESPONSE_RECEIVED
    /**
     
     */
    CREATING_WEBDRIVER
    
    /**
     * Posts a new notification.
     * 
     * @param notficationName the name of the notification. If it does not start with "user.",
     * it is prefixed with this string.
     * @param userInfo An optional map of data to attach to the notification
     */
    post(notificationName, userInfo=None)
    /**
     * Adds a notification observer with the given name for the given notificationNames
     * 
     * @param observerName the name of the observer
     * @param observer the method to call when a notification is posted. The method receives the name of the
     * posted notification as first argument and the userInfo map as second argument. If the observer
     * specifies only one argument, the userInfo map is provided as first parameter.
     * @param notificationNames the names of the notifications to be informed when posted. If a name does not
     * start with "user.", it is prefixed with this string. If no notification names are provided, the observerName
     * is used as notification name.
     */
    addObserver(observerName, method, notificationNames)
    /**
     * Removes the notification observer added before with the given name
     * 
     * @param observerName the name of the observer to remove
     */
    removeObserver(observerName)
    /** Remove all previously registered observers */
    removeAllObserver()
    /** List the names of all registered observers */
    listObserverNames()
}
/**
 @script server
 @context notifications
 @description User notifications provide a simple API for posting and handling notifications from user scripts.  Notifications are identified by a name, e.g. "user.sut.login" and provide a userInfo map, which can hold arbitrary key-value pairs.  To post notifications, use notification.post(notificationName, userInfo).  To observe notifications, add an observer method using addObserver(nameOfObserver, observerMethod, notificationName)
 */
class ServerNotifications{
    
    /**
     "user."
     */
    NOTIFICATION_PREFIX
    /**
     
     */
    RECORDING_STARTED
    /**
     
     */
    RECORDING_STOPPED
    /**
     
     */
    RECORDING_PAUSED
    /**
     
     */
    RECORDING_RESUMED
    /**
     
     */
    CHECK_RECORDING_STARTED
    /**
     
     */
    CHECK_RECORDING_STOPPED
    /**
     
     */
    REQUEST_RECORDING_STARTED
    /**
     
     */
    REQUEST_RECORDING_STOPPED
    /**
     
     */
    COMPONENT_RECORDING_STARTED
    /**
     
     */
    COMPONENT_RECORDING_STOPPED
    /**
     
     */
    PROCBUILDER_STARTED
    /**
     
     */
    PROCBUILDER_STOPPED
    /**
     
     */
    INSPECTOR_MODE_STARTED
    /**
     
     */
    INSPECTOR_MODE_STOPPED
    /**
     
     */
    RUN_STARTED
    /**
     
     */
    RUN_STOPPED
    /**
     
     */
    NODE_ENTERED
    /**
     
     */
    NODE_EXITED
    /**
     
     */
    RUN_ERROR_OCCURED
    
    /**
     * Posts a new notification.
     * 
     * @param notficationName the name of the notification. If it does not start with "user.",
     * it is prefixed with this string.
     * @param userInfo An optional map of data to attach to the notification
     */
    post(notificationName, userInfo=None)
    /**
     * Adds a notification observer with the given name for the given notificationNames
     * 
     * @param observerName the name of the observer
     * @param observer the method to call when a notification is posted. The method receives the name of the
     * posted notification as first argument and the userInfo map as second argument. If the observer
     * specifies only one argument, the userInfo map is provided as first parameter.
     * @param notificationNames the names of the notifications to be informed when posted. If a name does not
     * start with "user.", it is prefixed with this string. If no notification names are provided, the observerName
     * is used as notification name.
     */
    addObserver(observerName, method, notificationNames)
    /**
     * Removes the notification observer added before with the given name
     * 
     * @param observerName the name of the observer to remove
     */
    removeObserver(observerName)
    /** Remove all previously registered observers */
    removeAllObserver()
    /** List the names of all registered observers */
    listObserverNames()
}
