/**
 @script common
 @context automac
 @description Collection of simple methods for Mac test automation based on axjlib.  @author Pascal Bihler
 */
class CommonAutomac{
    
    /**
     1
     */
    NSApplicationDirectory
    /**
     2
     */
    NSDemoApplicationDirectory
    /**
     3
     */
    NSDeveloperApplicationDirectory
    /**
     4
     */
    NSAdminApplicationDirectory
    /**
     5
     */
    NSLibraryDirectory
    /**
     6
     */
    NSDeveloperDirectory
    /**
     7
     */
    NSUserDirectory
    /**
     8
     */
    NSDocumentationDirectory
    /**
     9
     */
    NSDocumentDirectory
    /**
     10
     */
    NSCoreServiceDirectory
    /**
     11
     */
    NSAutosavedInformationDirectory
    /**
     12
     */
    NSDesktopDirectory
    /**
     13
     */
    NSCachesDirectory
    /**
     14
     */
    NSApplicationSupportDirectory
    /**
     15
     */
    NSDownloadsDirectory
    /**
     16
     */
    NSInputMethodsDirectory
    /**
     17
     */
    NSMoviesDirectory
    /**
     18
     */
    NSMusicDirectory
    /**
     19
     */
    NSPicturesDirectory
    /**
     20
     */
    NSPrinterDescriptionDirectory
    /**
     21
     */
    NSSharedPublicDirectory
    /**
     22
     */
    NSPreferencePanesDirectory
    /**
     23
     */
    NSApplicationScriptsDirectory
    /**
     99
     */
    NSItemReplacementDirectory
    /**
     100
     */
    NSAllApplicationsDirectory
    /**
     101
     */
    NSAllLibrariesDirectory
    /**
     102
     */
    NSTrashDirectory
    /**
     1
     */
    NSUserDomainMask
    /**
     2
     */
    NSLocalDomainMask
    /**
     4
     */
    NSNetworkDomainMask
    /**
     8
     */
    NSSystemDomainMask
    /**
     0x0ffff
     */
    NSAllDomainsMask
    /**
     Specifies a mouse down event with the left button.
     */
    kCGEventLeftMouseDown
    /**
     Specifies a mouse up event with the left button.
     */
    kCGEventLeftMouseUp
    /**
     Specifies a mouse down event with the right button.
     */
    kCGEventRightMouseDown
    /**
     Specifies a mouse up event with the right button.
     */
    kCGEventRightMouseUp
    /**
     Specifies a mouse moved event.
     */
    kCGEventMouseMoved
    /**
     Specifies a mouse drag event with the left button down.
     */
    kCGEventLeftMouseDragged
    /**
     Specifies a mouse drag event with the right button down.
     */
    kCGEventRightMouseDragged
    /**
     Specifies a mouse down event with one of buttons 2-31.
     */
    kCGEventOtherMouseDown
    /**
     Specifies a mouse up event with one of buttons 2-31.
     */
    kCGEventOtherMouseUp
    /**
     Specifies a mouse drag event with one of buttons 2-31 down.
     */
    kCGEventOtherMouseDragged
    
    /**
     * Returns whether the current process is a trusted accessibility client.
     * @param informUser indicating whether the user will be informed if the current process is untrusted.
     * This could be used, for example, on application startup to always warn a user if accessibility is not enabled for the current process.
     * Prompting occurs asynchronously and does not affect the return value.
     * 
     * @return true if the current process is a trusted accessibility client, false if it is not.
     */
    isProcessTrusted(informUser)
    /**
     * Returns the accessibility object at the specified position in top-left relative screen coordinates,
     * unrestricted to the application
     * 
     * @param x The horizontal position.
     * @param y The vertical position.
     * @return the accessibility object at the position specified by x and y.
     * 
     * @throws AXException on error
     */
    elementAtPosition(x, y)
    /**
     * Creates and returns the top-level accessibility object for the application with the specified process ID.
     * 
     * @param pid The process ID of an application.
     * @return The AXUIElement representing the top-level accessibility object for the application with the specified process ID.
     */
    getApplicationAccessibilityObject(pid)
    /**
     * Returns an accessibility object that provides access to system attributes.
     * <br>
     * This is useful for things like finding the focused accessibility object regardless of which application is currently active.
     * @return The AXUIElement representing the system-wide accessibility object.
     */
    getSystemWideAccessibilityObject()
    /** */
    setGlobalMessagingTimeout(timeoutInMs)
    /**
     * Get the title of a window (or any other AXUIElement).
     * 
     * @param window The window.
     * @return The title of the window.
     */
    getWindowText(window)
    /**
     * Set the position of a window.
     * 
     * @param window
     * The window object.
     * @param x
     * The x co-ordinate.
     * @param y
     * The y co-ordinate.
     */
    setWindowPosition(window, x, y)
    /**
     * Set the size of a window.
     * 
     * @param window
     * The window object.
     * @param width
     * The width.
     * @param height
     * The height.
     */
    setWindowSize(window, width, height)
    /**
     * Iterates over all windows of all applications on the current desktop and matches the parameter
     * against the window title.
     * 
     * @param nameOrPattern The window title or a pattern to match
     * @param regexp If true, the title string will be transformed to a pattern
     * @return the window or null, if not found.
     */
    findWindow(nameOrPattern, regexp=False)
    /**
     * Wait for a window on the current desktop identified by its title.
     * 
     * @param timeout
     * The maximum time to wait (in ms).
     * @param nameOrPattern
     * TThe window title or a pattern to match
     * @return the window object or null, if not found.
     * @throws Exception
     */
    waitForWindow(timeout, nameOrPattern)
    /**
     * Close a window by pressing its close button.
     * 
     * @param window The Window to close
     */
    closeWindow(window)
    /**
     * Maximizes a window by pressing its zoom button. Depending on the user config,
     * The window size is optimized or the fullscreen mode is entered.
     * 
     * @param window The Window to maximize
     */
    maximizeWindow(window)
    /**
     * Puts a window in Full Screen mode
     * 
     * @param window The Window to put in Full screen mode
     */
    fullScreenWindow(window)
    /**
     * Minimizes a window by setting it AXMinimized value
     * 
     * @param window The Window to minimize
     */
    minimizeWindow(window)
    /**
     * Restores a window by unsetting its AXMinimized and AXFullScreen value
     * 
     * @param window The Window to restore
     */
    restoreWindow(window)
    /**
     * Puts a window to the foreground
     * 
     * @param window The Window to put to front
     */
    setForeground(window)
    /**
     * Dumps identification data of the given control and all children to the terminal
     * 
     * @param parent
     * the control to dump. Defaults to the desktop, i.e. all applications
     * @param maxDepth
     * the maximal depth of children to dump. Defaults to 3
     * @throws AutomationException
     * if something goes wrong
     * @throws PatternNotFoundException
     * if the desktop could not be found
     */
    dumpControls(parent=None, maxDepth=3)
    /**
     * Dumps identification data of the given control and all children to a file
     * 
     * @param filename
     * the name of the file to dump data to
     * @param parent
     * the Control object to dump. Defaults to the desktop, i.e. all applications
     * @param maxDepth
     * the maximal depth of children to dump. Defaults to 3
     * @param charset
     * the charset to use for the dump. Defaults to "UTF-8", other options include "US-ASCII", "ISO-8859-1", and "UTF-16"
     * @throws AutomationException
     * if something goes wrong
     * @throws PatternNotFoundException
     * if the desktop could not be found
     */
    dumpControlsToFile(filename, parent=None, maxDepth=3, charset="UTF-8")
    /** Returns an array of running applications, as seen by the Cocoa Core framework */
    runningApplications()
    /** Returns the running application with the given process identifier, or null if no application has that pid */
    runningApplicationWithProcessIdentifier(processIdentifier)
    /** Returns an array of currently running applications with the specified bundle identifier. */
    runningApplicationsWithBundleIdentifier(bundleIdentifier)
    /** Returns an NSRunningApplication representing this application. */
    currentApplication()
    /**
     * Creates a list of path strings for the specified directories in the specified domains.
     * The list is in the order in which you should search the directories.
     * 
     * @param directory An NSSearchPathDirectory constant
     * @param domainMask AN NSSearchPathDomainMask constant
     * @param expandTilde If expandTilde is true, tildes are expanded
     * 
     * @return a list of directory search paths
     */
    getSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde)
    /**
     * Creates and posts a Quartz keyboard event into the event stream.
     * 
     * @param keyCode The AWT key code for the event.
     * @param modifiers Explicit modifiers like java.awt.Event.CTRL_MASK.
     * @param keyDown Pass true to specify that the key position is down. To specify that the key position is up, pass false. This value is used to determine the type of the keyboard event.
     * @return <code>true</code> if the event could be created, false otherwise.
     */
    postKeyboardEvent(keyCode, modifiers, keyDown)
    /**
     * Posts a Quartz event into the event stream for a specific application.
     * 
     * @param pid The process ID of an application.
     * @param keyCode The AWT key code for the event.
     * @param modifiers Explicit modifiers like java.awt.Event.CTRL_MASK.
     * @param keyDown Pass true to specify that the key position is down. To specify that the key position is up, pass false. This value is used to determine the type of the keyboard event.
     * @return <code>true</code> if the event could be created, false otherwise.
     * 
     * @since macOs 10.11
     */
    postKeyboardEventToProcess(pid, keyCode, modifiers, keyDown)
    /**
     * Converts a given sequence of KeyStrokes into the corresponding characters using the current keyboard layout.
     * 
     * @param keyStrokes the keyStrokes. The keyCode is expected to be a KeyEvent constant
     * @return the string containing the corresponding characters
     */
    stringForKeyStrokes(keyStrokes)
    /**
     * Converts a given input String into sequence of KeyStrokes using the current keyboard layout.
     * 
     * @param input the String to convert to keystrokes
     * @return the keyStrokes required to output the string, using KeyEvent constants for the keyCodes
     */
    keyStrokesForString(input)
    /**
     * Sends appropriate key events to input text to the control currently in focus
     * 
     * @param textToInput the text to input
     * 
     * @since 5.1.1
     */
    sendText(textToInput)
    /**
     * Creates and posts a Quartz mouse event into the event stream.
     * 
     * @param mouseType A mouse event type. Pass one of the constants listed in CGEventType.
     * @param mouseCursorPositionX The x position where the event should be posted.
     * @param mouseCursorPositionY The y position where the event should be posted.
     * @param mouseButton The button that's changing state.
     * @param clickState The mouse button click state. A click state of 1 represents a single click. A click state of 2 represents a double-click. A click state of 3 represents a triple-click.
     * @param modifiers Explicit modifiers like java.awt.InputEvent.CTRL_DOWN_MASK.
     * @return <code>true</code> if the event could be created, false otherwise.
     */
    postMouseEvent(mouseType, mouseCursorPositionX, mouseCursorPositionY, mouseButton, clickState, modifiers)
    /**
     Readonly
     */
    virtualKeyToKeyCode
    /**
     Readonly
     */
    keyCodeToVirtualKey
    /**
     Writeonly
     */
    expectLibsInClasspath
}
