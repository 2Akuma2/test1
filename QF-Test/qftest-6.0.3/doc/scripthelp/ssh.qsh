/**
 @script common
 @context session
 @description Convenience class for managing an ssh session vie JSch, encapsulating both JSch session and channel to reduce complexity.
 */
class CommonSession{
    
    /**
     @script common
     @context Session
     @description 
     */
    class Session{
        
        
        /**
         * Define whether host key checking should take place.
         * 
         * @param check
         * Whether to check the fingerprint of the remote server.
         * @param knownHostFile
         * A file containing the fingerprint for the remote server
         * (optional, default is <user_home>/.ssh/known_hosts).
         * @throws JSchException
         */
        setHostKeyChecking(check, knownHostsFile=None)
        /**
         * Set the connection timeout for the session.
         * 
         * @param timeout
         * Time in ms to wait for a connection. -1 to wait forever.
         */
        setConnectTimeout(timeout)
        /**
         * Set the command to execute.
         * 
         * @param command
         * The command to execute.
         */
        setCommand(command)
        /**
         * Set the text to be passed to the stdin of the executing program.
         * 
         * @param input
         * Text to be bassed to the stdin of the executing program.
         * Ignored if inputFile is also specified for this Session.
         */
        setInput(input)
        /**
         * Set the file with the text to be passed to the stdin of the executing
         * program.
         * 
         * @param inputFile
         * The path to a local file. If a file is specified, the
         * content of this file is passed to the stdin of the
         * executing program.
         * @throws FileNotFoundException
         */
        setInputFile(inputFile)
        /**
         * Set the encoding for the stdout and stderr streams. Default is UTF-8.
         * 
         * @param encoding
         * The encoding to set. Must be a valid encoding name for the
         * running JRE.
         */
        setEncoding(encoding)
        /**
         * Open the session.
         * 
         * @throws JSchException
         * @throws IOException
         */
        open()
        /**
         * Send some input to the session.
         * 
         * @param input
         * The text to send.
         * @param addNewline
         * Whether to append a newline character if not already
         * present (optional, default true).
         * @throws IOException
         */
        send(input, addNewline=True)
        /**
         * Wait for some output from the session. Only output after the last
         * match for this method is taken into account.
         * 
         * @param regexp
         * A regular expression matching the text to wait for.
         * @param timeout
         * The maximum time to wait in ms. -1 to wait forever
         * (optional, default 1000).
         * 
         * @return The output from the process between the end of the previous
         * match and the end of this match. null if no matchin output
         * was received within the given time.
         * @throws UnsupportedEncodingException
         * @throws InterruptedException
         */
        expect(regexp, timeout=1000)
        /**
         * Wait for the executing command to finish.
         * 
         * @param timeout
         * The maximum time to wait in ms. -1 to wait forever
         * (optional, default 1000).
         * @return
         * @return
         * 
         * @return true if the command did finish, false if it is still running.
         * @throws InterruptedException
         */
        waitTime(timeout=1000)
        /**
         * Close the session.
         * 
         * @throws IOException
         */
        close()
        /**
         * Get the exit code of the command.
         * 
         * @return The exit code of the command.
         */
        getExitCode()
        /**
         * Get the output from the command to stdout.
         * 
         * @return The output from the command to stdout. Inclues output to
         * stderr if mixOut was set to true for this Session.
         * @throws UnsupportedEncodingException
         */
        getStdout()
        /**
         * Get the output from the command to stderr.
         * 
         * @return The output from the command to stderr. Empty if mixOut was
         * set to private Object stderr; true for this Session.
         * @throws UnsupportedEncodingException
         */
        getStderr()
    }
}
