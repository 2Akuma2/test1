/**
 @script sut
 @context webResolvers
 @description 
 */
class SutWebresolvers{
    
    
    /**
     * Register a ClassNameResolver for the given target(s), based on the given
     * Javascript function to get the class name to record for a component.If another
     * resolver was previously registered under the given identifier, unregisters
     * that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getClassName()
     * method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addClassNameResolver(name, jsFunction, targets)
    /**
     * Register a EnabledResolver for the given target(s), based on the given
     * Javascript function to determine whether a component is enabled. If another resolver
     * was previously registered under the given identifier, unregisters that
     * first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's isEnabled() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addEnabledResolver(name, jsFunction, targets)
    /**
     * Register an BusyApplicationDetector for the given engine(s), based on the
     * given Javascript function to detect the busy state of the application. Since the
     * function is executed in the browser, it is executed on the dispatch thread of the browser.
     * If another resolver was previously registered under the given
     * identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's applicationIsBusy()
     * method.
     * @param engines
     * One or more optional engines to register the resolver for.
     */
    addBusyApplicationDetector(name, jsFunction, engines)
    /**
     * Register a ExtraFeatureMatcher for the given target(s), based on the
     * given JavaScript function to match one extra feature of a GUI element. If another
     * resolver was previously registered under the given identifier, unregisters
     * that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's matchExtraFeature()
     * method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addExtraFeatureMatcher(name, jsFunction, targets)
    /**
     * Register a ExtraFeatureMatcher for a given featureName, optionally on the given target(s).
     * It is based on the given javascript function to match one extra feature of a GUI element. If another
     * resolver was previously registered under the given identifier, unregister
     * that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's matchExtraFeature()
     * method.
     * @param featureName      The name of the extra feature to match
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addSpecificExtraFeatureMatcher(name, jsFunction, featureName, targets)
    /**
     * Register an ExtraFeatureResolver for the given target(s), based on the
     * given JavaScript function to determine the extra features of a GUI element. If another
     * resolver was previously registered under the given identifier, unregisters
     * that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getExtraFeatures()
     * method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addExtraFeatureResolver(name, jsFunction, targets)
    /**
     * Register a FeatureResolver for the given target(s), based on the given
     * Javascript function to determine the feature of a GUI element. If another resolver was
     * previously registered under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getFeature() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addFeatureResolver(name, jsFunction, targets)
    /**
     * Register a GenericClassNameResolver for the given target(s), based on the
     * given JavaScript function to get the generic class name to record for a component. If
     * another resolver was previously registered under the given identifier,
     * unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's
     * getGenericClassName() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addGenericClassNameResolver(name, jsFunction, targets)
    /**
     * Register a ElementResolver for the given target(s), based on the
     * given JavaScript function to get the generic class name to record for a component. If
     * another resolver was previously registered under the given identifier,
     * unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's
     * getElement() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addElementResolver(name, jsFunction, targets)
    /**
     * Register an IdResolver for the given target(s), based on the given JavaScript function
     * to determine the id of a GUI element. If another resolver was previously
     * registered under the given name, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getId() method.
     * @param target
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addIdResolver(name, jsFunction, targets)
    /**
     * Register an IndexBasedItemNameResolver for the given target, based on the
     * given JavaScript function to determine the name of a sub-item of a complex component.
     * If another resolver was previously registered under the given identifier,
     * unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getItemName()
     * method.
     * @param target
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addIndexBasedItemNameResolver(name, jsFunction, targets)
    /**
     * Register a MainTextResolver for the given target(s), based on the given
     * Javascript function to determine the "main" text of a GUI element, i.e. what should be
     * used as a label, feature, etc. If another resolver was previously
     * registered under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getMainText()
     * method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addMainTextResolver(name, jsFunction, targets)
    /**
     * Register a NameResolver for the given target(s), based on the given
     * Javascript function to determine the name of a GUI element. If another resolver was
     * previously registered under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getName() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addNameResolver(name, jsFunction, targets)
    /**
     * Register a RedirectResolver for the given target(s), based on the given
     * Javascript function to determine whether a mouse event on a component should be
     * redirected. If another resolver was previously registered under the given
     * identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's shouldRedirect()
     * method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addRedirectResolver(name, jsFunction, targets)
    /**
     * Register a TooltipResolver for the given target(s), based on the given
     * Javascript function to determine the tooltip of a GUI element. If another resolver was
     * previously registered under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getTooltip() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addTooltipResolver(name, jsFunction, targets)
    /**
     * Register a VisibilityResolver for the given target(s), based on the given
     * Javascript function to determine the visibility of a GUI element. If another resolver
     * was previously registered under the given identifier, unregisters that
     * first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's isVisible() method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addVisibilityResolver(name, jsFunction, targets)
    /**
     * Register a WholeTextResolver for the given target(s), based on the given
     * Javascript function to determine the "whole" text of a GUI element, i.e. what should
     * be used for a check, etc. If another resolver was previously registered
     * under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getWholeText()
     * method.
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addWholeTextResolver(name, jsFunction, targets)
    /**
     * Register an ItemNameResolver for the given target, based on the given
     * Javascript function to get the name of a sub-item of a given GUI element. The type of
     * the item representation depends on the element and the ItemResolver
     * responsible for that element. If another resolver was previously
     * registered under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getItemName()
     * method.
     * @param target
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addItemNameResolver(name, jsFunction, targets)
    /**
     * Register an ItemValueResolver for the given target, based on the given
     * JavaScript function to get a sub-item's value. If another resolver was previously
     * registered under the given identifier, unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param jsFunction
     * The function that implements the resolver's getItemValue()
     * method.
     * @param target
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addItemValueResolver(name, jsFunction, targets)
    /**
     * Register a Javascript function as resolver for the given target(s). The type of the
     * resolver can be determined if the method has a name which corresponds to the method of the resolver interface.
     * 
     * Multiple resolvers can be registered with one identifier by giving multiple JS functions. If
     * another resolver was previously registered under the given identifier,
     * unregisters that first.
     * 
     * @param name
     * The name under which to register the resolver.
     * @param resolver
     * The function that represents the resolver
     * @param targets
     * One or more optional targets to register the resolver for.
     * Each can be any of the following: - An individual component -
     * The fully qualified name of a class If no target is given a
     * global resolver for all components is registered.
     */
    addResolver(name, resolver, targets)
    /**
     * Unregister a previously registered resolver.
     * 
     * @param name
     * The name of the resolver.
     */
    removeResolver(name)
    /** Remove all previously registered resolvers */
    removeAll()
    /** List the names of all registered resolvers */
    listNames()
}
