/**
 @script server
 @context rc
 @description The current run context
 */
class ServerRc{
    
    /**
     Error level for check in case of failure: No error.
     */
    OK
    /**
     Error level for check in case of failure: Warning.
     */
    WARNING
    /**
     Error level for check in case of failure: Error.
     */
    ERROR
    /**
     Error level for check in case of failure: Exception.
     */
    EXCEPTION
    /**
     State of a called test-case, if it has been skipped.
     */
    SKIPPED
    /**
     State of a called test-case, if it has not been implemented.
     */
    NOT_IMPLEMENTED
    
    /**
     * Call a 'Procedure' in a test-suite. Note: As a convenience, this method
     * can also be called from an 'SUT script'. Care should be taken however,
     * because the script is executed inside the AWT event dispatch thread, so
     * weird side-effects are possible, though QF-Test does its best to avoid
     * these. If possible, call 'Procedures' from a 'Server script' instead.
     * 
     * @param procname
     * The fully qualified name of the 'Procedure'.
     * @param parameters
     * The parameters for the 'Procedure' as Map. Its keys and values
     * can be arbitrary values. They are converted to strings for the
     * call.
     * @return The value returned from the 'Procedure' through an optional
     * 'Return' node.
     */
    callProcedure(procname, parameters=None)
    /**
     * Expand a string using standard QF-Test variable expansion for $(...) or
     * ${...:...} syntax. Note: Remember to double the '$' signs to avoid
     * expansion before the script is executed.
     * 
     * @param text
     * The string to expand.
     * @return The expanded string.
     */
    expand(text)
    /**
     * Add a listener for listening on Run -> Reset everything. The listener
     * should implement the interface
     * de.qfs.apps.qftest.extensions.qftest.ResetListener.
     * 
     * @param listener
     * The listener to add.
     */
    addResetListener(listener)
    /**
     * Remove a listener listening on Run -> Reset everything.
     * 
     * @param listener
     * The listener to remove.
     * @return True if the listener was found in the list and was removed.
     */
    removeResetListener(listener)
    /**
     * Check if a listener is registered.
     * 
     * @param listener
     * The listener to check, if it is registered.
     */
    isResetListenerRegistered(listener)
    /**
     * Server only. Flush buffered log entries to prevent them from being
     * compactified. Equivalent to logging an error but without the side
     * effects.
     */
    flushLog()
    /**
     * Server only. Get the last exception (caught or uncaught) that was thrown
     * during the test-run. In most cases getCaughtException is probably more
     * useful.
     * 
     * @return The most recent exception that was thrown.
     */
    getLastException()
    /**
     * Server only. If the script is run inside a 'Catch' node, the exception
     * that was caught is returned. Similarly, if a 'Test' node has the
     * 'Implicitly catch exceptions' attribute set, the caught exception is
     * available during execution of the 'Test' node's 'Cleanup' node. In all
     * other cases, null is returned.
     * 
     * @return The caught exception.
     */
    getCaughtException()
    /**
     * Server only. Adds event information stored in the SUT for possible error
     * diagnosis to the run-log.
     * 
     * @param client
     * The name of the SUT client from which to get the information.
     */
    logDiagnostics(client, engine=None)
    /**
     * Server only. Set some global variables in the script interpreter of the
     * SUT.
     * 
     * @param client
     * The name of the SUT client.
     * @param vars
     * For each key in the map, a global variable by that name is set
     * to the corresponding value from the map.
     */
    toSUT(client, vars)
    /**
     * Server only. Retrieve the value of a global variable in the script
     * interpreter of the SUT. If the variable is undefined, a KeyError is
     * raised.
     * 
     * @param client
     * The name of the SUT client.
     * @param name
     * The name of the variable.
     * @return The value of the variable.
     */
    fromSUT(client, name)
    /** Server only. Undefine all global variables. */
    clearGlobals()
    /**
     * List all available property group names defined by the user. Names are
     * returned in alphabetic order.
     */
    getPropertyGroupNames()
    /**
     * Clear a given group of properties or resources.
     * 
     * @param group
     * The group name of the properties or resources.
     */
    clearProperties(group)
    /**
     * Server only. Synchronize a number of parallel threads for load testing.
     * The current thread is blocked until all threads have reached this
     * synchronization point or the timeout is exceeded. In the latter case, a
     * TestException is thrown or an error logged.
     * 
     * @param id
     * An identifier for the synchronization point.
     * @param timeout
     * The maximum time to wait in milliseconds.
     * @param count
     * The number of threads to wait for. Default value -1 means all
     * threads in the current QF-Test instance.
     * @param remote
     * The number of QF-Test instances - potentially running on
     * different machines - to synchronize. Default 0 means don't do
     * remote synchronization.
     * @param throwEx
     * Whether to throw an exception (default) or just log an error
     * if the timeout is exceeded without all threads reaching the
     * synchronization point.
     */
    syncThreads(id, timeout, count=-1, remote=0, raise=True)
    /**
     * Add a run-log retrieved from a DaemonRunContext to the current run-log.
     * 
     * @param data
     * The byte array retrieved via DaemonRunContext.getRunLog().
     * @param name
     * An optional name for the daemon log node. If unspecified the
     * ID of the Daemon is used.
     * @param comment
     * An optional comment for the daemon log node.
     * @param externalizename
     * An optional name to externalize the daemon log and save it as
     * a partial log of a split run-log.
     */
    addDaemonLog(data, name=None, comment=None, externalizename=None)
    /**
     * Call a 'Test-Case' or 'Test-Set' in a test-suite.
     * 
     * @param test
     * The fully qualified name of the 'Test-Case' or 'Test-Set'.
     * @param param
     * The parameters for the called node. This should be a
     * dictionary. Its keys and values can be arbitrary values. They
     * are converted to strings for the call.
     * @return The result of the test. Either rc.OK, rc.WARNING, rc.ERROR,
     * rc.EXCEPTION, rc.SKIPPED or rc.NOT_IMPLEMENTED.
     */
    callTest(testname, parameters=None)
    /**
     * Call a 'Test-case', 'Test-set' or'Test-suite'. In case of a nested test-call the call acts like a procedure call.
     * 
     * @param test
     * The fully qualified name of the 'Test-Case' or 'Test-Set'.
     * @param param
     * The parameters for the called node. This should be a
     * dictionary. Its keys and values can be arbitrary values. They
     * are converted to strings for the call.
     * @return The result of the test. Either rc.OK, rc.WARNING, rc.ERROR,
     * rc.EXCEPTION, rc.SKIPPED or rc.NOT_IMPLEMENTED.
     */
    callTestAsProcedure(testname, parameters=None)
    /**
     * Register a TestRunListener with the current run-context.
     * 
     * @param listener
     * The listener to register.
     */
    addTestRunListener(listener)
    /**
     * Unregister a TestRunListener from the current run-context.
     * 
     * @param listener
     * The listener to unregister.
     */
    removeTestRunListener(listener)
    /** Unregister all TestRunListeners from the current run-context. */
    clearTestRunListeners()
    /**
     * Get the names of the currently connected SUT clients.
     * 
     * @return A list with the names of the currently connected SUT clients, an
     * empty list in case there are none.
     */
    getConnectedClients()
    /**
     * Resolve a 'Dependency'.
     * 
     * @param dependency
     * The fully qualified name of the 'Dependency' to resolve.
     * @param namespace
     * An optional namespace to resolve the 'Dependency' in.
     * @param params
     * The parameters for the 'Dependency'. This should be a
     * dictionary. Its keys and values can be arbitrary values. They
     * are converted to strings for the call.
     */
    resolveDependency(dep, namespace, params=None)
    /**
     * Unroll the dependency stack.
     * 
     * @param namespace
     * An optional namespace to unroll the dependencies in.
     */
    rollbackDependencies(namespace=None)
    /**
     * Completely reset the dependency stack without executing any cleanup.
     * 
     * @param namespace
     * An optional namespace to reset the dependencies for.
     */
    resetDependencies(namespace=None)
    /**
     * Add a plain message to the run log.
     * 
     * @param message
     * The message to log.
     * @param dontcompactify
     * If true, the message will never be removed from a compact
     * run-log.
     * @param report
     * If true, the message will appear in the report.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     */
    logMessage(message, dontcompactify=False, report=False, nowrap=False)
    /**
     * Add a warning message to the run log.
     * 
     * @param message
     * The message to log.
     * @param report
     * If true, the message will appear in the report.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     */
    logWarning(message, report=True, nowrap=False)
    /**
     * Add an error message to the run log.
     * 
     * @param message
     * Add an error message to the run log.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     */
    logError(message, nowrap=False)
    /**
     * Add an image to the run-log
     * 
     * @param image
     * The ImageRep for the log.
     * @param title
     * An optional title for the image.
     * @param dontcompactify
     * True to ensure that the image is not compactify.
     * @param report
     * True to log the image in the report (implies dontcompactify).
     */
    logImage(image, title=None, dontcompactify=False, report=False)
    /**
     * Check or "assert" that a condition is true and log a message according to
     * the result.
     * 
     * @param condition
     * The condition to evaluate.
     * @param message
     * The message to log. It will be preceded by "Check OK: " or
     * "Check failed: " depending on the result. For the old-style
     * XML or HTML report the message will be treated like a 'Check'
     * node if it starts with an '!' character.
     * @param level
     * The error level in case of failure. The following constants
     * are defined in the run-context: rc.OK rc.WARNING rc.ERROR
     * rc.EXCEPTION If the level is rc.EXCEPTION, a UserException
     * will be thrown if the check fails.
     * @param report
     * If true, the check will appear in the report. Only applicable
     * if level <= 1.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     * @return The result of the check.
     */
    check(condition, message, level=2, report=True, nowrap=False)
    /**
     * Check or "assert" that an object matches a given value and log a message
     * according to the result. Comparison is done using the == operator.
     * 
     * @param actual
     * The actual value.
     * @param expected
     * The expected value.
     * @param message
     * The message to log. It will be preceded by "Check OK: " or
     * "Check failed: " depending on the result. In case of failure,
     * the expected and actual values will also be logged. For the
     * old-style XML or HTML report the message will be treated like
     * a 'Check' node if it starts with an '!' character.
     * @param level
     * The error level in case of failure. The following constants
     * are defined in the run-context: rc.OK rc.WARNING rc.ERROR
     * rc.EXCEPTION If the level is rc.EXCEPTION, a UserException
     * will be thrown if the check fails.
     * @param report
     * If true, the check will appear in the report. Only applicable
     * if level <= 1.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     * @return The result of the check.
     */
    checkEqual(actual, expected, message, level=2, report=True, nowrap=False)
    /**
     * Compare two ImageRep objects.
     * 
     * @param actual
     * The actual image for comparison.
     * @param expected
     * The expected image for comparison.
     * @param message
     * Error message for the run-log.
     * @param level
     * The error level in case of failure. The following constants
     * are defined in the run-context: rc.OK rc.WARNING rc.ERROR
     * rc.EXCEPTION If the level is rc.EXCEPTION, a UserException
     * will be thrown if the check fails.
     * @param report
     * If true, the check will appear in the report. Only applicable
     * if level <= 1.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     * 
     * @return The result of the check
     */
    checkImage(actual, expected, message, level=2, report=True, nowrap=False)
    /**
     * Compare two ImageRep objects by using an algorithm.
     * 
     * @param actual
     * The actual image for comparison.
     * @param expected
     * The expected image for comparison.
     * @param message
     * Error message for the run-log.
     * @param algorithm
     * The algorithm to use for this check.
     * @param level
     * The error level in case of failure. The following constants
     * are defined in the run-context: rc.OK rc.WARNING rc.ERROR
     * rc.EXCEPTION If the level is rc.EXCEPTION, a UserException
     * will be thrown if the check fails.
     * @param report
     * If true, the check will appear in the report. Only applicable
     * if level <= 1.
     * @param nowrap
     * If true, lines of the message will not appear wrapped in the
     * report. Use for potentially long messages.
     * @return An array with following content: Check result as Boolean. Check
     * result as probability. Transformation of expected image if
     * available. Transformation of actual image if available.
     */
    checkImageAdvanced(actual, expected, message, algorithm, level=2, report=True, nowrap=False)
    /**
     * Look up the value of a QF-Test variable, similar to lookup().
     * 
     * @param var1
     * The name of the variable or group.
     * @param var2
     * The name of the resource or property for the given group.
     * @param expand
     * Whether to expand the value of the variable recursively. If,
     * for example, the value of $(varname) is the literal string
     * "$(othervar)", this method will return the expanded value of
     * $(othervar) if expand is true and "$(othervar)" itself if
     * expand is false. Note that if you want to set this parameter,
     * you must use Python keyword syntax to avoid conflicts with
     * lookup(String group, String name), i.e. rc.lookup("var",
     * expand=False) instead of rc.lookup("var", 0).
     * @return The value of the variable as string.
     */
    getStr(var1, var2=None, expand=True)
    /**
     * Return a Pattern using the value of a QF-Test variable as regular expression.
     * 
     * @param var1
     * The name of the variable or group.
     * @param var2
     * The name of the resource or property for the given group.
     * @param expand
     * Whether to expand the value of the variable recursively. If,
     * for example, the value of $(varname) is the literal string
     * "$(othervar)", this method will return the expanded value of
     * $(othervar) if expand is true and "$(othervar)" itself if
     * expand is false. Note that if you want to set this parameter,
     * you must use Python keyword syntax to avoid conflicts with
     * lookup(String group, String name), i.e. rc.lookup("var",
     * expand=False) instead of rc.lookup("var", 0).
     * @return The value of the variable as string.
     */
    getPattern(var1, var2=None, expand=True)
    /**
     * Return the value of a QF-Test variable as Integer.
     * 
     * @param var1
     * The name of the variable or group.
     * @param var2
     * The name of the resource or property for the given group.
     * @return The value of the variable.
     */
    getInt(var1, var2=None)
    /**
     * Look up the value of a QF-Test variable, similar to lookup(), but treat
     * it as a number, i.e. an integer or a float, depending on its format.
     * 
     * @param var1
     * The name of the variable or group.
     * @param var2
     * The name of the resource or property for the given group.
     * @return The value of the variable as int.
     */
    getNum(var1, var2=None)
    /**
     * Look up the value of a QF-Test variable, similar to lookup(), but treat
     * it as a boolean.
     * 
     * @param var1
     * The name of the variable or group.
     * @param var2
     * The name of the resource or property for the given group.
     * @return The value of the variable as boolean.
     */
    getBool(var1, var2=None, expand=True)
    /**
     * Look up the value of a QF-Test variable, similar to ${group:varname}.
     * 
     * @param var1
     * The name of the variable or group.
     * @param var2
     * The name of the resource or property for the given group.
     * @param expand
     * Whether to expand the value of the variable recursively. If,
     * for example, the value of $(varname) is the literal string
     * "$(othervar)", this method will return the expanded value of
     * $(othervar) if expand is true and "$(othervar)" itself if
     * expand is false.
     * @return The value of the variable.
     */
    lookup(var1, var2=None, expand=True)
    /**
     * Define a global QF-Test variable.
     * 
     * @param name
     * The name of the variable.
     * @param value
     * An arbitrary value for the variable. It is automatically
     * converted to a string. A value of None unsets the variable.
     */
    setGlobal(name, value)
    /**
     * Define a local QF-Test variable.
     * 
     * @param name
     * The name of the variable.
     * @param value
     * An arbitrary value for the variable. It is automatically
     * converted to a string. A value of None unsets the variable.
     */
    setLocal(name, value)
    /**
     * Set the value of a resource or property in a group. Note: This method
     * also works for the special groups 'system' and 'env' and can be used as a
     * means to set environment variables and system properties. Values in the
     * special group 'qftest' cannot be set or changed that way.
     * 
     * @param group
     * The name of the group. A new group is created automatically if
     * necessary.
     * 
     * @param name
     * The name of the resource or property.
     * @param value
     * An arbitrary value for the property. It is automatically
     * converted to a string. A value of None or null unsets the
     * property.
     */
    setProperty(group, name, value)
    /**
     * Get the global bindings of the context.
     * 
     * @return The global bindings of the context.
     */
    getGlobals()
    /**
     * Get the innermost local bindings of the context.
     * 
     * @param nonEmpty
     * True to get the first non-empty set of bindings, false to get
     * the innermost bindings even when empty.
     * @return The context's innermost local bindings.
     */
    getLocals(nonEmpty=False)
    /**
     * Get a set of loaded properties or resources.
     * 
     * @param group
     * The group name of the properties or resources.
     * @return The properties bound for the given group or None if no such group
     * exists.
     */
    getProperties(group)
    /** Stop the current test-run by raising a StopException. */
    stopTest()
    /**
     * Stop the execution of the current test-case.
     * 
     * @param expectedFail
     * If true, mark possible errors in this test-case as expected
     * failures.
     */
    stopTestCase(expectedFail=False)
    /** Stop the current test-set by raising a TestCaseStoppedException. */
    stopTestSet()
    /** Skip the current test-case by raising a TestCaseSkippedException. */
    skipTestCase()
    /** Skip the current test-set by raising a TestCaseSkippedException. */
    skipTestSet()
    /**
     * Get an option value.
     * 
     * @param name
     * The name of the option to get as defined in the 'Options'
     * class.
     */
    getOption(name)
    /**
     * Set an option value. An option defined in a script has higher precedence
     * than the options defined in the Option dialog.
     * 
     * @param name
     * The name of the option to set as defined in the 'Options'
     * class.
     * @param value
     * The new value for the option.
     */
    setOption(name, value)
    /**
     * Unset an option value by removing the option from those defined at script
     * level so that the original option defined in the Option dialog is used
     * again.
     * 
     * @param name
     * The name of the option to unset as defined in the 'Options'
     * class.
     */
    unsetOption(name, ignored)
    /**
     * Test whether an option has been set at script level.
     * 
     * @param name
     * The name of the option to get as defined in the 'Options'
     * class.
     * @return True if the option has been set, false otherwise.
     */
    isOptionSet(name)
    /**
     * Return the 'QF-Test ID' of a given ${id:QF-Test ID} expression. You
     * should use this command to update the script in case of 'QF-Test ID'
     * changes.
     * 
     * @param id
     * The ${id:QF-Test ID} expression.
     * @return The 'QF-Test ID' of the searched component.
     */
    id(id)
    /** */
    valueToBoolean(value)
    /**
     Readonly
     */
    languageName
}
