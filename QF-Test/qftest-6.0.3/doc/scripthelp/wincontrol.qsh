/**
 @script SUT
 @context winc
 @description Class to designate pseudo GUI elements of the target toolkit.  Toplevel is a handle, as are its children, basically all at the same level of abstraction.  We can try to get actual class names (depending on the implememting framework) and a gereric type name, a UIAutomation constant. We can also query for information about the object's capabilities.  This API is also part of the Helper interface but we want a complete Java-side cache so we'll implement it with actual parent/child associations and member variables.  @author      Gregor Schmid, Thomas Max, Robert Lahmer
 */
class SutWinc{
    
    /**
     
     */
    EMPTY_ARRAY
    
    /** */
    getWinControl(handle)
    /**
     * Get the type for the control. This is the UIAutomation type name
     * extended by a prefix to avoid confusion with QF-Test's generic class names.
     * 
     * @return  The type name.
     */
    getUiaType()
    /**
     * Get the type for the control. This is the UIAutomation type name without prefix.
     * 
     * @return  The type name without prefix.
     */
    getTypeWithoutPrefix()
    /**
     * Get the class name for the WinControl. This is the UIAutomation class name
     * extended by a framework specific prefix to avoid confusion with QF-Test's generic class names.
     * 
     * @return  The class name.
     */
    getUiaClassName()
    /**
     * Geth the generic class name of the Node.
     * 
     * @return The generic class name of the node or null if the resolvers did not return a generic
     * class name.
     */
    getGenericClassName()
    /**
     * Get all generic class names.
     * 
     * @return  An array with all generic class names.
     */
    getGenericClassNames()
    /** Reset the class names so that resolving takes place at the next getClassNames call. */
    resetClassNames()
    /**
     * Check whether the control matches a given class name.
     * 
     * @param className  The class name to be checked.
     * @return  True, if the control matches the given class name.
     */
    isMatchingClass(className)
    /**
     * Check whether the control matches a set of given class names.
     * 
     * @param classNames  The class names to be checked.
     * @return  True, if the control matches one of the given class names.
     */
    isMatchingClass(classNames)
    /**
     * Get all descendants of the control which match the given class name.
     * 
     * @param className  The class name to be matched.
     * @return  An array with the descendants.
     */
    getElementsByClassName(className)
    /**
     * Get all descendants of the control which match the given class names.
     * 
     * @param classNames  The class names to be matched.
     * @return  An array with the descendants.
     */
    getElementsByClassName(classNames)
    /**
     * Get all descendants of the control which match the given class names.
     * Do not traverse into elements matching the given stop class names.
     * 
     * @param classNames  The class names to be matched.
     * @param stopClassNames  The stop class names.
     * @return  An array with the descendants.
     */
    getElementsByClassName(classNames, stopClassNames)
    /**
     * Get all children of the control which have the given UIAutomation class name.
     * 
     * @param className  The class name.
     * @return  An array with the children.
     */
    getChildrenByUiaClassName(className)
    /**
     * Get all children of the control which have the given type name.
     * 
     * @param typeName  The type name.
     * @return  An array with the children.
     */
    getChildrenByUiaType(typeName)
    /**
     * Get the control ancestor which has the given type name.
     * 
     * @param typeName  The type name.
     * @return  The ancestor or null.
     */
    getAncestorByUiaType(typeName)
    /**
     * Get number of children of the control.
     * 
     * @return  The child count.
     */
    getChildCount()
    /**
     * Get the control's child with the given index.
     * 
     * @param index  The index.
     * @return  The child.
     */
    getChild(index)
    /**
     * Get the children of the control.
     * 
     * @return  An array with the children.
     */
    getChildren()
    /**
     * Get the control's next sibling.
     * 
     * @return  The next sibling or null.
     */
    getNextSibling()
    /**
     * Get the top-level ancestor of the control.
     * 
     * @return  The top-level ancestor or null.
     */
    getTopAncestor()
    /**
     * Set the myChildrenInvalid state of the WinControl.
     * 
     * @param   myChildrenInvalid  The myChildrenInvalid state to set.
     * @param   timestamp          The timestamp of the event causing the invalidation.
     * @return  Whether the desired action was done.
     */
    setMyChildrenInvalid(myChildrenInvalid, timestamp)
    /**
     * Test whether children are invalid. May come from this control or any ancestor with invalid children.
     * 
     * @return  True if children are invalid.
     */
    isChildrenInvalid()
    /**
     * Set the hierarchyDirty state of the WinControl.
     * 
     * @param   hierarchyDirty  The hierarchyDirty state to set.
     */
    setHierarchyDirty(hierarchyDirty)
    /**
     * Get the (physical) location of the element on the screen.
     * 
     * @return  An array with X, Y, width and height.
     */
    getLocationOnScreen()
    /**
     * Get the (physical) size of the element.
     * 
     * @return  An array with the width and the height.
     */
    getSize()
    /**
     * Get the (physical) location of the element within its parent.
     * 
     * @return  An array with the X and Y coordinates.
     */
    getLocation()
    /**
     * Scroll an element into view.
     * 
     * @param  ctrl  The WinControl.
     */
    scrollVisible()
    /**
     * Get the UI Automation name of the element.
     * 
     * @return  The name, if any or null.
     */
    getUiaName()
    /**
     * Get the UI Automation identifier of the element.
     * 
     * @return  The ID, if any or null.
     */
    getUiaId()
    /**
     * Get the UI Automation description of the element.
     * 
     * @return  The description or an empty string.
     */
    getUiaDescription()
    /**
     * Get the UI Automation help text of the element.
     * 
     * @return  The help text or an empty string.
     */
    getUiaHelp()
    /**
     * Check whether the underlying Automation Element supports the given pattern.
     * 
     * @param pattern  The pattern name, e.g "Invoke", "ExpandCollapse" etc.
     * @return Whether the pattern is supported by the element.
     */
    hasPattern(pattern)
    /**
     * Get all patterns in a string separated by whitespace. Prefer using hasPattern()
     * for not to bother with the exact format of the getPatterns-string.
     * 
     * @return  A string with the patterns of the element.
     */
    getPatterns()
    /**
     * Get the native window handle.
     * 
     * @return  The native window handle or 0 if not available.
     */
    getHwnd()
    /**
     * Get a value for an element, most of the time from the Value or Text pattern, if any.
     * A value may also be retrieved from Text children or in special cases from the Automation Name.
     * 
     * @return  A value or null.
     */
    getTextOrValue()
    /**
     * Get the visibility of an element.
     * 
     * @return  True, when the control is considered to be visible on the screen and false otherwise.
     */
    isShowing()
    /**
     * Create an AutomationControl for the WinControl, compatible with the uiauto script module.
     * 
     * @return  The AutomationControl object.
     */
    getUiaControl()
    /** */
    hashCode()
    /** */
    equals(o)
    /**
     * Get a String representation of the control.
     * 
     * @return  A String representation of the control.
     */
    toString()
    /**
     
     */
    OrientationHorizontal
    /**
     
     */
    OrientationVertical
    /**
     Readonly
     */
    driver
    /**
     Readonly
     */
    handle
    /**
     Readonly
     */
    framework
    /**
     Readonly
     */
    toplevel
    /**
     Readonly
     */
    parent
    /**
     Readonly
     */
    myChildrenInvalid
    /**
     Readonly
     */
    hierarchyDirty
    /**
     
     */
    omitValidation
    /**
     
     */
    creationTime
}
