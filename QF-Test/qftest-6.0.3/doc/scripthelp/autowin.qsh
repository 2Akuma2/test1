/**
 @script common
 @context autowin
 @description Collection of simple methods for Windows test automation.
 */
class CommonAutowin{
    
    /**
     0x0D
     */
    VK_RETURN
    /**
     0x0D
     */
    VK_ENTER
    /**
     0x08
     */
    VK_BACKSPACE
    /**
     0x09
     */
    VK_TAB
    /**
     0x10
     */
    VK_SHIFT
    /**
     0x11
     */
    VK_CONTROL
    /**
     0x11
     */
    VK_CTRL
    /**
     0x12
     */
    VK_MENU
    /**
     0x12
     */
    VK_ALT
    /**
     0x1B
     */
    VK_ESCAPE
    /**
     0x1B
     */
    VK_ESC
    /**
     0x20
     */
    VK_SPACE
    /**
     0x21
     */
    VK_PRIOR
    /**
     0x21
     */
    VK_PGUP
    /**
     0x22
     */
    VK_NEXT
    /**
     0x22
     */
    VK_PGDOWN
    /**
     0x23
     */
    VK_END
    /**
     0x24
     */
    VK_HOME
    /**
     0x25
     */
    VK_LEFT
    /**
     0x26
     */
    VK_UP
    /**
     0x27
     */
    VK_RIGHT
    /**
     0x28
     */
    VK_DOWN
    /**
     0x2D
     */
    VK_INSERT
    /**
     0x2E
     */
    VK_DELETE
    /**
     0x5B
     */
    VK_WINDOWS
    /**
     0x70
     */
    VK_F1
    /**
     0x71
     */
    VK_F2
    /**
     0x72
     */
    VK_F3
    /**
     0x73
     */
    VK_F4
    /**
     0x74
     */
    VK_F5
    /**
     0x75
     */
    VK_F6
    /**
     0x76
     */
    VK_F7
    /**
     0x77
     */
    VK_F8
    /**
     0x78
     */
    VK_F9
    /**
     0x79
     */
    VK_F10
    /**
     0x7A
     */
    VK_F11
    /**
     0x7B
     */
    VK_F12
    /**
     0x7C
     */
    VK_F13
    /**
     0x7D
     */
    VK_F14
    /**
     0x7E
     */
    VK_F15
    /**
     0x7F
     */
    VK_F16
    /**
     0x80
     */
    VK_F17
    /**
     0x81
     */
    VK_F18
    /**
     0x82
     */
    VK_F19
    /**
     0x83
     */
    VK_F20
    /**
     0x84
     */
    VK_F21
    /**
     0x85
     */
    VK_F22
    /**
     0x86
     */
    VK_F23
    /**
     0x87
     */
    VK_F24
    /**
     0x30
     */
    VK_0
    /**
     0x31
     */
    VK_1
    /**
     0x32
     */
    VK_2
    /**
     0x33
     */
    VK_3
    /**
     0x34
     */
    VK_4
    /**
     0x35
     */
    VK_5
    /**
     0x36
     */
    VK_6
    /**
     0x37
     */
    VK_7
    /**
     0x38
     */
    VK_8
    /**
     0x39
     */
    VK_9
    /**
     0x41
     */
    VK_A
    /**
     0x42
     */
    VK_B
    /**
     0x43
     */
    VK_C
    /**
     0x44
     */
    VK_D
    /**
     0x45
     */
    VK_E
    /**
     0x46
     */
    VK_F
    /**
     0x47
     */
    VK_G
    /**
     0x48
     */
    VK_H
    /**
     0x49
     */
    VK_I
    /**
     0x4A
     */
    VK_J
    /**
     0x4B
     */
    VK_K
    /**
     0x4C
     */
    VK_L
    /**
     0x4D
     */
    VK_M
    /**
     0x4E
     */
    VK_N
    /**
     0x4F
     */
    VK_O
    /**
     0x50
     */
    VK_P
    /**
     0x51
     */
    VK_Q
    /**
     0x52
     */
    VK_R
    /**
     0x53
     */
    VK_S
    /**
     0x54
     */
    VK_T
    /**
     0x55
     */
    VK_U
    /**
     0x56
     */
    VK_V
    /**
     0x57
     */
    VK_W
    /**
     0x58
     */
    VK_X
    /**
     0x59
     */
    VK_Y
    /**
     0x5A
     */
    VK_Z
    /**
     0x60
     */
    VK_NUMPAD0
    /**
     0x61
     */
    VK_NUMPAD1
    /**
     0x62
     */
    VK_NUMPAD2
    /**
     0x63
     */
    VK_NUMPAD3
    /**
     0x64
     */
    VK_NUMPAD4
    /**
     0x65
     */
    VK_NUMPAD5
    /**
     0x66
     */
    VK_NUMPAD6
    /**
     0x67
     */
    VK_NUMPAD7
    /**
     0x68
     */
    VK_NUMPAD8
    /**
     0x69
     */
    VK_NUMPAD9
    /**
     0x0001
     */
    KEYEVENTF_EXTENDEDKEY
    /**
     0x0002
     */
    KEYEVENTF_KEYUP
    /**
     0x0001
     */
    MOUSEEVENTF_MOVE
    /**
     0x0002
     */
    MOUSEEVENTF_LEFTDOWN
    /**
     0x0004
     */
    MOUSEEVENTF_LEFTUP
    /**
     0x0008
     */
    MOUSEEVENTF_RIGHTDOWN
    /**
     0x0010
     */
    MOUSEEVENTF_RIGHTUP
    /**
     0x0020
     */
    MOUSEEVENTF_MIDDLEDOWN
    /**
     0x0040
     */
    MOUSEEVENTF_MIDDLEUP
    /**
     0x0800
     */
    MOUSEEVENTF_WHEEL
    /**
     0x8000
     */
    MOUSEEVENTF_ABSOLUTE
    /**
     120
     */
    WHEEL_DELTA
    /**
     0
     */
    SM_CXSCREEN
    /**
     1
     */
    SM_CYSCREEN
    /**
     0xF060
     */
    SC_CLOSE
    /**
     0xF020
     */
    SC_MINIMIZE
    /**
     0xF030
     */
    SC_MAXIMIZE
    /**
     0xF120
     */
    SC_RESTORE
    /**
     
     */
    WM_COMMAND
    
    /**
     * Get all top-level windows on the screen.
     * 
     * @return A list with the top-level windows.
     */
    getAllWindows()
    /**
     * Get the text of a window (does work not only for titles).
     * 
     * @param win
     * The window handle.
     * @return The text of the window.
     */
    getWindowText(win)
    /**
     * Set the text of a window.
     * 
     * @param win
     * The window handle.
     * @param text
     * The text to set.
     * @return True, if the text is set.
     */
    setWindowText(win, text)
    /**
     * Get the classname of a window.
     * 
     * @param win
     * The window handle.
     * @return The classname of the window.
     */
    getWindowClassName(win)
    /**
     * Set the position of a window.
     * 
     * @param win
     * The window handle.
     * @param x
     * The x co-ordinate.
     * @param y
     * The y co-ordinate.
     */
    setWindowPosition(win, x, y)
    /**
     * Set the size of a window.
     * 
     * @param win
     * The window handle.
     * @param width
     * The width.
     * @param height
     * The height.
     */
    setWindowSize(win, width, height)
    /**
     * Find a window on the desktop indentified by its title.
     * 
     * @param name
     * The window title
     * @param regexp
     * True if the given title is a regular expression.
     * @return A handle for the window or null if not found.
     * @throws Exception
     */
    findWindow(name, regexp=False)
    /**
     * Wait for a window on the desktop identified by its title.
     * 
     * @param timeout
     * The maximum time to wait (in ms).
     * @param name
     * The window title
     * @param regexp
     * True if the given title is a regular expression.
     * @return A handle for the window or null if the timeout is exceeded.
     * @throws Exception
     */
    waitForWindow(timeout, name, regexp=False)
    /**
     * Find a dialog on the desktop with the given parent.
     * 
     * @param parent
     * The parent window.
     * @param titleRe
     * An optional regexp for the window title.
     * @return A handle for the dialog or null if the timeout is exceeded.
     * @throws Exception
     */
    findDialog(parent, titleRe=None)
    /**
     * Wait for a dialog on the desktop with the given parent.
     * 
     * @param timeout
     * The maximum time to wait (in ms).
     * 
     * @param parent
     * The parent window.
     * 
     * @param titleRe
     * An optional regexp for the window title.
     * 
     * @return A handle for the dialog or null if the timeout is exceeded.
     * @throws Exception
     */
    waitForDialog(timeout, parent, titleRe=None)
    /**
     * Find a child window of a given window, indentified by some text.
     * 
     * @param parent
     * A handle for the parent window.
     * @param name
     * The identifying text.
     * @param regexp
     * True if the given text is a regular expression.
     * @return A handle for the child window or null if not found.
     * @throws Exception
     */
    findChildWindow(parent, name, regexp=False)
    /**
     * Find child windows of a given window, identified by text and class name.
     * 
     * @param parent
     * A handle for the parent window.
     * @param name
     * The identifying text.
     * @param regexp
     * True if the given text is a regular expression.
     * @param clazz
     * The name of the child window's class.
     * @return A list of child window handles.
     */
    findChildWindows(parent, name=None, regexp=False, clazz=None)
    /**
     * Wait for a child window of a given window, indentified by some text.
     * 
     * @param timeout
     * The maximum time to wait (in ms).
     * @param parent
     * A handle for the parent window.
     * @param name
     * The identifying text.
     * @param regexp
     * True if the given text is a regular expression.
     * @return A handle for the child window or null if not found.
     * @throws Exception
     */
    waitForChildWindow(timeout, parent, name, regexp=False)
    /**
     * Find a child window of a given window, indentified by the window's class name
     * 
     * @param parent
     * A handle for the parent window.
     * @param classname
     * The identifying classname.
     * @param regexp
     * True if the given classname is a regular expression.
     * @return A handle for the child window or null if not found.
     * @throws Exception
     */
    findChildWindowByClassName(parent, classname, regexp=False)
    /** Synthesize a mouse event at the given coordinates. */
    mouse_event(flags, dx, dy, dwData=0)
    /**
     * Synthesize a key event.
     * 
     * @param code
     * The virtual key code.
     * @param flags
     * KEYEVENTF flags.
     */
    keybd_event(code, flags)
    /** Synthesize a mouse click at the given screen position. */
    doClickHard(x, y, right=False)
    /**
     * Simulate a mouse click on a window.
     * 
     * @param win
     * A handle for the window.
     * @param x
     * Target X coordinate.
     * @param y
     * Target Y coordinate.
     */
    doClick(win, x, y)
    /**
     * Close a window by sending it the WM_CLOSE message.
     * 
     * @param win
     * A handle for the window.
     */
    closeWindow(win, async=False)
    /**
     * Maximize a window.
     * 
     * @param win
     * A handle for the window.
     */
    maximizeWindow(win)
    /**
     * Minimize a window.
     * 
     * @param win
     * A handle for the window.
     */
    minimizeWindow(win)
    /**
     * Restore a window.
     * 
     * @param win
     * A handle for the window.
     */
    restoreWindow(win)
    /**
     * Puts a window to the foreground
     * 
     * @param win
     * A handle for the window.
     */
    setForeground(win)
    /**
     * Simulate a key press on a window.
     * 
     * @param win
     * A handle for the window.
     * @param keycode
     * The keycode for the key.
     */
    typeKey(win, keycode)
    /**
     * Sends appropriate key events to input text to the control currently in focus
     * 
     * @param textToInput the text to input
     * 
     * @since 5.1.1
     */
    sendText(textToInput)
}
