<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302D021500D600A3AA86328CC449E618768F4B68B0284FCC340214426645200BAD5FB50A5AAD130DFB3918FA37BEC3"
          version="6.0.3">
  <include>qfs.qft</include>
  <variable name="testDir">${qftest:suite.dir}</variable>
  <variable name="testFile">SampleTestDescription.xlsx</variable>
  <variable name="reportDir">${qftest:dir.user}</variable>
  <variable name="testSheet">Tests</variable>
  <variable name="resultSheet">Results</variable>
  <variable name="tests"/>
  <variable name="defaultState">FAILED</variable>
  <variable name="testCaseColumn">TestCase</variable>
  <variable name="shortDescColumn">Short Description</variable>
  <variable name="commentColumn">Comment</variable>
  <variable name="stepDescColumn">Step Description</variable>
  <variable name="expResultColumn">Expected Result</variable>
  <variable name="recResultColumn">Received Result</variable>
  <variable name="stateColumn">State</variable>
  <variable name="startFromRunner">0</variable>
  <variable name="testname">dummy</variable>
  <variable name="comment"/>
  <comment>This test-suite shows how QF-Test can be used to perform non-automatic tests as also described in the manual chapter 30.

Note: In Qf-Test Version 4.1 this suite has been updated to use xlsx files instead old style .xls files.


Global variables from test-suite:
=====================
testDir	The directory which contains the description Excel file.
testFile	The Excel file containing the test-cases and test-steps.
reportDir	The directory to store the result Excel file to.
testSheet	The name of the Excel spreadsheet to read the test-steps from.
resultSheet	The name of the Excel spreadsheet to store the results to.


@author QFS, mm</comment>
  <TestCase id="_35G" name="Read scenario and call test-cases">
    <comment>Test node for launching tests.
It has to be a Test node to raise no conflicts in reporting.

@noreport node</comment>
    <ProcedureCall id="_35T" local="true" procedure="qfs.utils.getDate"
                   retvarname="today">
      <variable name="format">yyyyMMdd</variable>
      <variable name="offset"/>
    </ProcedureCall>
    <SetGlobalStep id="_36F" local="true" varname="qftestConfigFolder">
      <default>${qftest:dir.user}</default>
    </SetGlobalStep>
    <ServerScriptStep id="_36D"
                      name="Check writing permission of result file">
      <code>from org.apache.poi.xssf.usermodel import XSSFWorkbook
from java.io import File, FileInputStream, FileOutputStream

#check whether file is writable
#Using Java methods the safest way is tring to open the file
#file.canWrite or other object could have troubles with ACL or shared network folders
def checkFileWriteable(originalFile, resultFile):
    fout = None
    retValue = True
    try:
        fis = FileInputStream(originalFile)
        fout = FileOutputStream(resultFile)
        workbook = XSSFWorkbook(fis)        
        workbook.write(fout)
    except:
        retValue = False
        
    if fout:
        fout.close()
    if fis:
        fis.close()

    return retValue

testDir = rc.lookup("testDir")
testFile = rc.lookup("testFile")
reportDir = rc.lookup("reportDir")

testFile = testDir + "/" + testFile
ff = File(testFile)
parentFile = ff.getParentFile()
testFileName = ff.getName()
cPath = parentFile.getCanonicalPath()  
    
resultFile = reportDir + "/" + testFileName[:-5] + "_result_$(today).xlsx"
resultFileObj = File(resultFile)

print "Check writing permissions of file:", resultFileObj
if checkFileWriteable(ff, resultFileObj):
    print "File is writable, continue."
else:
    errorMsg = "The file\n '" + resultFile + "'\n" + "or its folder ('" + reportDir + "') have no write permissions.\n\n" + \
    "You can change the output folder in the variable 'reportDir' of the Test-suite node.\n" + \
    "Please ensure, that the file can be written and re-start the test-suite!"
    print errorMsg
    rc.setLocal("errorMsg", errorMsg)
    rc.logError(errorMsg)</code>
      <comment>Check whether the folder for the result excel is writable.</comment>
    </ServerScriptStep>
    <IfSequence id="_36B" name="Run tests, if everything is fine"
                test="rc.lookup(&#34;default&#34;, &#34;errorMsg:XXX&#34;) == &#34;XXX&#34;">
      <ServerScriptStep id="_369" name="call new test-cases">
        <code>from org.apache.poi.xssf.usermodel import XSSFWorkbook
from org.apache.poi.ss.usermodel import Cell
from java.text import NumberFormat
from org.apache.poi.ss.util import CellReference
from org.apache.poi.hssf.usermodel import HSSFFont
from org.apache.poi.ss.util import CellRangeAddress
from java.io import File, FileInputStream, FileOutputStream
from de.qfs.apps.qftest import ManualStepDialog

global sheet
global resultSheet
global execInfo
global prevResult
global prevRecResult
global testcase
global rowCount
global windowTitle
global indexWindowtitle
global indexExpectedResult
global indexReceivedResult
global indexStatus
global indexStep
global indexTestCase
global indexComment
global currentTestIndex
global currentStepIndex
global prevWindowtitle
global prevComment
global oldResult
global oldRecResult
global getStringCellValue

def getStringCellValue(theCell):
    if not theCell:
        return None
    cellType = theCell.getCellType()
    cellValue = None
    if cellType == Cell.CELL_TYPE_NUMERIC:
        cellValue = str(theCell.getNumericCellValue())
        if cellValue:
            if str(cellValue).find(".") != -1:
                cellValue = str(cellValue)[:-2]
    elif cellType == Cell.CELL_TYPE_STRING:
        cellValue = theCell.getStringCellValue()
        
    if cellValue == None:
        cellValue = ""
        
    return cellValue
    
testDir = rc.lookup("testDir")
testFile = rc.lookup("testFile")
reportDir = rc.lookup("reportDir")

testFile = testDir + "/" + testFile
ff = File(testFile)
parentFile = ff.getParentFile()
testFileName = ff.getName()
    
resultFile = reportDir + "/" + testFileName[:-5] + "_result_$(today).xlsx"

print "Store results to: " + resultFile

fis = FileInputStream(testFile)
fout = FileOutputStream(resultFile)
workbook = XSSFWorkbook(fis)

indexOfTitleRow = 0
testSheetVar = rc.lookup("testSheet")
resultSheetVar = rc.lookup("resultSheet")
indexWindowtitle = -1
indexExpectedResult = -1
indexReceivedResult = -1
indexStatus = -1
indexStep = -1
indexTestCase = -1  
indexComment = -1    

sheet = workbook.getSheet(testSheetVar)
sheetIdx = workbook.getSheetIndex(sheet)
resultTemplateSheet = workbook.setSheetName(sheetIdx, resultSheetVar)

descriptionRow = sheet.getRow(indexOfTitleRow)            
rowCount = sheet.getLastRowNum() + 1

for i in range(descriptionRow.getLastCellNum()):
        cell = descriptionRow.getCell(i)
        colHeading = getStringCellValue(cell)
        
	if colHeading == rc.lookup("shortDescColumn"):
         indexWindowtitle = i
	elif colHeading == rc.lookup("expResultColumn"):
         indexExpectedResult = i
	elif colHeading == rc.lookup("recResultColumn"):
         indexReceivedResult = i
	elif colHeading == rc.lookup("stateColumn"):
         indexStatus = i
	elif colHeading == rc.lookup("stepDescColumn"):
         indexStep = i
	elif colHeading == rc.lookup("testCaseColumn"):
         indexTestCase = i
	elif colHeading == rc.lookup("commentColumn"):
         indexComment = i
	elif colHeading == rc.lookup("recResultColumn"):
         indexReceivedResult = i
	elif colHeading == rc.lookup("stateColumn"):
         indexStatus = i


windowTitle = ""
comment = ""
prevResult = ""
prevRecResult = ""
execInfo = ""
currentStepIndex = -1
prevWindowtitle = ""
prevComment = ""
usePrevTitle = 0
prevTestcase = -1
oldResult = ""
oldRecResult = ""
testcase = ""

#split tests area
tests = "$(tests)"
allTests = []

if tests != "":
	commaParts = tests.split(",")

	for cP in commaParts:   
	   if cP.find("-") != -1:
		parts = cP.split("-")
		for i in range(int(parts[0]), int(parts[1])+1):
		  allTests.append(str(i))
	   else:
		allTests.append(cP)

try:
  removeRows = []

  i = 1 #skip first row, because that's the description row
  
  while i &lt; rowCount:         
    if i &lt; 1:
        i = 1
            
    while i &lt;= currentStepIndex: #step was part of test
        i = i + 1
    
    if i == rowCount:   
        break
        
    if prevResult == ManualStepDialog.CANCELED:
        break

    noExec = 0

    if usePrevTitle == 1 and prevWindowtitle != "":
        testcase = prevTestcase
    else:   
        prevTestcase = testcase   
        thetestcase = getStringCellValue(sheet.getRow(i).getCell(indexTestCase))
        if thetestcase:
            testcase = thetestcase
    
    if allTests != None:
        if (len(allTests) &gt; 0) and (not testcase in allTests):
            noExec = 1

    if noExec != 1:          
        currentTestIndex = i    
        
        if usePrevTitle == 1 and prevWindowtitle != "":
            windowTitle = prevWindowtitle
            comment = prevComment
            usePrevTitle = 0
        else:
            prevWindowtitle = windowTitle
            precComment = comment
            windowTitle = getStringCellValue(sheet.getRow(currentTestIndex).getCell(indexWindowtitle))
            comment = getStringCellValue(sheet.getRow(currentTestIndex).getCell(indexComment))
            if not comment:
                comment = ""
        #print "call testcase: ", testcase 
        rc.callTest("singleTest", {"testname" : testcase + " " + windowTitle, "comment" : comment, "startFromRunner" : "1"})               
    else:
        removeRows.append(i)
                  
    if execInfo == ManualStepDialog.PREV:
        i = i - 1
        usePrevTitle = 1
    else:    
        i = i + 1
        execInfo = ""      

finally:
    try:
        workbook.write(fout)
    except:    
        cPath = rc.lookup("qftestConfigFolder")
        resultFile = cPath + "/" + testFileName[:-5] + "_result_$(today).xlsx"    
        print "Original Path can't be modified, store result to: " + resultFile
        fout = FileOutputStream(resultFile)
        workbook.write(fout)
        
    if fout:
        fout.close()
    if fis:
        fis.close()
</code>
        <comment>Read the Excel file and call the test-case "singleTest" for each test-case.</comment>
      </ServerScriptStep>
      <ElseSequence id="_36C" name="Result File not writable show error">
        <ProcedureCall id="_36A"
                       procedure="qfs.dialogs.showConfigurabableDialog">
          <variable name="title">Result file not writable</variable>
          <variable name="msg">${default:errorMsg:Result file not writable}</variable>
          <variable name="timeout">600000</variable>
          <variable name="alwaysOnTop">True</variable>
          <variable name="wraplength">160</variable>
          <variable name="messagetype">ERROR_MESSAGE</variable>
          <variable name="optiontype">DEFAULT_OPTION</variable>
        </ProcedureCall>
      </ElseSequence>
    </IfSequence>
  </TestCase>
  <TestCase condition="&#34;$(startFromRunner)&#34; == &#34;1&#34;" id="_35N"
            name="singleTest" reportname="$(testname)">
    <comment>$(comment)</comment>
    <ServerScriptStep id="_35p" name="call test steps">
      <code>from de.qfs.apps.qftest import ManualStepDialog

global prevResult
global prevRecResult
global execInfo
global currentTestIndex
global indexTestCase
global currentStepIndex
global prevWindowtitle
global resultSheet
global indexReceivedResult
global indexStatus
global prev
global oldResult
global oldRecResult

i = currentTestIndex

while i &lt; rowCount:
    if prevResult == ManualStepDialog.CANCELED:
        break   
        
    if currentTestIndex &lt;= currentStepIndex:
        testcase = getStringCellValue(sheet.getRow(i).getCell(indexTestCase))
        if testcase: #new test case, call new test
            break
        
    currentStepIndex = i     
    
    #in case of stepping back, show recent results     
    oldRecResult = getStringCellValue(sheet.getRow(i).getCell(indexReceivedResult))
    oldResult = getStringCellValue(sheet.getRow(i).getCell(indexStatus))
           
    rc.callProcedure("executeSingleStep")

    if execInfo == ManualStepDialog.PREV:
        i = i - 1
        currentStepIndex = i - 1
        if currentTestIndex &gt; currentStepIndex:
            currentTestIndex = currentTestIndex - 2
            oldtestcase = testcase
            testcase = getStringCellValue(sheet.getRow(i).getCell(indexTestCase))
            if testcase != oldtestcase: #former test case, call former test
                break
    else:     
        i = i + 1</code>
    </ServerScriptStep>
  </TestCase>
  <PackageRoot id="_2">
    <Procedure id="_35P" name="executeSingleStep">
      <comment>Open the ManualStepDialog asking for the test-result.


@author QFS, mm</comment>
      <ServerScriptStep id="_360" name="call test step">
        <code>from java.io import File
from de.qfs.apps.qftest import ManualStepDialog
from java.lang import String

def createCell(sheet, row, col, value):
    writeRow = sheet.getRow(row)
    writeCell = None
    if not writeRow:
        writeRow = sheet.createRow(row)
        writeCell = writeRow.createCell(col)
    else:
        writeCell = writeRow.getCell(col)
        if not writeCell:
            writeCell = writeRow.createCell(col)
                
    writeCell.setCellValue(value)
    
global sheet
global resultSheet
global execInfo
global prevResult
global prevRecResult
global testcase
global rowCount
global windowTitle
global indexWindowtitle
global indexExpectedResult
global indexReceivedResult
global indexStatus
global indexStep
global indexTestCase
global currentTestIndex
global currentStepIndex
global oldResult
global oldRecResult

information = ""
result = ""

try:
    step = getStringCellValue(sheet.getRow(currentStepIndex).getCell(indexStep))
    if not step:
        step = ""
    expectedResult = getStringCellValue(sheet.getRow(currentStepIndex).getCell(indexExpectedResult))
    if not expectedResult:
        expectedResult = ""

    if execInfo == ManualStepDialog.PREV:  
        setOldResult = oldResult
        if setOldResult == "PASSED":
            #workaround as in test environment the PASSED string was not recognized correctly
            setOldResult = "PASSED"
        md = ManualStepDialog(None, testcase + " " + windowTitle, step, expectedResult, setOldResult, oldRecResult, "")

        oldRecResult = ""
        oldResult = ""

        information = md.getReceivedResult()
        result = md.getResult()
        execInfo = md.getExecInfo()
        
        if execInfo == "":
            execInfo = ManualStepDialog.CANCELED
            result = ManualStepDialog.CANCELED
            
        prevResult = result
        prevRecResult = information

    elif execInfo != ManualStepDialog.SKIPTEST:        
        if oldRecResult == "" and oldResult == "": #this step is shown up the first time in this test-run
            if rc.lookup("defaultState") == "PASSED":
                md = ManualStepDialog(None, testcase + " " + windowTitle, step, expectedResult, "PASSED", oldRecResult, "")
            else:
                md = ManualStepDialog(None, testcase + " " + windowTitle, step, expectedResult)

        else: #this step has been executed at least once during this test-run
            setOldResult = oldResult
            if setOldResult == "PASSED":
                #workaround as in test environment the PASSED string was not recognized correctly
                setOldResult = "PASSED"
            md = ManualStepDialog(None, testcase + " " + windowTitle, step, expectedResult, setOldResult, oldRecResult, "")

        information = md.getReceivedResult()
        result = md.getResult()
        execInfo = md.getExecInfo()

        if execInfo == "":
            execInfo = ManualStepDialog.CANCELED
            result = ManualStepDialog.CANCELED
            
        if execInfo != ManualStepDialog.PREV:
            prevResult = result
            prevRecResult = information
    else:
        information = "Step has been skipped!"
        prevResult = ManualStepDialog.SKIPPED
        prevRecResult = ""
        result = ManualStepDialog.SKIPPED

    if execInfo != ManualStepDialog.PREV:
        rc.logMessage("Result of step " + step)
        rc.logMessage("Exepceted result: " + expectedResult)
        if information != None and information != "":
            rc.logMessage("Received result: " + information)
        if result == ManualStepDialog.FAILED:
            rc.logError("Step failed -&gt; + Expected Result: '" + expectedResult + "' received: '" + information + "'!")
        elif result == ManualStepDialog.PASSED:
            rc.logMessage("Step passed!")
        else:
            rc.logWarning("Step has been skipped or canceled!")
            
        #write resultstatus
        createCell(sheet, currentStepIndex, indexReceivedResult, information)
        createCell(sheet, currentStepIndex, indexStatus, result)               
finally:
    pass
</code>
      </ServerScriptStep>
    </Procedure>
  </PackageRoot>
  <ExtraSequence id="_3"/>
  <WindowList id="_4"/>
</RootStep>
