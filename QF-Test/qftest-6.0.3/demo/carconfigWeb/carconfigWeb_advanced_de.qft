<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302C0214791E4B8B63909CC749116ECF9C224504BDD87EBC02140D68CF19197E72F9E3A3BA77E962C582C4DA570F"
          version="6.0.3">
  <include>carconfigWeb_de.qft</include>
  <reference>qfs.qft</reference>
  <variable name="buggyMode">False</variable>
  <variable name="browsername"/>
  <variable name="browserdir"/>
  <comment>Diese Suite enthält einige Beispielszenarien, die die Erweiterungsmöglichkeiten von QF-Test mit Hilfe von Skripting zeigen.

Der Testfall "Integration von Selenium Tests" zeigt wie Selenium Tests und QF-Test Testfälle miteinander integriert werden können. Bitte beachten Sie, dass dieser Testfall ggf. versuchen wird den Browser neu zu starten, da diese Tests eine Verbindung per WebDriver Modus benötigen.

@param	buggyMode    Wenn diese Variable auf True gesetzt wird, dann werden einige Testfälle Fehler beinhalten. Hiermit können Sie die Reporting von Fehlern innerhalb von QF-Test testen.

@author QFS
@since 4.2</comment>
  <TestCase id="_1p6L" name="Integration von Selenium Tests">
    <comment>Dieser Testfall zeigt Beispiele zur Integration von Selenium Tests.

Bitte beachten Sie, dass dieser Testfall ggf. versuchen wird den Browser neu zu starten, da diese Tests eine Verbindung per WebDriver Modus benötigen. Hierfür werden die globalen "*_WebDriver" Variablen verwendet.

@author	QFS</comment>
    <DependencyReference id="_1p6t"
                         reference="dependencies.SUT_Gestartet_Zurückgesetzt">
      <variable name="connectionMode">WebDriver only</variable>
      <variable name="useConnectorLoader">True</variable>
    </DependencyReference>
    <TestStep id="_1p8I"
              name="WebDriver direkt in QF-Test Skripten verwenden">
      <ProcedureCall id="_1pFj" procedure="hauptfenster.menü.zurücksetzen"/>
      <ComponentWaiter client="$(client)" component="VehicleTable" id="_1pFi"
                       timeout="30000"/>
      <ClientScriptStep client="$(client)" engine="web" id="_1p8G"
                        interpreter="groovy"
                        name="Komponente per WebDriver identifizieren">
        <code>import org.openqa.selenium.By
import de.qfs.WebDriverConnection

def wd = new WebDriverConnection(rc)
def driver = wd.getDriver()

def element = driver.findElement(By.className("button"))
//print element

//Komponente nun auf QF-Test Komponente zuweisen und mit QF-Test Knoten weiterarbeiten
rc.overrideElement("PriorityWebComponent", wd.getComponent(element))</code>
      </ClientScriptStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="PriorityWebComponent" event="MOUSE_MPRC"
                      hardevent="true" id="_1p8F" modifiers="16"/>
      <CheckStringStep client="$(client)" component="DiscountValue"
                       id="_1pFo">
        <text>5</text>
      </CheckStringStep>
    </TestStep>
    <TestStep id="_1p6-" name="Kombinieren von Selenium Tests mit QF-Test">
      <ProcedureCall id="_1pFk" procedure="hauptfenster.menü.zurücksetzen"/>
      <MouseEventStep clicks="1" client="$(client)"
                      component="VehicleTable@Modell@I5" event="MOUSE_MPRC"
                      id="_1p76" modifiers="16"/>
      <UnitStep client="$(client)" engine="web" id="_1p6s"
                interpreter="groovy" runInExecutionEnvironment="false">
        <injections target="driver" type="3"/>
        <injections target="expectedPrice" type="2">26.100,00 &#8364;</injections>
        <classes>de.qfs.apps.qftest.demo.fx.carconfig.structures.UtilityTests</classes>
        <code>import static org.junit.Assert.*;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.By;

@Test
public void checkCalculatedPrice()
{
    def discountBtn = driver.findElement(By.className("button"))
    discountBtn.click()
    def discountTxtField = driver.findElement(By.id("DiscountValue_input"))
    assertEquals("5", discountTxtField.getAttribute("value"))
    discountBtn.click()
    assertEquals("10", discountTxtField.getAttribute("value"))
    def priceField = driver.findElement(By.id("CalculatedPrice_input"))
    assertEquals(expectedPrice, priceField.getText())
}</code>
      </UnitStep>
    </TestStep>
    <TestStep id="_1p70"
              name="Für das Einbinden von vorgefertigten Selenium Tests in QF-Test, schauen Sie bitte ins Handbuch ins Kapitel &#34;Unit Tests - WebDriver injections&#34;"/>
  </TestCase>
  <TestSet id="_1pFp" name="Emulation von mobilen Geräten">
    <TestCase id="_1pHC" name="CarConfig Demo">
      <Dependency id="_1pHF" name="CarConfig in Emulation gestartet">
        <SetupSequence id="_1pFq" name="CarConfig in Emulation starten">
          <SetGlobalStep id="_1pFt" varname="client">
            <default>carconfigWeb</default>
          </SetGlobalStep>
          <ProcedureCall id="_1pFr"
                         procedure="qfs.web.browser.general.openMobileEmulation">
            <variable name="client">$(client)</variable>
            <variable name="url">file://${qftest:dir.version}/demo/carconfigWeb/html/CarConfig.htm?lang=de</variable>
            <variable name="deviceName">iPhone 6/7/8</variable>
            <variable name="orientation">horizontal</variable>
          </ProcedureCall>
          <BasicSequence id="_1pHA" name="CustomWebResolver installieren">
            <ProcedureCall id="_1pHB"
                           procedure="qfs.qft#qfs.web.ajax.installCustomWebResolver">
              <variable name="client">$(client)</variable>
              <variable name="resolver">custom</variable>
              <variable name="version"/>
              <variable name="genericClasses">button=Button,
textfield=TextField,
editable=TextField,
label=Label,
menusubitem=MenuItem,
menuitem=MenuItem,
Menubar-Widget=MenuBar,
ui-dialog-title=Label:WindowTitle,
ui-dialog-titlebar-close=Closer:WindowCloser,
tree=Tree,
treenode=TreeNode,
treetoggler=Expander:TreeNodeExpander,
treenodespacer=Spacer:TreeNodeSpacer,
dataTable=Table,
dataRow=TableRow,
dataCell=TableCell,
headerRow=TableHeader,
headerCell=TableHeaderCell,
ui-tabs=TabPanel,
TabItem=Item:TabPanelItem,
ui-tabs-panel=Panel:TabPanelContent,
ui-accordion=Accordion,
ui-accordion-header=Item:AccordionItem,
ui-accordion-content=Panel:AccordionContent,
ui-dialog-buttonpane=Panel,
ui-dialog-content=Panel,
panel=Panel,</variable>
              <variable name="attributesToGenericClasses">role=dialog=Window:Dialog,</variable>
              <variable name="tagsToGenericClasses"/>
              <variable name="ignoreTags">DIV,SPAN,CENTER,NOSCRIPT,FORM,UL,TR,TD,TABLE,HR,</variable>
              <variable name="ignoreByAttributes"/>
              <variable name="autoIdPatterns"/>
              <variable name="customIdAttributes"/>
              <variable name="interestingByAttributes"/>
              <variable name="attributesToQftFeature"/>
              <variable name="documentJS"/>
              <comment>Dieser Aufruf installiert einen CustomWebResolver für AJAX Toolkits.
Ein CustomWebResolver erlaubt es Ihnen die Spezifika Ihrer Webanwendung nach generischen Klassen von QF-Test zu übersetzen. Dieser Ansatz verbessert die Komponentenerkennung und erweitert die angebotenen Checkvarianten. Ihre Testfälle werden dadurch stabiler, robuster und lesbarer.
Der wichtigste Parameter ist 'genericClasses'. Damit können Sie Werte des 'class' Attributes einer Komponente, z.B. 'btn', in einen QF-Test Button übersetzen. Dies geschieht mittels Angabe von btn=Button. Weitere Übersetzungen können sie kommasepariert angeben.
Sie finden weitere Informationen im Kommentar der Prozedur selbst, hierfür einfach doppelt auf den Prozeduraufruf klicken.
Im Handbuch finden Sie ein vollständiges Beispiel.</comment>
            </ProcedureCall>
          </BasicSequence>
          <ComponentWaiter client="$(client)" component="mFile" id="_3iK"/>
        </SetupSequence>
        <CleanupSequence id="_1pHI"
                         name="Die Aufräumsequenz muss leer sein, damit durch die Abhängigkeit des gerufenen Testfalls der Emulator nicht geschlossen wird"/>
      </Dependency>
      <TestCall actasproccall="true"
                calledtest="CarConfiguratorWeb Demo.Modellpreise" id="_1pFs"/>
    </TestCase>
  </TestSet>
  <PackageRoot id="_3"/>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
