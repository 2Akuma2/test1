<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302D021458EEA326249354FD0F12EC7666850030CB1BA72E0215008484BA86F518D778B6933E2BBDDC64138FD71735"
          version="6.0.3">
  <include>qfs.qft</include>
  <comment>A TestRunListener as described in chapter 50.7 in the technical reference part of the manual can be used to hook into the test-run in order to monitor certain events or create an own run-log. This suite provides a demo implementation of a TestRunListerner in combination with different test scenarios.</comment>
  <TestCase id="_Y" name="Register TestRunListener">
    <comment>@noreport</comment>
    <ServerScriptStep id="_Z"
                      name="Implement and register a simple TestRunListener">
      <code>from de.qfs.apps.qftest.extensions.qftest import TestRunListener

class Tracer(TestRunListener):
    def __init__(self):
        self.tests = 0
        self.good = 0
        self.notimpl = 0
        self.skipped = 0
        self.bad = 0

    def runStarted(self, event):
        print "Test-run started"
        self.tests = 0
        self.good = 0
        self.notimpl = 0
        self.skipped = 0
        self.bad = 0

    def runStopped(self, event):
        print "Test-run stopped"
        print "Tests executed: %d" % self.tests
        print "Successful tests: %d" % self.good
        print "Failed tests: %d" % self.bad
        print "Skipped tests: %d" % self.skipped
        print "Not implemented tests: %d" % self.notimpl
        
    def nodeEntered(self, event):
        print "Node entered: %s" % event.getNode()
        print "Report name: %s" % event.getNode().getReportName()
        print "Comment: %s" % event.getNode().getComment()

    def nodeExited(self, event):
        print "Node exited: %s" % event.getNode()
        print "State: %d, local state: %d" % (event.getState(), event.getLocalState())
        if event.getNode().getType() == "TestCase":
            self.tests = self.tests + 1
            state = event.getState()
            lstate = event.getLocalState()
            if lstate == event.STATE_SKIPPED:
                self.skipped = self.skipped + 1
            elif lstate == event.STATE_NOT_IMPLEMENTED:
                self.notimpl = self.notimpl + 1
            elif state == event.STATE_OK or state == event.STATE_WARNING:
                self.good = self.good + 1
            elif state == event.STATE_ERROR or state == event.STATE_EXCEPTION:
                self.bad = self.bad + 1               
                
    def problemOccurred(self, event):
        print "Problem occured for node: %s" % event.getNode()
        print "State: %d, local state: %d" % (event.getState(), event.getLocalState())
        print "Message: %s" % event.getMessage()

global tracer
try:
    rc.removeTestRunListener(tracer)
except:
    pass

tracer = Tracer()
rc.addTestRunListener(tracer)        </code>
    </ServerScriptStep>
    <ServerScriptStep disabled="true" id="_c" interpreter="javascript"
                      name="Alternative: Listen to test run notifications">
      <code>import {TestRunEvent} from 'de.qfs.apps.qftest.extensions.qftest'
    
testRunData = {
    tests: 0,
    good: 0,
    notimpl: 0,
    skipped: 0,
    bad: 0
}

notifications.addObserver("runStarted", function (notificationName, {event}) {
    print("Test-run started")
    testRunData.tests = 0
    testRunData.good = 0
    testRunData.notimpl = 0
    testRunData.skipped = 0
    testRunData.bad = 0
}, notifications.RUN_STARTED)

notifications.addObserver("runStopped", function (notificationName, {event}) {
    print("Test-run stopped")
    printf("Tests executed: %d", testRunData.tests)
    printf("Successful tests: %d", testRunData.good)
    printf("Failed tests: %d", testRunData.bad)
    printf("Skipped tests: %d", testRunData.skipped)
    printf("Not implemented tests: %d", testRunData.notimpl)
}, notifications.RUN_STOPPED)
    
notifications.addObserver("nodeEntered", function (notificationName, {event}) {
    printf("Node entered: %s", event.getNode())
    printf("Report name: %s", event.getNode().getReportName())
    printf("Comment: %s", event.getNode().getComment())
}, notifications.NODE_ENTERED)

notifications.addObserver("nodeExited", function (notificationName, {event}) {
    printf("Node exited: %s", event.getNode())
    printf("State: %d, local state: %d", event.getState(), event.getLocalState())
    if (event.getNode().getType() == "TestCase") {
        testRunData.tests++
        const state = event.getState()
        const lstate = event.getLocalState()
        if (lstate == TestRunEvent.STATE_SKIPPED)
            testRunData.skipped++
        else if (lstate == TestRunEvent.STATE_NOT_IMPLEMENTED)
            testRunData.notimpl++
        else if (state == TestRunEvent.STATE_OK || state == TestRunEvent.STATE_WARNING)
            testRunData.good++
        else if (state == TestRunEvent.STATE_ERROR || state == TestRunEvent.STATE_EXCEPTION)
            testRunData.bad++
    }
}, notifications.NODE_EXITED)           
            
notifications.addObserver("problemOccurred", function (notificationName, {event}) {
    printf("Problem occured for node: %s", event.getNode())
    printf("State: %d, local state: %d", event.getState(), event.getLocalState())
    printf("Message: %s", event.getMessage())
}, notifications.RUN_ERROR_OCCURED)</code>
      <comment>As an alternative to implementing the TestRunListener interface, test run notifications can be observed</comment>
    </ServerScriptStep>
  </TestCase>
  <TestSet id="_1" name="Miscellaneous">
    <TestCase id="_2" name="Plain">
      <BasicSequence id="_C" name="Empty sequence"/>
    </TestCase>
    <TestCase id="_A" name="With report name"
              reportname="User is ${system:user.name}">
      <BasicSequence id="_E" name="Empty sequence"/>
    </TestCase>
    <TestCase id="_B" name="With comment">
      <comment>Running on ${system:os.name}</comment>
      <BasicSequence id="_F" name="Empty sequence"/>
    </TestCase>
    <TestCase id="_D" name="Empty"/>
    <TestCase condition="false" id="_G" name="With condition">
      <BasicSequence id="_H" name="Empty sequence"/>
    </TestCase>
  </TestSet>
  <TestSet id="_8" name="Empty"/>
  <TestSet condition="false" id="_I" name="With condition">
    <TestCase id="_K" name="Plain">
      <BasicSequence id="_L" name="Empty sequence"/>
    </TestCase>
  </TestSet>
  <TestSet id="_M" name="Errors">
    <TestCase id="_N" name="Plain error">
      <ServerScriptStep id="_O">
        <code>rc.logError("Dummy error")</code>
      </ServerScriptStep>
    </TestCase>
    <TestCase id="_P" maxerror="0" name="Suppressed plain error">
      <ServerScriptStep id="_Q">
        <code>rc.logError("Dummy error")</code>
      </ServerScriptStep>
    </TestCase>
    <TestCase id="_R" name="Uncaught exception">
      <ThrowStep id="_T" throwmessage="Dummy exception"/>
    </TestCase>
    <TestCase id="_U" name="Caught exception">
      <TryStep id="_W">
        <ThrowStep id="_V" throwmessage="Dummy exception"/>
        <CatchSequence exception="TestException" id="_X" maxerror="0"/>
      </TryStep>
    </TestCase>
  </TestSet>
  <TestCase id="_a" name="Deregister TestRunListener">
    <comment>@noreport</comment>
    <ServerScriptStep id="_b" name="Remove simple TestRunListener">
      <code>from de.qfs.apps.qftest.extensions.qftest import TestRunListener

global tracer
try:
    rc.removeTestRunListener(tracer)
except:
    pass  </code>
    </ServerScriptStep>
    <ServerScriptStep disabled="true" id="_d" interpreter="javascript"
                      name="Alternative: Remove all observers">
      <code>notifications.removeAllObserver()</code>
    </ServerScriptStep>
  </TestCase>
  <PackageRoot id="_3"/>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
