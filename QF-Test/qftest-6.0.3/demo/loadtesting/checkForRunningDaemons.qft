<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302C02141DE533AC7B98EB5685E81B3C3E85C853A622AFE1021417228396305698EAB17E6ED6CF4D8E6B6665AC16"
          version="6.0.3">
  <include>qfs.qft</include>
  <include>daemonController_twoPhases.qft</include>
  <variable name="logDirectory">${qftest:dir.user}/logs/checkrunningdaemons/</variable>
  <variable name="systemExcelFile">${qftest:suite.dir}/Systems.xlsx</variable>
  <comment>This test-suite contains test-cases to check whether all daemons are up and running.
You should run that test-suite in order to check whether your environment  is ready for triggering the load test-scenario,

The test-systems that should be used for test execution can be configured in an Excel file. The path to that Excel file is specified as suite variable (systemExcelFile). As default it points to the example excel file Systems.xlsx located in the same directory.

As the connection to those systems is established via the Daemon mode of QF-Test, this script tries to contact those daemons.
If the daemons are up and running everything is fine, otherwise the script will log an error message.

The QF-Test daemon requires the target test-suites (containing the actual tests to run) to be accessible on the local system.
You therefore either need to deploy the test-suites to all systems or use a shared network drive for that purpose.

Global variables from test-suite:
=====================
logDirectory		The log entries from the controller scripts will be stored in a log file in that folder.
systemExcelFile	The excel file containing the test-systems.

Details and an explanation of the test-suites can be found in the manual chapter "Loadtesting".

@author QFS, mm
@since 4.1</comment>
  <TestCase id="_Y" name="Initialization">
    <comment>Initialization phase.

.) Setup global contexts dictionary in Jython
.) Create log folders for daemon log and run-logs
.) Initialize counter variables
.) Clean all daemons on involved test-systems - stop test-runs, delete variables, release their license

@author QFS,mm
@since 4.1</comment>
    <ProcedureCall id="_3Y" procedure="qfs.shellutils.mkdir">
      <variable name="directory">$(logDirectory)</variable>
    </ProcedureCall>
    <ProcedureCall id="_3i" local="true" procedure="qfs.shellutils.exists"
                   retvarname="logDirectoryExists">
      <variable name="file">$(logDirectory)</variable>
    </ProcedureCall>
    <IfSequence id="_3m" test="not $(logDirectoryExists)">
      <SetGlobalStep id="_3t" local="true" varname="message">
        <default>Directory '$(logDirectory)' couldn't be created! 
Perhaps you have no permissions to create that folder. 
You can change this to another location via modifying the global variable 'logDirectory' at Test-suite node.</default>
      </SetGlobalStep>
      <ProcedureCall id="_3n" procedure="qfs.run-log.logError">
        <variable name="message">$(message)</variable>
        <variable name="withScreenshots">false</variable>
      </ProcedureCall>
      <ProcedureCall id="_3q" procedure="qfs.utils.printMessage">
        <variable name="message">$(message)</variable>
      </ProcedureCall>
      <ElseSequence id="_3r">
        <ProcedureCall id="_3s" procedure="qfs.utils.printMessage">
          <variable name="message">Directory '$(logDirectory)' exists!</variable>
        </ProcedureCall>
        <ServerScriptStep id="_3-"
                          name="Ensure to add / at the end of logDirectory">
          <code>rd = rc.lookup("runlogDirectory")

if not rd.endswith("/") and not rd.endswith("\\\\"):
    rd = rd + "/"
    
rc.setGlobal("runlogDirectory", rd)</code>
        </ServerScriptStep>
      </ElseSequence>
    </IfSequence>
    <ProcedureCall id="_1w" procedure="logging.registerScriptLogging"/>
    <ServerScriptStep id="_1D" name="Initalize Logfile and context array">
      <code>global contexts
    
contexts = {}
</code>
    </ServerScriptStep>
  </TestCase>
  <TestSet id="_3X" name="Ping all Daemons">
    <comment>Trigger the launch phase.
Get the test-systems from Excel and trigger the execution of the launch test-case.
It just triggers the execution. It doesn't wait till the execution is over, that's done by the following test-case.

@author QFS,mm
@since 4.1</comment>
    <DataDriver id="_3G" name="Environment data">
      <ExcelDataBinder excelfile="$(systemExcelFile)" id="_3H" name="data"/>
    </DataDriver>
    <TestCase condition="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;"
              id="_3I" name="Ping daemon"
              reportname="Ping daemon of $(system) with $(port)">
      <ServerScriptStep id="_3U" name="Check Daemon">
        <code>from de.qfs.apps.qftest.daemon import DaemonRunContext, DaemonLocator

system = rc.lookup("system")
port = rc.getInt("port")

systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey)
#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon != None:
    msg = "Daemon running on " + systemKey
    logger.log(msg)               
else:
    msg = "ERROR: No daemon for " + systemKey
    logger.log(msg)               
    rc.logError(msg)    
</code>
      </ServerScriptStep>
    </TestCase>
  </TestSet>
  <PackageRoot id="_3"/>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
