<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302D021437A0481520DB4D31E86E71A51CC39ABE5DFD6267021500D86BCE0A488B7EF2E18619B116B1CF8E4A0218FB"
          version="6.0.3">
  <include>qfs.qft</include>
  <variable name="logDirectory">${qftest:dir.log}/loadtest-logs/daemoncontroller</variable>
  <variable name="runlogDirectory">${qftest:dir.log}/loadtest-logs/runlogs</variable>
  <variable name="systemExcelFile">${qftest:suite.dir}/Systems.xlsx</variable>
  <variable name="launcherTimeout">60</variable>
  <variable name="launcherCheckDelay">3</variable>
  <variable name="testphaseTimeout">120</variable>
  <variable name="testphaseCheckDelay">5</variable>
  <variable name="customVarsFromExcel">name,price,role</variable>
  <comment>This test-suite (controller suite)  shows how to start and coordinate a load-test on multiple systems.

The test-systems that should be used for test execution can be configured in an Excel file. The path to that Excel file is specified as suite variable (systemExcelFile). As default it points to the example excel file Systems.xlsx located in the same directory.

The connection to those systems is established via the Daemon mode of QF-Test, so it's 
required to launch the QF-Test daemon on any system before running the controller suite.
Please see the respective section in the manual chapter "Test execution".

The QF-Test daemon requires the target test-suites (containing the actual tests to run) to be accessible on the local system.
You therefore either need to deploy the test-suites to all systems or use a shared network drive for that purpose.

The concept for load testing allows the following:
================================
In the Excel file you configure all involved systems by use of host names or IP-addresses. 

In addition it is possible to split your systems into clusters of different roles, e.g. 'StandardUser' and 'Admin' roles
by use of a respective optional variable in the Excel file. 
The test-suites for the different roles can be configured in the test-cases "Run Launch Phase Tests" and "Run Test Phase Tests" test-cases.

The controller suite is able to count the number of involved systems taking part in the load test-run. 

Global variables from test-suite:
=====================
logDirectory		The log entries from the controller scripts will be stored in a log file in that folder.
runlogDirectory	The run-logs of all test-runs will be stored in that folder.
systemExcelFile	The excel file containing the test-systems.
launcherTimeout	Specifies how long the launcher test-cases are allowed to run in minutes.
launcherCheckDelay	Specifies how long QF-Test should wait before checking for living systems after
		running the launching phase in minutes.
testphaseTimeout	Specifies how long the test-phase test-cases are allowed to run in minutes.
testphaseCheckDelay	Specifies how long QF-Test should wait before checking for living systems after
		running the test phase in minutes.
customVarsFromExcel	A comma separated list of column names, which define variable values in Excel.

Global variables created during test-run:
===========================
totalStarted		The number of test-systems which have started test-cases.
counterRole1, counterRole2	The specific counter how many test-systems are involved with that specific role.

Global Jython variable:
================
contexts 		Holds all created RunContext objects of the test-system's daemons. This array is
 		used to check whether test-systems are up and running.


Structure of controller suite:
==================
Test-case "Initialization"
The first step is to initialize the logger and global variables for that run.
It also creates the necessary log folders, if required.

Test-set "Launch Phase:
This test-set contains all necessary steps for the "Launch test phase".

	Test-set "Run Launch Phase":
	That test-set triggers the startup of the SUT on any involved test-systems before the actual tests take place.
	You need to specify the test-suite and the launcher test-case in the test-case "Run Launch Test".

	Test-case "Wait For Launch Phase":
	This test-case waits till the SUT launcher test-case on all test-systems has been terminated.
	The run-logs will be stored in the runlogDirectory.

Test-set "Test Phase:
This test-set contains all necessary steps for the "Test test phase".

	Test-set "Run Test Phase":
	This test-set triggers the execution of the role-specific test-case on all involved test-systems.
	You need to specify the role-specific test-suite and test-case in the test-case "Run Tests".
	
	Test-case "Wait for Test Phase":
	This test-case waits till the Test-Phase has been terminated.
	The run-logs will be stored in the runlogDirectory.
	If the test-run is over, no re-start will take place.

Test-Case "Cleanup":
This test-case stops any running test on all invloved test-systems and takes care that the daemons release their license again.

Details and an explanation of the test-suites can be found in the manual chapter "Loadtesting".

@author QFS, mm
@since 4.1
</comment>
  <TestCase id="_Y" name="Initialization">
    <comment>Initialization phase.

.) Setup global contexts dictionary in Jython
.) Create log folders for daemon log and run-logs
.) Initialize counter variables
.) Clean all daemons on involved test-systems - stop test-runs, delete variables, release their license

@author QFS,mm
@since 4.1</comment>
    <ServerScriptStep id="_42"
                      name="Delete all global variables from previous run">
      <code>rc.clearGlobals()</code>
    </ServerScriptStep>
    <ProcedureCall id="_3z" procedure="qfs.utils.getTime"
                   retvarname="testStartTime">
      <variable name="format">yyyyMMdd_HHmmss</variable>
      <variable name="offset"/>
      <variable name="timezone"/>
      <variable name="locale"/>
    </ProcedureCall>
    <BasicSequence id="_3o" name="Create log directories">
      <ProcedureCall id="_1lDU" procedure="logging.checkAndCreateDirectory">
        <variable name="directory">$(runlogDirectory)</variable>
        <variable name="testStartTime">$(testStartTime)</variable>
        <variable name="directoryName">Directory for QF-Test Run-logs</variable>
        <variable name="varName">runlogDirectory</variable>
      </ProcedureCall>
      <ProcedureCall id="_1lDV" procedure="logging.checkAndCreateDirectory">
        <variable name="directory">$(logDirectory)</variable>
        <variable name="testStartTime">$(testStartTime)</variable>
        <variable name="directoryName">Directory for Controller Logs</variable>
        <variable name="varName">logDirectory</variable>
      </ProcedureCall>
    </BasicSequence>
    <ProcedureCall id="_1w" procedure="logging.registerScriptLogging"/>
    <ProcedureCall id="_1lDR"
                   procedure="initialization.initializeGlobalJythonMethods"/>
    <ProcedureCall id="_3Y" procedure="deleteGlobalContextsArray"/>
    <ServerScriptStep id="_1D" name="Initalize Logfile and context array">
      <code>global contexts
    
contexts = {}
</code>
    </ServerScriptStep>
    <SetGlobalStep id="_1l" varname="counterRole2">
      <default>0</default>
    </SetGlobalStep>
    <SetGlobalStep id="_1m" varname="counterRole1">
      <default>0</default>
    </SetGlobalStep>
    <SetGlobalStep id="_1n" varname="totalStarted">
      <default>0</default>
    </SetGlobalStep>
    <ProcedureCall id="_2-" procedure="cleanDaemons"/>
  </TestCase>
  <TestSet id="_3G" name="Launch Phase">
    <TestSet id="_H" name="Run Launch Phase">
      <comment>Trigger the launch phase.
Get the test-systems from Excel and trigger the execution of the launch test-case.
It just triggers the execution. It doesn't wait till the execution is over, that's done by the following test-case.

@author QFS,mm
@since 4.1</comment>
      <DataDriver id="_I" name="Environment data">
        <ExcelDataBinder excelfile="$(systemExcelFile)" id="_J" name="data"/>
      </DataDriver>
      <TestCase condition="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;"
                id="_K" name="Run Launch Phase Test">
        <comment>Contact a test-system and trigger the execution of the launch test-case.

@author QFS,mm
@since 4.1</comment>
        <SetGlobalStep id="_1b" varname="totalStarted">
          <default>$[${default:totalStarted:0} + 1]</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1F" local="true" varname="suiteFolder">
          <default>${qftest:suite.dir}</default>
        </SetGlobalStep>
        <SetGlobalStep id="_29" local="true" varname="myRoleCounter">
          <default>0</default>
        </SetGlobalStep>
        <SetGlobalStep id="_44" varname="phaseName">
          <default>LauncherPhase</default>
        </SetGlobalStep>
        <IfSequence id="_N" test="&#34;$(role)&#34; == &#34;role1&#34;">
          <SetGlobalStep id="_O" local="true" varname="testsuite">
            <default>carconfig_Loadtesting.qft#CarConfigurator Loadtesting.Launcher test-case</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1j" varname="counterRole1">
            <default>$[${default:counterRole1:0} + 1]</default>
          </SetGlobalStep>
          <SetGlobalStep id="_2A" local="true" varname="myRoleCounter">
            <default>$(counterRole1)</default>
          </SetGlobalStep>
          <ElseifSequence id="_P" test="&#34;$(role)&#34; == &#34;role2&#34;">
            <SetGlobalStep id="_Q" local="true" varname="testsuite">
              <default>carconfig_Loadtesting.qft#CarConfigurator Loadtesting.Launcher test-case</default>
            </SetGlobalStep>
            <SetGlobalStep id="_1k" varname="counterRole2">
              <default>$[${default:counterRole2:0} + 1]</default>
            </SetGlobalStep>
            <SetGlobalStep id="_2B" local="true" varname="myRoleCounter">
              <default>$(counterRole2)</default>
            </SetGlobalStep>
          </ElseifSequence>
        </IfSequence>
        <ServerScriptStep id="_1E" name="Trigger test execution">
          <code>from de.qfs.apps.qftest.daemon import DaemonLocator

system = rc.lookup("system")
port = rc.getInt("port")
suiteFolder = rc.lookup("suiteFolder")
testsuite = rc.lookup("testsuite")
testcase = rc.lookup("qftest", "testcase.name")
phaseName = rc.lookup("phaseName")
testStartTime = rc.lookup("testStartTime")

global contexts
global sizeOfContexts
try:
    del sizeOfContexts
except:
    pass
    
systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey, testcase)
#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon != None:
    testRunDaemons = daemon.getTestRunDaemons()
    testRunDaemon = None
    if testRunDaemons and len(testRunDaemons) &gt; 0:
        testRunDaemon = testRunDaemons[0]
    else:
        testRunDaemon = daemon.createTestRunDaemon()
                    
    if testRunDaemon != None:
        testRunDaemon.setGlobal("myRoleCounter", rc.getStr("myRoleCounter"))
        testRunDaemon.setGlobal("totalStarted", rc.getStr("totalStarted"))  
        testRunDaemon.setGlobal("phaseName", phaseName)
        testRunDaemon.setGlobal("testStartTime", testStartTime)
        
        addCustomVarsFromExcel(logger, testRunDaemon, testcase)
                     
        runContexts = testRunDaemon.createContexts(1)
        if runContexts != None:
            for runContext in runContexts:
                if runContext != None:
                    runContext.setIdentifier(rc.lookup("phaseName") + "_" + systemKey)
                    myTestsuite = suiteFolder + "/" + testsuite
                    logger.log("Run test-case: " + myTestsuite, testcase)
                    runContext.runTest(myTestsuite)
                    logger.log("Runcontext created successfully", testcase)                    
                    contexts[systemKey] = runContext
                else:
                    logger.log("no context", testcase)                                               
        else:
            logger.log("ERROR: Couldn't create context for " + systemKey, testcase)           
    else:
        logger.log("ERROR: No licence for daemon for " + systemKey, testcase)               
else:
    logger.log("ERROR: No daemon for " + systemKey, testcase)    

logger.log("New size of contexts: " + str(len(contexts)), testcase)</code>
        </ServerScriptStep>
      </TestCase>
    </TestSet>
    <TestCase id="_U" name="Wait For Launch Phase">
      <comment>Iterate over all contexts, stored in the global context Jython dictionary and wait till the execution is over on all of those test-systems.
The run-logs will be stored to the runlogDirectory folder.

@author QFS,mm
@since 4.1</comment>
      <SetGlobalStep id="_31" local="true" varname="totalTimeout">
        <default>$[1000 * 60 * $(launcherTimeout)]</default>
      </SetGlobalStep>
      <ServerScriptStep id="_1lDL" name="initialize alreadyStoppedSystems">
        <code>global alreadyStoppedSystems

alreadyStoppedSystems = []</code>
      </ServerScriptStep>
      <RepeatSequence count="$[$(launcherTimeout) / $(testphaseCheckDelay) + 1]"
                      id="_32">
        <BasicSequence id="_33"
                       name="wait launcherCheckDelay before checking for running systems"
                       postdelay="$[1000 * 60 * $(launcherCheckDelay)]"/>
        <TestStep id="_34" name="Go through test-systems">
          <DataDriver id="_35" name="Environment data">
            <ExcelDataBinder excelfile="$(systemExcelFile)" id="_36"
                             name="data"/>
          </DataDriver>
          <IfSequence id="_37"
                      test="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;">
            <ServerScriptStep id="_38"
                              name="Wait for tests and store runlogs when over">
              <code>from de.qfs.apps.qftest.daemon import DaemonLocator, DaemonRunContext

system = rc.lookup("system")
port = rc.getInt("port")
timeout = 10000 * 1000
logpath = rc.lookup("runlogDirectory")
testcase = rc.lookup("qftest", "testcase.name")

global contexts
global sizeOfContexts
try:
    a = sizeOfContexts
except:
    sizeOfContexts = len(contexts)

systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey, testcase)

#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon != None and (systemKey not in alreadyStoppedSystems):
    testRunDaemons = daemon.getTestRunDaemons()
    if len(testRunDaemons) &gt; 0:
        testRunDaemon = testRunDaemons[0]  
        if testRunDaemon != None:
            runContexts =  testRunDaemon.getContexts()
            if runContexts != None and len(runContexts) &gt; 0:
                for runContext in runContexts:
                    if runContext != None:
                        identifier = runContext.getIdentifier()
                        logger.log("Check " + identifier, testcase)
                        runstate = -1
                        try:
                            runstate = runContext.getRunState()
                        except:
                            pass
                           
                        logger.log("Got runstate: " + str(runstate), testcase)
                                             
                        if runstate == DaemonRunContext.STATE_FINISHED:
                            stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase)                                             
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)    
            
                        elif runstate == DaemonRunContext.STATE_RUNNING:
                            logger.log("Tests running, proceed.", testcase)
                        elif runstate == DaemonRunContext.STATE_IDLE:
                            logger.log("Tests never started.", testcase)
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                        else:
                            logger.log("Tests in undefined state, try to get run-log...", testcase)
                            stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase)                                             
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                    else:
                        logger.log("No context, perhaps already stopped.", testcase)   
                        sizeOfContexts = sizeOfContexts - 1
                        alreadyStoppedSystems.append(systemKey)
            else:
                logger.log("ERROR: Couldn't create context for " + systemKey, testcase)           
                sizeOfContexts = sizeOfContexts - 1
                alreadyStoppedSystems.append(systemKey)
        else:
            logger.log("ERROR: No licence for daemon for " + systemKey, testcase)               
            sizeOfContexts = sizeOfContexts - 1
            alreadyStoppedSystems.append(systemKey)
    else:
        logger.log("That daemon has no test-rundaemon anymore.", testcase)
        sizeOfContexts = sizeOfContexts - 1
        alreadyStoppedSystems.append(systemKey)
elif systemKey not in alreadyStoppedSystems:
    logger.log("ERROR: No daemon for " + systemKey, testcase)    
    sizeOfContexts = sizeOfContexts - 1
    alreadyStoppedSystems.append(systemKey) 

if sizeOfContexts &lt; 0:
    sizeOfContexts = 0
    
logger.log("New size of contexts: " + str(sizeOfContexts), testcase)
rc.setLocal("sizeOfContexts", sizeOfContexts)</code>
            </ServerScriptStep>
            <IfSequence id="_39"
                        name="No running contexts anymore -&gt; leave"
                        test="$(sizeOfContexts) == 0">
              <BreakStep id="_3A"/>
            </IfSequence>
          </IfSequence>
        </TestStep>
        <ElseSequence id="_1lDN" name="Timeout exceeded -&gt; stop phase">
          <ProcedureCall id="_1lDO" procedure="stopPhaseAndCollectResults"/>
        </ElseSequence>
      </RepeatSequence>
    </TestCase>
  </TestSet>
  <TestSet id="_3F" name="Test Phase">
    <SetupSequence id="_3h">
      <ProcedureCall id="_3g" procedure="qfs.utils.getTimestamp"
                     retvarname="uniquesync"/>
    </SetupSequence>
    <TestSet id="_1y" name="Run Test Phase">
      <comment>Trigger the actual test phase.
Get the test-systems from Excel and trigger the execution of the testphase test-case.
It just triggers the execution. It doesn't wait till the execution is over, that's done by the following test-case.

@author QFS,mm
@since 4.1</comment>
      <DataDriver id="_1z" name="Environment data">
        <ExcelDataBinder excelfile="$(systemExcelFile)" id="_1+" name="data"/>
      </DataDriver>
      <TestCase condition="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;"
                id="_1-" name="Run Test Phase Test">
        <comment>Contact a test-system and trigger the execution of the testphase test-case.

@author QFS,mm
@since 4.1</comment>
        <SetGlobalStep id="_21" local="true" varname="suiteFolder">
          <default>${qftest:suite.dir}</default>
        </SetGlobalStep>
        <SetGlobalStep id="_45" varname="phaseName">
          <default>TestPhase</default>
        </SetGlobalStep>
        <IfSequence id="_22" test="&#34;$(role)&#34; == &#34;role1&#34;">
          <SetGlobalStep id="_23" local="true" varname="testsuite">
            <default>carconfig_Loadtesting.qft#CarConfigurator Loadtesting.Vehicle tests</default>
          </SetGlobalStep>
          <ElseifSequence id="_25"
                          test="&#34;$(role)&#34; == &#34;role2&#34;">
            <SetGlobalStep id="_26" local="true" varname="testsuite">
              <default>carconfig_Loadtesting.qft#CarConfigurator Loadtesting.Vehicle tests</default>
            </SetGlobalStep>
          </ElseifSequence>
        </IfSequence>
        <ServerScriptStep id="_28" name="Trigger test execution">
          <code>from de.qfs.apps.qftest.daemon import DaemonLocator
from java.util import Properties

system = rc.lookup("system")
port = rc.getInt("port")
suiteFolder = rc.lookup("suiteFolder")
testsuite = rc.lookup("testsuite")
testcase = rc.lookup("qftest", "testcase.name")
phaseName = rc.lookup("phaseName")
testStartTime = rc.lookup("testStartTime")

global contexts
global sizeOfContexts
try:
    del sizeOfContexts
except:
    pass
    
systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey, testcase)

#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon != None:
    testRunDaemons = daemon.getTestRunDaemons()
    logger.log("Got testrundaemons: " + str(len(testRunDaemons)), testcase)
    
    if len(testRunDaemons) &gt; 0:
        testRunDaemon = testRunDaemons[0]
                                       
        if testRunDaemon != None:
            runContexts =  testRunDaemon.getContexts()
            if runContexts == None or len(runContexts) == 0:
                #create new one
                logger.log("Create new RunContext.", testcase)
                runContexts = testRunDaemon.createContexts(1)
                
                if runContexts and len(runContexts) &gt; 0:
                    if contexts.has_key(systemKey):
                        contexts.pop(systemKey)
                    contexts[systemKey] = runContexts[0]                
                
            if runContexts != None:
                for runContext in runContexts:
                    if runContext != None:
                        runContext.setIdentifier(rc.lookup("phaseName") + "_" + systemKey)
                        myTestsuite = suiteFolder + "/" + testsuite
                        logger.log("Run test-case: " + myTestsuite, testcase)
                        
                        params = Properties()
           
                        params.put("totalStarted", rc.getStr("totalStarted"))
                        params.put("uniquesync", rc.getStr("uniquesync"))
                        params.put("phaseName", phaseName)
                        params.put("testStartTime", testStartTime)
                        addCustomVarsFromExcelToParams(logger, params, testcase)
        
                        runContext.runTest(myTestsuite, params)
                        
                        logger.log("Runcontext created successfully", testcase)                    
                    else:
                        logger.log("no context", testcase)                                               
            else:
                logger.log("ERROR: Couldn't create context for " + systemKey, testcase)           
        else:
            logger.log("ERROR: No licence for daemon for " + systemKey, testcase)               
    else:
        logger.log("ERROR: Couldn't find an existing daemon for " + systemKey)
else:
    logger.log("ERROR: No daemon for " + systemKey, testcase)    

logger.log("New size of contexts: " + str(len(contexts)), testcase)</code>
        </ServerScriptStep>
      </TestCase>
    </TestSet>
    <TestCase id="_3J" name="Wait For Test Phase">
      <comment>Iterate over all contexts, stored in the global context Jython dictionary and wait till the execution is over on all of those test-systems.
The run-logs will be stored to the runlogDirectory folder.

@author QFS,mm
@since 4.1</comment>
      <SetGlobalStep id="_3K" local="true" varname="totalTimeout">
        <default>$[1000 * 60 * $(testphaseTimeout)]</default>
      </SetGlobalStep>
      <ServerScriptStep id="_1lDM" name="initialize alreadyStoppedSystems">
        <code>global alreadyStoppedSystems

alreadyStoppedSystems = []</code>
      </ServerScriptStep>
      <RepeatSequence count="$[$(testphaseTimeout) / $(testphaseCheckDelay) + 1]"
                      id="_3L">
        <BasicSequence id="_3M"
                       name="wait testphaseCheckDelay before checking for running systems"
                       postdelay="$[1000 * 60 * $(testphaseCheckDelay)]"/>
        <TestStep id="_3N" name="Go through test-systems">
          <DataDriver id="_3O" name="Environment data">
            <ExcelDataBinder excelfile="$(systemExcelFile)" id="_3P"
                             name="data"/>
          </DataDriver>
          <IfSequence id="_3Q"
                      test="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;">
            <ServerScriptStep id="_3R"
                              name="Wait for tests and store runlogs when over">
              <code>from de.qfs.apps.qftest.daemon import DaemonRunContext, DaemonLocator
     
system = rc.lookup("system")
port = rc.getInt("port")
logpath = rc.lookup("runlogDirectory")
testcase = rc.lookup("qftest", "testcase.name")

global contexts
global sizeOfContexts
try:
    a = sizeOfContexts
except:
    sizeOfContexts = len(contexts)
    
systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey, testcase)

#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon != None and (systemKey not in alreadyStoppedSystems):
    testRunDaemons = daemon.getTestRunDaemons()
    if len(testRunDaemons) &gt; 0:
        testRunDaemon = testRunDaemons[0]  
        if testRunDaemon != None:
            runContexts =  testRunDaemon.getContexts()
            if runContexts != None and len(runContexts) &gt; 0:
                for runContext in runContexts:
                    if runContext != None:
                        identifier = runContext.getIdentifier()
                        logger.log("Check " + identifier, testcase)
                        runstate = -1
                        try:
                            runstate = runContext.getRunState()
                        except:
                            pass
                           
                        logger.log("Got runstate: " + str(runstate), testcase)
                                             
                        if runstate == DaemonRunContext.STATE_FINISHED:
                            stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase)                                             
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                            
                        elif runstate == DaemonRunContext.STATE_RUNNING:
                            logger.log("Tests running, proceed.", testcase)
                        elif runstate == DaemonRunContext.STATE_IDLE:
                            logger.log("Tests never started.", testcase)
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                        else:
                            logger.log("Tests in undefined state, try to get run-log...", testcase)
                            stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase)                                             
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                    else:
                        logger.log("No context, perhaps already stopped.", testcase)                       
                        sizeOfContexts = sizeOfContexts - 1
                        alreadyStoppedSystems.append(systemKey)
            else:
                logger.log("ERROR: Couldn't create context for " + systemKey, testcase)                         
                sizeOfContexts = sizeOfContexts - 1
                alreadyStoppedSystems.append(systemKey)
        else:
            logger.log("ERROR: No licence for daemon for " + systemKey, testcase)                   
            sizeOfContexts = sizeOfContexts - 1
            alreadyStoppedSystems.append(systemKey)
    else:
        logger.log("That daemon has no test-rundaemon anymore.", testcase)   
        sizeOfContexts = sizeOfContexts - 1
        alreadyStoppedSystems.append(systemKey)
elif systemKey not in alreadyStoppedSystems:
    logger.log("ERROR: No daemon for " + systemKey, testcase)    
    sizeOfContexts = sizeOfContexts - 1
    alreadyStoppedSystems.append(systemKey) 

logger.log("New size of contexts: " + str(sizeOfContexts), testcase)
rc.setLocal("sizeOfContexts", sizeOfContexts)</code>
            </ServerScriptStep>
            <IfSequence id="_3S"
                        name="No running contexts anymore -&gt; leave"
                        test="$(sizeOfContexts) == 0">
              <BreakStep id="_3T"/>
            </IfSequence>
          </IfSequence>
        </TestStep>
        <ElseSequence id="_1lD0" name="Timeout exceeded -&gt; stop phase">
          <ProcedureCall id="_1lD1" procedure="stopPhaseAndCollectResults"/>
        </ElseSequence>
      </RepeatSequence>
    </TestCase>
  </TestSet>
  <TestCase id="_2s" name="Cleanup">
    <comment>Cleanup phase.

Tries to connect all daemons and performs a cleanup action to get rid of application and to release license.

@author QFS,mm
@since 4.1</comment>
    <ProcedureCall id="_30" procedure="stopTestRuns"/>
    <ProcedureCall id="_2+" procedure="cleanDaemons"/>
    <ProcedureCall id="_3X" procedure="deleteGlobalContextsArray"/>
  </TestCase>
  <PackageRoot id="_3">
    <Package id="_1lDS" name="initialization">
      <comment>Procedures required for initializing the test run.

@author QFS,mm
@since 4.2</comment>
      <Procedure id="_1lDQ" name="initializeGlobalJythonMethods">
        <comment>Initializes global Jython functions for further use.

@author QFS,mm
@since 4.2</comment>
        <ServerScriptStep id="_3U" name="Initialize global Jython methods">
          <code>from java.io import FileOutputStream

global stopTestRunOnSystem
global addCustomVarsFromExcel
global addCustomVarsFromExcelToParams

def stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase):
    try:
        logger.log("Try to get run-log.", testcase)        
        runlog = runContext.getRunLog()
        fos = FileOutputStream((logpath + identifier + ".qrl"))
        fos.write(runlog)
        fos.close()        
        logger.log("Run-log saved.", testcase)                
    except Exception, e:
        logger.log("ERROR: Couldn't write run-log for " + systemKey + " - error: " + str(e), testcase)

#

def addCustomVarsFromExcel(logger, testRunDaemon, testcase):
    customVarsFromExcel = rc.lookup("customVarsFromExcel")
    if customVarsFromExcel:
        for cv in customVarsFromExcel.split(","):
            if cv:                
                try:
                    testRunDaemon.setGlobal(cv, rc.getStr(cv))
                except:
                    logger.log("Variable " + cv + " doesn't exists.", testcase)
#

def addCustomVarsFromExcelToParams(logger, params, testcase):
    customVarsFromExcel = rc.lookup("customVarsFromExcel")
    if customVarsFromExcel:
        for cv in customVarsFromExcel.split(","):
            if cv:                
                try:
                    params.put(cv, rc.getStr(cv))
                except:
                    logger.log("Variable " + cv + " doesn't exists.", testcase)
#</code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_2g" name="logging">
      <comment>Utility procedures for logging.

@author QFS,mm
@since 4.1</comment>
      <Procedure id="_1lDT" name="checkAndCreateDirectory">
        <variable name="directory"/>
        <variable name="testStartTime">$(testStartTime)</variable>
        <variable name="directoryName">Directory</variable>
        <variable name="varName"/>
        <comment>Check whether directory for logs is existing.
If not then the directory and the test-run specific timestamp directory will be created.

@param directory	The path to check or create.
@param testStartTime	The timestamp for the test-run specific timestamp directory.
@param varName	The name of the global variable containing the base directory for logs.
@param directoryName	The user-readable meaning of the directory.

@author QFS,mm
@since 4.2</comment>
        <ProcedureCall id="_2X" procedure="qfs.shellutils.mkdir">
          <variable name="directory">$(directory)</variable>
        </ProcedureCall>
        <ProcedureCall id="_3j" local="true" procedure="qfs.shellutils.exists"
                       retvarname="directoryExists">
          <variable name="file">$(directory)</variable>
        </ProcedureCall>
        <IfSequence id="_3l" test="not $(directoryExists)">
          <SetGlobalStep id="_3w" local="true" varname="message">
            <default>Directory '$(directoryName)' for '$(directory)' couldn't be created! 
Perhaps you have no permissions to create that folder. 
You can change this to another location via modifying the global variable '$(varName)' at Test-suite node.</default>
          </SetGlobalStep>
          <ProcedureCall id="_3x" procedure="qfs.run-log.logError">
            <variable name="message">$(message)</variable>
            <variable name="withScreenshots">false</variable>
          </ProcedureCall>
          <ProcedureCall id="_3y" procedure="qfs.utils.printMessage">
            <variable name="message">$(message)</variable>
          </ProcedureCall>
          <ElseSequence id="_3t">
            <ProcedureCall id="_3u" procedure="qfs.utils.printMessage">
              <variable name="message">Directory '$(directory)' exists!</variable>
            </ProcedureCall>
            <ServerScriptStep id="_3-"
                              name="Ensure to add / at the end of logDirectory">
              <code>rd = rc.lookup("directory")

if not rd.endswith("/") and not rd.endswith("\\\\"):
    rd = rd + "/"
    
rc.setLocal("directory", rd)</code>
            </ServerScriptStep>
            <IfSequence id="_1lDX" test="rc.lookup(&#34;testStartTime&#34;)">
              <ProcedureCall id="_1lDW"
                             procedure="logging.checkAndCreateDirectory">
                <variable name="directoryName">Run specific $(directoryName)</variable>
                <variable name="varName">$(varName)</variable>
                <variable name="directory">$(directory)$(testStartTime)</variable>
                <variable name="testStartTime"/>
              </ProcedureCall>
              <ElseSequence id="_1lDZ" name="Set global directory variable">
                <SetGlobalStep id="_1lDY" varname="$(varName)">
                  <default>$(directory)</default>
                </SetGlobalStep>
              </ElseSequence>
            </IfSequence>
          </ElseSequence>
        </IfSequence>
      </Procedure>
      <Procedure id="_1t" name="registerScriptLogging">
        <comment>Create a global logger variable in Jython, which can be used to create log entries in the other scripts.

@author QFS,mm
@since 4.1</comment>
        <ServerScriptStep id="_1u">
          <code>from java.util import Date
from java.text import SimpleDateFormat
from java.text import DateFormat
from java.lang import System
from java.io import File

class ScriptLogger():
    def __init__(self):

        #force Jython to use right classes
        from java.text import SimpleDateFormat, DateFormat
        from java.lang import System      
        from java.io import File  
        
        now = System.currentTimeMillis()
        dateFormat = DateFormat.getDateInstance()
        dateFormat = SimpleDateFormat("yyyyMMddHHmmss")
        starttime = dateFormat.format(Date(now))

        logDir = rc.lookup("logDirectory")
        logDirFile = File(logDir)
        logfilename = logDir + "daemoncontroller_" + str(starttime) + ".log"
        logDirObj = File(logfilename)
        logDirFile.mkdirs()
        
        self.logfilename = logfilename
        
    def log(self, msg, testcase=None):
        #force Jython to use right classes
        from java.text import SimpleDateFormat, DateFormat
        
        dateFormat = DateFormat.getDateInstance()
        dateFormat = SimpleDateFormat("yyyyMMddHHmmss")        
        now = dateFormat.format(Date(System.currentTimeMillis()))                            
        introString = str(now) + ": "
        if testcase:
            introString = introString + testcase + ": "
        fullMsg = introString + msg
        print fullMsg
        daemonFile = open(self.logfilename, 'a')        
        daemonFile.write(fullMsg + "\n")        
        daemonFile.close()        
        
testcase = rc.lookup("qftest", "testcase.name")
global logger
logger = ScriptLogger()
logger.log("==================================================")
logger.log("Start test-run", testcase)
        </code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Procedure id="_1R" name="stopTestRuns">
      <comment>Utility procedure to contact all running contexts and stop the execution.

@author QFS,mm
@since 4.1</comment>
      <ServerScriptStep id="_1Q">
        <code>from java.io import FileOutputStream

logpath = rc.lookup("runlogDirectory")

for ac in contexts.keys():
    runContext = contexts[ac]
    testcase = rc.lookup("qftest", "testcase.name")
    
    try:
        runContext.stopRun() 
    except:
        pass
        
    try:
        logger.log("Try to get run-log.", testcase)        
        runlog = runContext.getRunLog()
        fos = FileOutputStream((logpath + "stop_" + ac + ".qrl"))
        fos.write(runlog)
        fos.close()        
        logger.log("Run-log saved.", testcase)                
    except:
        logger.log("No open run-log for " + ac, testcase)
            
    try:
        runContext.stopRun() 
    except:
        pass
    try:
        runContext.rollbackDependencies() 
    except:
        pass
    try:
        runContext.getTestRunDaemon().cleanup()    
    except:
        pass
    try:
        runContext.getTestRunDaemon().killClients()  
    except:
        pass
    try:   
        runContext.release()
    except:
        pass
    try:
        runContext.getTestRunDaemon().getDaemon().cleanup()    
    except:
        pass        </code>
      </ServerScriptStep>
    </Procedure>
    <Procedure id="_1lCw" name="stopPhaseAndCollectResults">
      <comment>Stop the current test-phase and collect the run-logs.

Tries to connect all daemons and tries to stop the test-run and to get the run-log.
If the contacted daemon has already been stopped, nothing happens.

@author QFS,mm
@since 4.2</comment>
      <Test id="_1lDG" name="Go through test-systems">
        <DataDriver id="_1lDH" name="Environment data">
          <ExcelDataBinder excelfile="$(systemExcelFile)" id="_1lDI"
                           name="data"/>
        </DataDriver>
        <IfSequence id="_1lDJ"
                    test="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;">
          <ServerScriptStep id="_1lDK">
            <code>from de.qfs.apps.qftest.daemon import DaemonRunContext, DaemonLocator
from java.util import Properties
from java.lang import Thread
from java.lang import System
     
system = rc.lookup("system")
port = rc.getInt("port")
logpath = rc.lookup("runlogDirectory")
testcase = rc.lookup("qftest", "testcase.name")

#append hint about stopping phase
testcase = testcase + "_StopPhase"

global contexts
global sizeOfContexts
global alreadyStoppedSystems

try:
    a = sizeOfContexts
except:
    sizeOfContexts = len(contexts)
    
systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey, testcase)
#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon != None and (systemKey not in alreadyStoppedSystems):
    testRunDaemons = daemon.getTestRunDaemons()
    if len(testRunDaemons) &gt; 0:
        testRunDaemon = testRunDaemons[0]  
        if testRunDaemon != None:
            runContexts =  testRunDaemon.getContexts()
            if runContexts != None and len(runContexts) &gt; 0:
                for runContext in runContexts:
                    if runContext != None:
                        identifier = runContext.getIdentifier()
                        logger.log("Check " + identifier, testcase)
                        runstate = -1
                        try:
                            runstate = runContext.getRunState()
                        except:
                            pass
                           
                        logger.log("Got runstate: " + str(runstate), testcase)

                        if runstate == DaemonRunContext.STATE_RUNNING:
                            try:
                                runContext.stopRun()
                                try:
                                    #wait two seconds to allow stop run to step
                                    Thread.sleep(2000)
                                except:
                                    pass 
                            except:
                                pass
             
                        if runstate == DaemonRunContext.STATE_FINISHED:
                            stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase)                                             
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                        else:
                            logger.log("Tests in undefined state, try to get run-log...", testcase)
                            stopTestRunOnSystem(logger, logpath, systemKey, identifier, runContext, testcase)                                             
                            sizeOfContexts = sizeOfContexts - 1
                            alreadyStoppedSystems.append(systemKey)
                        
                    else:
                        logger.log("No context, perhaps already stopped.", testcase)
                        sizeOfContexts = sizeOfContexts - 1
                        alreadyStoppedSystems.append(systemKey)                                               
            else:
                logger.log("ERROR: Couldn't create context for " + systemKey, testcase)
                sizeOfContexts = sizeOfContexts - 1
                alreadyStoppedSystems.append(systemKey)                                         
        else:
            logger.log("ERROR: No licence for daemon for " + systemKey, testcase)
            sizeOfContexts = sizeOfContexts - 1
            alreadyStoppedSystems.append(systemKey)                               
    else:
        logger.log("That daemon has no test-rundaemon anymore.", testcase)   
        sizeOfContexts = sizeOfContexts - 1
        alreadyStoppedSystems.append(systemKey)
elif systemKey not in alreadyStoppedSystems:
    logger.log("ERROR: No daemon for " + systemKey, testcase)    
    sizeOfContexts = sizeOfContexts - 1
    alreadyStoppedSystems.append(systemKey)    

if sizeOfContexts &lt; 0:
    sizeOfContexts = 0

logger.log("New size of contexts: " + str(sizeOfContexts), testcase)
rc.setLocal("sizeOfContexts", sizeOfContexts)</code>
          </ServerScriptStep>
        </IfSequence>
      </Test>
    </Procedure>
    <Procedure id="_2q" name="cleanDaemons">
      <comment>Cleanup procedure.

Tries to connect all daemons and performs a cleanup action to get rid of application and to release license.

@author QFS,mm
@since 4.1</comment>
      <TestStep id="_2j" name="Go through test-systems">
        <DataDriver id="_2k" name="Environment data">
          <ExcelDataBinder excelfile="$(systemExcelFile)" id="_2l"
                           name="data"/>
        </DataDriver>
        <IfSequence id="_2m"
                    test="&#34;$[&#34;${default:exec:}&#34;.lower()]&#34; == &#34;x&#34;">
          <ServerScriptStep id="_2r">
            <code>from de.qfs.apps.qftest.daemon import DaemonLocator

system = rc.lookup("system")
port = rc.getInt("port")
timeout = 10000 * 1000
logpath = rc.lookup("runlogDirectory")
testcase = rc.lookup("qftest", "testcase.name")

systemKey = system + "_" + str(port)
logger.log("Contact daemon for " + systemKey + ".", testcase)

#contact daemon
daemon = DaemonLocator.instance().locateDaemon(system, port)
if daemon:
    logger.log("Call cleanup for daemon " + systemKey + ".", testcase)
    daemon.cleanup()
    logger.log("Daemon cleanup done for " + systemKey + ".", testcase)
    
           </code>
          </ServerScriptStep>
        </IfSequence>
      </TestStep>
    </Procedure>
    <Procedure id="_3W" name="deleteGlobalContextsArray">
      <comment>Cleanup procedure to delete the global contexts variable.
If this procedure has been executed all references to the client are lost, this will cause the daemon to cleanup it runcontext at a certain point of time.

@author QFS, mm
@since 4.1.5</comment>
      <ServerScriptStep id="_3V" name="Clean contexts array">
        <code>global contexts
global sizeOfContexts
    
try:    
    testcase = rc.lookup("qftest", "testcase.name")
    sizeOfContexts = len(contexts)
    del contexts
    logger.log("Deleted contexts with " + str(sizeOfContexts) + " entries.", testcase)    
except:
    pass

try:    
    del sizeOfContexts
except:
    pass    </code>
      </ServerScriptStep>
    </Procedure>
  </PackageRoot>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
