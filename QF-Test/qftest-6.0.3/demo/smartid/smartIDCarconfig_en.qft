<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302E021500917C7CFD67B03A3BB61D666B1C0F12F0CF0A50EB021500B4E58DB1D7C1E5D3EA7ADB36650ED2529E56B98D"
          version="6.0.3">
  <include>qfs.qft</include>
  <reference>qfs.qft</reference>
  <variable name="browsername"/>
  <variable name="browserdir"/>
  <comment>@author	QFS</comment>
  <CommentStep id="_2JGg">
    <heading>&lt;font style="color:green"&gt;The present test-suite demonstrates the use of &lt;b&gt;SmartIDs&lt;/b&gt;</heading>
  </CommentStep>
  <CommentStep id="_2JGh">
    <heading>&lt;font style="color:green"&gt;with the demo application "CarConfigurator".</heading>
  </CommentStep>
  <CommentStep id="_2JJ7">
    <heading>&lt;font style="color:green"&gt;SmartIDs directly use the recognition criteria of a component.</heading>
  </CommentStep>
  <CommentStep id="_2JJA">
    <heading>&lt;font style="color:green"&gt;Thus, there are &lt;b&gt;no component nodes&lt;/b&gt; in the present test-suite!</heading>
  </CommentStep>
  <CommentStep id="_2JJ9">
    <heading>&lt;font style="color:green"&gt;The test-suite also shows that SmartIDs can be used to run a test-case</heading>
  </CommentStep>
  <CommentStep id="_2JJB">
    <heading>&lt;font style="color:green"&gt;&lt;b&gt;cross-technology&lt;/b&gt; (here Java AWT, Java FX, Web and Windows).</heading>
  </CommentStep>
  <TestSet id="_3DV" name="CarConfigurator Demo">
    <DependencyReference id="_3DW"
                         reference="dependencies.SUT_started_reset"/>
    <DataDriver id="_2JH2" loopreportname="Testausführung für $(engine)"
                name="run tests for different technologies">
      <CommentStep id="_2JJ1">
        <heading>&lt;font style="color:green"&gt;The same test can be run on different technologies,</heading>
      </CommentStep>
      <CommentStep id="_2JJ2">
        <heading>&lt;font style="color:green"&gt;only the startup sequences have to be engine specific.</heading>
      </CommentStep>
      <IfSequence id="_2JKi"
                  name="Data drivers for engines (do not execute win tests on Unix machine)"
                  test="${qftest:windows}">
        <TableDataBinder id="_2JH3" intervals="${default:iterEngine:}"
                         name="engines">
          <TableBinderColumn title="engine" width="638">
            <data>awt</data>
            <data>fx</data>
            <data>web</data>
            <data>win</data>
          </TableBinderColumn>
        </TableDataBinder>
        <ElseSequence id="_2JKj" name="unix">
          <TableDataBinder id="_2JKk" intervals="${default:iterEngine:}"
                           name="engines">
            <TableBinderColumn title="engine" width="571">
              <data>awt</data>
              <data>fx</data>
              <data>web</data>
            </TableBinderColumn>
          </TableDataBinder>
        </ElseSequence>
      </IfSequence>
    </DataDriver>
    <TestSet id="_3DY" name="Check prices">
      <variable name="engine">awt</variable>
      <DataDriver id="_3DZ">
        <CommentStep id="_2JJv">
          <heading>Limit the iterations to the first data set as default</heading>
        </CommentStep>
        <TableDataBinder id="_3Da" intervals="${default:iterItem:0}"
                         name="Models and prices">
          <TableBinderColumn title="refModel" width="245">
            <data>Rolo</data>
            <data>Minigolf</data>
            <data>Rassant</data>
            <data>Rassant Family</data>
            <data>I5</data>
          </TableBinderColumn>
          <TableBinderColumn title="refPrice" width="245">
            <data> ?\$?12,300.00 ?</data>
            <data> ?\$?15,000.00 ?</data>
            <data> ?\$?17,000.00 ?</data>
            <data> ?\$?18,500.00 ?</data>
            <data> ?\$?29,000.00 ?</data>
          </TableBinderColumn>
        </TableDataBinder>
      </DataDriver>
      <TestCase id="_3Db"
                name="Check prices - samples for general SmartID syntax">
        <fallback name="engine">awt</fallback>
        <variable name="index"/>
        <CommentStep id="_2JJD">
          <heading>&lt;font style="color:green"&gt;A SmartID starts with a &lt;b&gt;#&lt;/b&gt; and has at least one criteria for component recognition:</heading>
        </CommentStep>
        <CommentStep id="_2JJK">
          <heading>&lt;font style="color:green"&gt;Here the component name ...</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3Dg" modifiers="16"/>
        <CommentStep id="_2JJL">
          <heading>&lt;font style="color:green"&gt;and here the label:</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#Vehicles..."
                        event="MOUSE_MPRC" id="_3Dh" modifiers="16"/>
        <CommentStep id="_2JJM">
          <heading>&lt;font style="color:green"&gt;The label corresponds to either the attribute "Feature"</heading>
        </CommentStep>
        <CommentStep id="_2JJN">
          <heading>&lt;font style="color:green"&gt;and/or the extra feature "qfs:label" of a recorded component.</heading>
        </CommentStep>
        <ComponentWaiter client="$(client)" component="#VehiclesTable"
                         id="_3Di"/>
        <CommentStep id="_2JJF">
          <heading>&lt;font style="color:green"&gt;The table is addressed via the component class.</heading>
        </CommentStep>
        <CommentStep id="_2JJS">
          <heading>&lt;font style="color:green"&gt;A colon has to follow the class name.</heading>
        </CommentStep>
        <CommentStep id="_2JIh">
          <heading>&lt;font style="color:green"&gt;The cells are addressed via index as before. </heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Table:&amp;0@$(refModel)"
                        event="MOUSE_MPRC" id="_2JJE" modifiers="16"/>
        <CheckStringStep client="$(client)" component="#VehiclePrice"
                         id="_2JKh" regexp="true">
          <text>$(refPrice)</text>
        </CheckStringStep>
        <CommentStep id="_2JJT">
          <heading>&lt;font style="color:green"&gt;The component hierarchy can be implemented via nested SmartIDs.</heading>
        </CommentStep>
        <CommentStep id="_2JJU">
          <heading>&lt;font style="color:green"&gt;The connector between the single SmartIDs is &lt;b&gt;@&lt;/b&gt;.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehiclesDialog@#OK" event="MOUSE_MPRC"
                        id="_3Dl" modifiers="16"/>
        <CommentStep id="_2JJV">
          <heading>&lt;font style="color:green"&gt;Recognition criteria can be combined:</heading>
        </CommentStep>
        <CommentStep id="_2JJW">
          <heading>&lt;font style="color:green"&gt;the class has to come first, followed by a colon,</heading>
        </CommentStep>
        <CommentStep id="_2JJX">
          <heading>&lt;font style="color:green"&gt;then either the component name or the label.</heading>
        </CommentStep>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JIE"
                         timeout="1000"/>
      </TestCase>
    </TestSet>
    <TestCase id="_3Dn"
              name="Add a vehicle - samles for smartIDs with index and regular expressions">
      <fallback name="engine">awt</fallback>
      <BasicSequence id="_3Do"
                     name="Create a vehicle - samples for smartIDs with index">
        <ProcedureCall id="_2JJ4" procedure="menu.vehicle dialog"/>
        <TextInputStep clear="true" client="$(client)"
                       component="#VehicleName" id="_3Dt" single="false">
          <text>Test</text>
        </TextInputStep>
        <IfSequence id="_2JJ0" test="&#34;$(engine)&#34; == &#34;web&#34;">
          <TextInputStep clear="true" client="$(client)"
                         component="#VehicleId" id="_2JIp" single="false">
            <text>M6</text>
          </TextInputStep>
        </IfSequence>
        <TextInputStep clear="true" client="$(client)"
                       component="#VehiclePrice" id="_3Dv" single="false">
          <text>9999</text>
        </TextInputStep>
        <CommentStep id="_2JJP">
          <heading>&lt;font style="color:green"&gt;When a SmartID addresses several components</heading>
        </CommentStep>
        <CommentStep id="_2JJO">
          <heading>&lt;font style="color:green"&gt;you can use an index in angular brackets to identify a certain component:</heading>
        </CommentStep>
        <CommentStep id="_2JJa">
          <heading>&lt;font style="color:green"&gt;The button "New" has the index 0.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Button:&lt;0&gt;" event="MOUSE_MPRC"
                        id="_3Dw" modifiers="16"/>
        <IfSequence id="_2JJ+"
                    name="The button &#34;OK&#34; has index 3 with the web demo, else 4."
                    test="&#34;$(engine)&#34; == &#34;web&#34;">
          <SetGlobalStep id="_2JK0" local="true" varname="okButtonIndex">
            <default>3</default>
          </SetGlobalStep>
          <ElseSequence id="_2JJ-">
            <SetGlobalStep id="_2JJz" local="true" varname="okButtonIndex">
              <default>4</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <CommentStep id="_2JJc">
          <heading>&lt;font style="color:green"&gt;The index can be combined with other recognition criteria.</heading>
        </CommentStep>
        <CommentStep id="_2JK1">
          <heading>&lt;font style="color:green"&gt;The recognition criteria, including the index, may be contained in variables.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Button:&lt;$(okButtonIndex)&gt;"
                        event="MOUSE_MPRC" id="_3EE" modifiers="16"/>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_1p6y"
                         timeout="8000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehicleTable@Model&amp;-1"
                        event="MOUSE_MPRC" id="_3Fh" modifiers="16"/>
        <CheckStringStep client="$(client)" component="#CalculatedPrice"
                         id="_3Dz" regexp="true" timeout="2000">
          <text>\$ ?9,999\.00</text>
        </CheckStringStep>
      </BasicSequence>
      <BasicSequence id="_3D+" name="Change">
        <CommentStep id="_2JIj">
          <heading>&lt;font style="color:green"&gt;Scopes limit the search for components to the subcomponents of the given container</heading>
        </CommentStep>
        <CommentStep id="_2JKX">
          <heading>&lt;font style="color:green"&gt;When opening a dialog the Scope</heading>
        </CommentStep>
        <CommentStep id="_2JIk">
          <heading>&lt;font style="color:green"&gt;will implicitly be set to the dialog</heading>
        </CommentStep>
        <CommentStep id="_2JJ5">
          <heading>&lt;font style="color:green"&gt;Alternatively, you can specify the component hierarchy.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3D-" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#miVehicles"
                        event="MOUSE_MPRC" id="_3E0" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="#VehiclesDialog"
                         id="_3E1"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehiclesTable&amp;0&amp;5"
                        event="MOUSE_MPRC" id="_3E2" modifiers="16"/>
        <TextInputStep clear="true" client="$(client)"
                       component="#VehiclePrice" id="_3E4" single="false">
          <text>7000</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="#Change"
                        event="MOUSE_MPRC" id="_3E5" modifiers="16"/>
        <CheckStringStep client="$(client)"
                         component="#VehiclesTable&amp;2&amp;5" id="_3E6"
                         regexp="true" timeout="5000">
          <text>\$ ?7,000\.00</text>
        </CheckStringStep>
        <MouseEventStep clicks="1" client="$(client)" component="#OK"
                        event="MOUSE_MPRC" id="_3E7" modifiers="16"/>
        <CommentStep id="_2JIl">
          <heading>&lt;font style="color:green"&gt;When closing the dialog the scope will be reset automatically.</heading>
        </CommentStep>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JJd"
                         timeout="8000"/>
      </BasicSequence>
      <BasicSequence id="_3E8"
                     name="Delete a vehicle - samples for SmartIDs with regular expression">
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3E9" modifiers="16"/>
        <CommentStep id="_2JJg">
          <heading>&lt;font style="color:green"&gt;The label or the component name may be a regular expression.</heading>
        </CommentStep>
        <CommentStep id="_2JJh">
          <heading>&lt;font style="color:green"&gt;Insert a &lt;b&gt;%&lt;/b&gt; after the &lt;b&gt;#&lt;/b&gt; to indicate regular expressions.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#%MenuItem:Vehicles.*" event="MOUSE_MPRC"
                        id="_2JJf" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="#VehiclesDialog"
                         id="_3EB"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehiclesTable&amp;0&amp;5"
                        event="MOUSE_MPRC" id="_3EC" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#Delete"
                        event="MOUSE_MPRC" id="_3ED" modifiers="16"/>
        <IfSequence id="_2JIF" name="web"
                    test="&#34;$(engine)&#34;==&#34;web&#34;">
          <CommentStep id="_2JIK">
            <heading>&lt;font style="color:green"&gt;The web application has an extra dialog</heading>
          </CommentStep>
          <CommentStep id="_2JIJ">
            <heading>&lt;font style="color:green"&gt;asking to acknoledge deletion</heading>
          </CommentStep>
          <SelectionEventStep client="$(client)" component="#Dialog:"
                              detail="OK" event="SELECTION" id="_2JIH"/>
        </IfSequence>
        <MouseEventStep clicks="1" client="$(client)" component="#OK"
                        event="MOUSE_MPRC" id="_3Dx" modifiers="16"/>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JID"/>
        <CommentStep id="_2JJi"/>
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_2JJl" modifiers="16"/>
        <CommentStep id="_2JJj">
          <heading>&lt;font style="color:green"&gt;When the SmartID contains special characters of regular expressions</heading>
        </CommentStep>
        <CommentStep id="_2JJk">
          <heading>&lt;font style="color:green"&gt;you have to escape them by backslashes \ .</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#%V.*\.\.\."
                        event="MOUSE_MPRC" id="_2JJo" modifiers="16"/>
        <CommentStep id="_2JJs">
          <heading>&lt;font style="color:green"&gt;The regular expression does not work for the class name.</heading>
        </CommentStep>
        <ComponentWaiter client="$(client)" component="#%Window:V.*"
                         id="_2JJp"/>
        <MouseEventStep clicks="1" client="$(client)" component="#Cancel"
                        event="MOUSE_MPRC" id="_2JJq" modifiers="16"/>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JJr"/>
      </BasicSequence>
    </TestCase>
    <TestCase id="_3EG"
              name="Samples for SmartIDs with spezial syntax for tabs and combo boxes">
      <CommentStep id="_2JIg">
        <heading>&lt;font style="color:green"&gt;For tab panels you can use the special class &lt;b&gt;Tab&lt;/b&gt;,  </heading>
      </CommentStep>
      <CommentStep id="_2JJu">
        <heading>&lt;font style="color:green"&gt;thus referencing a tab by &lt;b&gt;#Tab:&lt;i&gt;text of the tab&lt;/i&gt;&lt;/b&gt;</heading>
      </CommentStep>
      <MouseEventStep clicks="1" client="$(client)" component="#Tab:Specials"
                      event="MOUSE_MPRC" id="_3Fk" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="#ComboBox:"
                      event="MOUSE_MPRC" id="_2JJw" modifiers="16"/>
      <CommentStep id="_2JJx">
        <heading>&lt;font style="color:green"&gt;The entries of the drop down list can be addess via standard SmartID syntax &lt;b&gt;#List:@&lt;i&gt;item text&lt;/i&gt;&lt;/b&gt;</heading>
      </CommentStep>
      <CommentStep id="_2JJy">
        <heading>&lt;font style="color:green"&gt;or alternatively via &lt;b&gt;#Item:&lt;i&gt;item text&lt;/i&gt;&lt;/b&gt;</heading>
      </CommentStep>
      <MouseEventStep clicks="1" client="$(client)" component="#Item:Luxus"
                      event="MOUSE_MPRC" id="_2JJ6" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="#Tab:Vehicles"
                      event="MOUSE_MPRC" id="_2JJt" modifiers="16"/>
    </TestCase>
  </TestSet>
  <PackageRoot id="_31">
    <Package id="_3Cr" name="dependencies">
      <comment>Package für die Abhängigkeiten.</comment>
      <Dependency id="_3Cs" name="SUT_started">
        <discriminator>engine</discriminator>
        <variable name="engine">awt</variable>
        <comment>Make sure the application was started.</comment>
        <SetupSequence id="_3Ac" name="Start SUT if necessary">
          <SetGlobalStep id="_1p6F" varname="client">
            <default>carconfig</default>
          </SetGlobalStep>
          <ClientWaiter client="$(client)" id="_1p6G" local="true"
                        raise="false" resvarname="isSUTRunning" timeout="1"/>
          <IfSequence id="_1p6H" name="Start SUT if necessary"
                      test="not $(isSUTRunning)">
            <ProcedureCall id="_3Ad" procedure="$(engine).startStop.start"/>
            <ProcedureCall id="_2JIn" procedure="menu.newVersion"/>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_3Cm" name="close the application">
          <ProcedureCall id="_3D0" procedure="$(engine).startStop.stop"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_3Cw" name="SUT_started_reset">
        <comment>Make sure the application was started and reset.
</comment>
        <DependencyReference id="_3DA" reference="dependencies.SUT_started"/>
        <SetupSequence id="_3Aj" name="Reset">
          <ProcedureCall id="_3Ak" procedure="menu.reset"/>
        </SetupSequence>
      </Dependency>
    </Package>
    <Package id="_3Fq" name="menu">
      <comment>Procedures for handling the menu.</comment>
      <CommentStep id="_2JGl">
        <heading>&lt;font style="color:green"&gt;The menu items have unique names.</heading>
      </CommentStep>
      <CommentStep id="_2JGm">
        <heading>&lt;font style="color:green"&gt;In the following procedures they are used for the SmartID,</heading>
      </CommentStep>
      <CommentStep id="_2JGn">
        <heading>&lt;font style="color:green"&gt;making the tests independend of the UI language of the application</heading>
      </CommentStep>
      <Procedure id="_38o" name="reset">
        <comment>Click to File -&gt; Reset.</comment>
        <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                        event="MOUSE_MPRC" id="_3A0" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#miReset"
                        event="MOUSE_MPRC" id="_38q" modifiers="16"
                        postdelay="500"/>
      </Procedure>
      <Procedure id="_2JJ3" name="vehicle dialog">
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3Dp" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#miVehicles"
                        event="MOUSE_MPRC" id="_3Dq" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="#VehiclesDialog"
                         id="_3Dr"/>
      </Procedure>
      <Procedure id="_3Jj" name="newVersion">
        <comment>Click to Help -&gt; New Version.
</comment>
        <MouseEventStep clicks="1" client="$(client)" component="#mHelp"
                        event="MOUSE_MPRC" id="_3Jo" modifiers="16"/>
        <CheckBooleanStep checktype="checked" client="$(client)"
                          component="#miNewVersion" id="_2JIv"
                          resvarname="isChecked"/>
        <IfSequence id="_2JIw" test="not $(isChecked)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="#miNewVersion" event="MOUSE_MPRC"
                          id="_3Jp" modifiers="16"/>
        </IfSequence>
        <CommentStep id="_2JIo">
          <heading>&lt;font style="color:green"&gt;SmartIDs may also contain regular expressions. </heading>
        </CommentStep>
        <ComponentWaiter client="$(client)" component="#%.*CarConfig.*"
                         id="_3Jq"/>
      </Procedure>
    </Package>
    <Package id="_2JGo" name="awt">
      <Package id="_3Fr" name="startStop">
        <comment>Package for starting and stopping the SUT.</comment>
        <Procedure id="_33x" name="start">
          <comment>Start the application.</comment>
          <IfSequence id="_33z" test="${qftest:windows}">
            <SUTClientStarter client="$(client)"
                              directory="${qftest:dir.version}/demo/carconfig"
                              executable="${qftest:dir.version}/demo/carconfig/CarConfig.cmd"
                              id="_33+">
              <parameter>en</parameter>
            </SUTClientStarter>
            <ElseSequence id="_33-">
              <SUTClientStarter client="$(client)"
                                directory="${qftest:dir.version}/demo/carconfig"
                                executable="${qftest:dir.version}/demo/carconfig/CarConfig.sh"
                                id="_3Fl">
                <parameter>en</parameter>
              </SUTClientStarter>
            </ElseSequence>
          </IfSequence>
          <ClientWaiter client="$(client)" id="_E" timeout="30000"/>
          <ComponentWaiter client="$(client)" component="#JCarConfigurator"
                           id="_3Fm" timeout="30000"/>
        </Procedure>
        <Procedure id="_2JKC" name="stop">
          <comment>Terminate the SUT.</comment>
          <TryStep id="_2JKD" name="SUT running?">
            <ClientWaiter client="$(client)" id="_2JKE" timeout="500"/>
            <ProcedureCall id="_2JKF"
                           procedure="qfs.swing.cleanup.implicitExceptionHandler"/>
            <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                            event="MOUSE_MPRC" id="_2JKG" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)" component="#miExit"
                            event="MOUSE_MPRC" id="_2JKH" modifiers="16"/>
            <TryStep id="_3G8" name="wait for termination">
              <ProcessWaiter client="$(client)" id="_2JKI"/>
              <CatchSequence exception="TestException" id="_3G9" maxerror="0"
                             name="SUT not terminated">
                <ClientStopper client="$(client)" id="_2JKJ"/>
                <ProcessWaiter client="$(client)" id="_3GA"/>
              </CatchSequence>
            </TryStep>
            <CatchSequence exception="ClientNotConnectedException" id="_2JKK"
                           maxerror="0"/>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_2JH0" name="fx">
      <Package id="_2JGp" name="startStop">
        <comment>Package for starting and stopping the SUT.</comment>
        <Procedure id="_2JGq" name="start">
          <comment>Startet SUT.</comment>
          <IfSequence id="_1mi7" test="${qftest:windows}">
            <SUTClientStarter client="$(client)"
                              directory="${qftest:dir.version}/demo/carconfigFx"
                              executable="${qftest:dir.version}/demo/carconfig/CarConfig.cmd"
                              id="_1mi8">
              <parameter>en</parameter>
              <parameter>-engine</parameter>
              <parameter>fx</parameter>
            </SUTClientStarter>
            <ElseSequence id="_1mi9">
              <SUTClientStarter client="$(client)"
                                directory="${qftest:dir.version}/demo/carconfigFx"
                                executable="${qftest:dir.version}/demo/carconfig/CarConfig.sh"
                                id="_1miA">
                <parameter>en</parameter>
                <parameter>-engine</parameter>
                <parameter>fx</parameter>
              </SUTClientStarter>
            </ElseSequence>
          </IfSequence>
          <ClientWaiter client="$(client)" id="_1mgA"/>
          <ComponentWaiter client="$(client)" component="#CarConfiguratorFX"
                           id="_1mgB" timeout="60000"/>
        </Procedure>
        <Procedure id="_2JGr" name="stop">
          <comment>Close the application.</comment>
          <TryStep id="_2JGs" name="SUT still running?">
            <ClientWaiter client="$(client)" id="_2JGt" timeout="500"/>
            <ProcedureCall id="_3D2"
                           procedure="qfs.fx.cleanup.implicitExceptionHandler">
              <variable name="maxDialogs">5</variable>
            </ProcedureCall>
            <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                            event="MOUSE_MPRC" id="_2JGu" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)" component="#miExit"
                            event="MOUSE_MPRC" id="_2JGv" modifiers="16"/>
            <TryStep id="_2JGw" name="wait for end of process">
              <ProcessWaiter client="$(client)" id="_2JGx"/>
              <CatchSequence exception="TestException" id="_2JGy" maxerror="0"
                             name="process not terminated">
                <ClientStopper client="$(client)" id="_2JGz"/>
                <ProcessWaiter client="$(client)" id="_2JG+"/>
              </CatchSequence>
            </TryStep>
            <CatchSequence exception="ClientNotConnectedException" id="_2JG-"
                           maxerror="0"/>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_2JI2" name="win">
      <Package id="_2JI3" name="startStop">
        <comment>Package for starting and stopping the SUT.</comment>
        <Procedure id="_2JI4" name="start">
          <comment>Startet SUT.</comment>
          <SetGlobalStep id="_1xv5" varname="client">
            <default>carconfigWPF</default>
          </SetGlobalStep>
          <TryStep id="_1xuj">
            <ClientWaiter client="$(client)" id="_1xuk" timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1xul"
                           maxerror="0">
              <WinClientStarter class="de.qfs.apps.qfwin.QFWin"
                                client="$(client)" id="_1xx0"
                                windowsprogram="${qftest:dir.version}/demo/carConfigWpf/CarConfigWpf.exe">
                <parameter>-lang</parameter>
                <parameter>en</parameter>
              </WinClientStarter>
              <ClientWaiter client="$(client)" id="_1xuw" timeout="30000"/>
              <ClientScriptStep client="$(client)" id="_Q"
                                name="Change the generic class of the system buttons &#34;Minimize&#34;, &#34;Maximize&#34;, &#34;Close&#34;, so the index of the Carconfigurator buttons is the same for all technologies">
                <code>def getGenericClassName(comp, cl):
    uiaId = comp.getUiaId()
    if uiaId in ["Minimize", "Maximize", "Close"]:
        return "ToggleButton"

resolvers.addResolver("SystemToggleButtons", getGenericClassName, "Uia.Button")</code>
              </ClientScriptStep>
            </CatchSequence>
          </TryStep>
        </Procedure>
        <Procedure id="_2JKL" name="stop">
          <comment>Close the application.</comment>
          <TryStep id="_2JKM" name="SUT still running?">
            <ClientWaiter client="$(client)" id="_2JKN" timeout="500"/>
            <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                            event="MOUSE_MPRC" id="_2JKP" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)" component="#miExit"
                            event="MOUSE_MPRC" id="_2JKQ" modifiers="16"/>
            <TryStep id="_2JKR" name="wait for end of process">
              <ProcessWaiter client="$(client)" id="_2JKS"/>
              <CatchSequence exception="TestException" id="_2JKT" maxerror="0"
                             name="process not terminated">
                <ClientStopper client="$(client)" id="_2JKU"/>
                <ProcessWaiter client="$(client)" id="_2JKV"/>
              </CatchSequence>
            </TryStep>
            <CatchSequence exception="ClientNotConnectedException" id="_2JKW"
                           maxerror="0"/>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_2JH1" name="web">
      <comment>Package for starting and stopping the SUT.</comment>
      <Package id="_2JHn" name="startStop">
        <Procedure id="_2JK2" name="start">
          <variable name="connectionMode">Prefer QF-Driver</variable>
          <variable name="useConnectorLoader">False</variable>
          <comment>Start the SUT.

@param	connectionMode	Specifies the connection mode to the browser. This parameter is used to enforce a WebDriver browser for the Selenium demo test cases.
@param	useConnectorLoader	Enforces the start of the web engine within a dedicated classloader, which allows to manipulate the additional classpath of a unittest step without the need of an engine restart.
</comment>
          <IfSequence id="_1pHi" name="Find the best browser"
                      test="&#34;$(browsername)&#34;==&#34;&#34;">
            <ProcedureCall id="_1pIL" local="true"
                           procedure="qfs.web.browser.general.getBestBrowser"
                           retvarname="browser">
              <variable name="browserDir">$(browserdir)</variable>
              <variable name="connectionMode">$(connectionMode)</variable>
            </ProcedureCall>
            <ElseSequence id="_1pIM">
              <SetGlobalStep id="_3in" local="true" varname="browser">
                <default>$(browsername)</default>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
          <BasicSequence id="_5ZZ" name="Start web engine">
            <ServerScriptStep id="_2JK4"
                              name="Set option to start web engine in special classloader">
              <code>rc.setOption(Options.OPT_WEB_USE_CONNECTOR_LOADER,rc.getBool("useConnectorLoader"))</code>
            </ServerScriptStep>
            <BrowserClientStarter browser="$(browser)" client="$(client)"
                                  connectionmode="$(connectionMode)"
                                  executable="${qftest:java}" id="_5Za"
                                  mozhome="$(browserdir)" openwindow="false">
              <comment>Open language specific webdemo page.</comment>
            </BrowserClientStarter>
            <ClientWaiter client="$(client)" id="_5Zb"/>
          </BasicSequence>
          <BasicSequence id="_5Zc" name="Perform browser settings">
            <ProcedureCall id="_5Zd"
                           procedure="qfs.qft#qfs.web.browser.settings.doStartupSettings">
              <variable name="client">$(client)</variable>
              <variable name="browser">$(browser)</variable>
              <variable name="browserdir">$(browserdir)</variable>
              <variable name="emptyCache">true</variable>
              <variable name="enableCookies">true</variable>
              <variable name="deleteCookies">true</variable>
              <variable name="locale">${system:user.language}</variable>
            </ProcedureCall>
          </BasicSequence>
          <BasicSequence id="_5Ze" name="Open browser window">
            <BrowserClientStarter browser="$(browser)" client="$(client)"
                                  executable="${qftest:java}" id="_5Zf"
                                  openwindow="true"
                                  url="file://${qftest:dir.version}/demo/carconfigWeb/html/CarConfig.htm?lang=en"/>
            <DocumentWaiter client="$(client)" component="genericDocument"
                            id="_5Zg" timeout="60000"/>
          </BasicSequence>
          <TestStep id="_6tA" name="CustomWebResolver registrieren">
            <ProcedureCall id="_6tB"
                           procedure="qfs.web.ajax.installCustomWebResolver">
              <variable name="resolver">custom</variable>
              <variable name="version"/>
              <variable name="genericClasses">button=Button,
textfield=TextField,
editable=TextField,
label_icon=Label,
label=Label,
menusubitem=MenuItem,
menuitem=MenuItem,
ui-dialog-title=Label:WindowTitle,
ui-dialog-titlebar-close=Closer:WindowCloser,
tree=Tree,
treenode=TreeNode,
treetoggler=Expander:TreeNodeExpander,
treenodespacer=Spacer:TreeNodeSpacer,
dataTable=Table,
dataRow=TableRow,
dataCell=TableCell,
headerRow=TableHeader,
headerCell=TableHeaderCell,
ui-tabs=TabPanel,
TabItem=Item:TabPanelItem,
ui-tabs-panel=Panel:TabPanelContent,
ui-accordion=Accordion,
ui-accordion-header=Item:AccordionItem,
ui-accordion-content=Panel:AccordionContent,
ui-dialog=Window:Dialog,
ui-dialog-buttonpane=Panel,
ui-dialog-content=Panel,
panel=Panel,</variable>
              <variable name="attributesToGenericClasses">id=MenuBar=Menu:MenuBar</variable>
              <variable name="ignoreTags">CENTER,
DIV,
UL@::parent=MenuItem,
ui-dialog-buttonset</variable>
              <variable name="tagsToGenericClasses"/>
              <variable name="ignoreByAttributes"/>
              <variable name="autoIdPatterns"/>
              <variable name="customIdAttributes"/>
              <variable name="interestingByAttributes"/>
              <variable name="attributesToQftFeature"/>
              <variable name="documentJS"/>
            </ProcedureCall>
            <ClientScriptStep client="$(client)" id="_6tC"
                              name="NameResolver fuer Buttons and Panels">
              <code>def getName(node, name):
    theName = node.getAttribute("qft-id")
    if theName:
        return theName

resolvers.addNameResolver2("btnResolver", getName, "Button")
resolvers.addNameResolver2("panelResolver", getName, "Panel")</code>
            </ClientScriptStep>
          </TestStep>
          <ComponentWaiter client="$(client)" component="#File" id="_2JK5"/>
        </Procedure>
        <Procedure id="_2JK6" name="stop">
          <comment>Terminate the SUT.</comment>
          <TryStep id="_2JK7" name="already stopped? ">
            <ProcessWaiter client="$(client)" id="_2JK8" timeout="1"/>
            <CatchSequence exception="ClientNotTerminatedException" id="_3e3"
                           maxerror="0" name="not stopped -&gt; stop it">
              <TryStep id="_2JK9" name="Close browser window">
                <WindowEventStep client="$(client)" component="#Window:"
                                 event="WINDOW_CLOSING" id="_3e4"/>
                <ProcessWaiter client="$(client)" id="_3e5"/>
                <CatchSequence exception="TestException" id="_3e6"
                               maxerror="0"
                               name="Couldn't close browser window -&gt; kill process">
                  <ClientStopper client="$(client)" id="_3e7"/>
                  <ProcessWaiter client="$(client)" id="_3e8"/>
                </CatchSequence>
              </TryStep>
            </CatchSequence>
            <FinallySequence id="_2JKA" name="Reset server options">
              <ServerScriptStep id="_2JKB"
                                name="Reset option to start web engine in special classloader">
                <code>rc.unsetOption(Options.OPT_WEB_USE_CONNECTOR_LOADER)</code>
              </ServerScriptStep>
            </FinallySequence>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
  </PackageRoot>
  <ExtraSequence id="_5y">
    <SelectionEventStep client="$(client)" component="#SpecialsCombo@Jazz"
                        detail="0" event="SELECTION" id="_2JIT"/>
  </ExtraSequence>
  <CommentStep id="_2JG8">
    <heading>&lt;font style="color:blue"&gt;Note: &lt;font style="color:green"&gt;The present test-suite does not contain any component nodes.</heading>
  </CommentStep>
  <CommentStep id="_2JGi">
    <heading>&lt;font style="color:green"&gt;The functionality "Highlight component" is available as usual,</heading>
  </CommentStep>
  <CommentStep id="_2JJe">
    <heading>&lt;font style="color:green"&gt;The functionality "Locate component" will not work as no associated component node exists.</heading>
  </CommentStep>
  <WindowList id="_61"/>
</RootStep>
