<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root"
          signature="302D02144B82BC6EE73EF80BC529C525BCB769DB9A526327021500AF30737700C84B940A877DDD27E73DF1732994F4"
          version="6.0.3">
  <include>qfs.qft</include>
  <reference>qfs.qft</reference>
  <variable name="browsername"/>
  <variable name="browserdir"/>
  <comment>@author	QFS</comment>
  <CommentStep id="_2JGg">
    <heading>&lt;font style="color:green"&gt;In dieser Demo Testsuite wird die &lt;b&gt;Verwendung von SmartIDs&lt;/b&gt; an Hand</heading>
  </CommentStep>
  <CommentStep id="_2JGh">
    <heading>&lt;font style="color:green"&gt;der mitgelieferten Anwendung "CarConfigurator" gezeigt. </heading>
  </CommentStep>
  <CommentStep id="_2JJ7">
    <heading>&lt;font style="color:green"&gt;SmartIDs enthalten direkt die Wiedererkennungsmerkmale der angesprochenen Komponente.</heading>
  </CommentStep>
  <CommentStep id="_2JJA">
    <heading>&lt;font style="color:green"&gt;Dies bedeutet, dass die vorliegende Testsuite &lt;b&gt;keine Komponentenknoten&lt;/b&gt;</heading>
  </CommentStep>
  <CommentStep id="_2JJ8">
    <heading>&lt;font style="color:green"&gt;in "Fenster und Komponenten" enthält!</heading>
  </CommentStep>
  <CommentStep id="_2JJ9">
    <heading>&lt;font style="color:green"&gt;Außerdem zeigt die Testsuite, dass die Testfälle ohne Anpassungen auf </heading>
  </CommentStep>
  <CommentStep id="_2JJB">
    <heading>&lt;font style="color:green"&gt;&lt;b&gt;unterschiedlichen Technologien&lt;/b&gt; (hier Java AWT, Java FX, Web und Windows) ausgeführt werden können.</heading>
  </CommentStep>
  <TestSet id="_3DV" name="CarConfigurator Demo">
    <DependencyReference id="_3DW"
                         reference="dependencies.SUT_Gestartet_Zurückgesetzt"/>
    <DataDriver id="_2JH2" loopreportname="Testausführung für $(engine)"
                name="Tests auf unterschiedlichen Technologien ausführen">
      <CommentStep id="_2JJ1">
        <heading>&lt;font style="color:green"&gt;Der gleiche Test kann in unterschiedlichen Umgebungen ausgeführt werden </heading>
      </CommentStep>
      <CommentStep id="_2JJ2">
        <heading>&lt;font style="color:green"&gt;nur der Start ist unterschiedlich für die einzelne Engines</heading>
      </CommentStep>
      <IfSequence id="_2JKi"
                  name="Datentreiber für Demos mit unterschiedlichen Technologien (Win demo nicht auf Unix ausführbar)"
                  test="${qftest:windows}">
        <TableDataBinder id="_2JKj" intervals="${default:iterEngine:}"
                         name="engines">
          <TableBinderColumn title="engine" width="638">
            <data>awt</data>
            <data>fx</data>
            <data>web</data>
            <data>win</data>
          </TableBinderColumn>
        </TableDataBinder>
        <ElseSequence id="_2JKk" name="Unix - kein Win Demo">
          <TableDataBinder id="_2JKl" intervals="${default:iterEngine:}"
                           name="engines">
            <TableBinderColumn title="engine" width="571">
              <data>awt</data>
              <data>fx</data>
              <data>web</data>
            </TableBinderColumn>
          </TableDataBinder>
        </ElseSequence>
      </IfSequence>
    </DataDriver>
    <TestSet id="_3DY" name="Preise prüfen">
      <variable name="engine">awt</variable>
      <comment>Überprüfen der Preise ohne Zubehör.</comment>
      <DataDriver id="_3DZ">
        <CommentStep id="_2JJv">
          <heading>Standardmäßig Iteration auf den ersten Datensatz beschränken</heading>
        </CommentStep>
        <TableDataBinder id="_3Da" intervals="${default:iterItem:0}"
                         name="Modelle und Preise">
          <TableBinderColumn title="refModell" width="319">
            <data>Rolo</data>
            <data>Minigolf</data>
            <data>Rassant</data>
            <data>Rassant Family</data>
            <data>I5</data>
          </TableBinderColumn>
          <TableBinderColumn title="refPreis" width="319">
            <data>(EUR)?( )?12.300.00( &#8364;)?</data>
            <data>(EUR)?( )?15.000.00( &#8364;)?</data>
            <data>(EUR)?( )?17.000.00( &#8364;)?</data>
            <data>(EUR)?( )?18.500.00( &#8364;)?</data>
            <data>(EUR)?( )?29.000.00( &#8364;)?</data>
          </TableBinderColumn>
        </TableDataBinder>
      </DataDriver>
      <TestCase id="_3Db"
                name="Preise prüfen - Beispiele für allgemeine SmartID-Syntax">
        <fallback name="engine">awt</fallback>
        <variable name="index"/>
        <CommentStep id="_2JJD">
          <heading>&lt;font style="color:green"&gt;Eine SmartID besteht aus einem &lt;b&gt;#&lt;/b&gt; am Anfang und mindestens einem Erkennungsmerkmal:</heading>
        </CommentStep>
        <CommentStep id="_2JJK">
          <heading>&lt;font style="color:green"&gt;Hier dem Komponentennamen ...</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3Dg" modifiers="16"/>
        <CommentStep id="_2JJL">
          <heading>&lt;font style="color:green"&gt;und hier der Beschriftung.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Fahrzeuge..." event="MOUSE_MPRC" id="_3Dh"
                        modifiers="16"/>
        <CommentStep id="_2JJM">
          <heading>&lt;font style="color:green"&gt;Die Beschriftung entspricht entweder dem Merkmalattribut</heading>
        </CommentStep>
        <CommentStep id="_2JJN">
          <heading>&lt;font style="color:green"&gt;und/oder dem weiteren Merkmal "qfs:label" einer aufgenommenen Komponente.</heading>
        </CommentStep>
        <ComponentWaiter client="$(client)" component="#VehiclesTable"
                         id="_3Di"/>
        <CommentStep id="_2JJF">
          <heading>&lt;font style="color:green"&gt;Die Tabelle wird hier über die Klasse angesprochen.</heading>
        </CommentStep>
        <CommentStep id="_2JJS">
          <heading>&lt;font style="color:green"&gt;Nach der Klasse muss ein Doppelpunkt folgen.</heading>
        </CommentStep>
        <CommentStep id="_2JIh">
          <heading>&lt;font style="color:green"&gt;Zellen in der Tabelle werden wie gewohnt indiziert. </heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Table:&amp;0@$(refModell)"
                        event="MOUSE_MPRC" id="_2JJE" modifiers="16"/>
        <CheckStringStep client="$(client)" component="#VehiclePrice"
                         id="_2JKh" regexp="true">
          <text>$(refPreis)</text>
        </CheckStringStep>
        <CommentStep id="_2JJT">
          <heading>&lt;font style="color:green"&gt;Die Hierarchie von Komponenten kann über aneinandergereihte SmartIDs abgebildet werden.</heading>
        </CommentStep>
        <CommentStep id="_2JJU">
          <heading>&lt;font style="color:green"&gt;Zwischen den einzelnen SmartIDs ist das Verbingungszeichen &lt;b&gt;@&lt;/b&gt;</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehiclesDialog@#OK" event="MOUSE_MPRC"
                        id="_3Dl" modifiers="16"/>
        <CommentStep id="_2JJV">
          <heading>&lt;font style="color:green"&gt;Erkennungskriterien können auch kombiniert werden:</heading>
        </CommentStep>
        <CommentStep id="_2JJW">
          <heading>&lt;font style="color:green"&gt;wobei die Klasse als erstes genannt werden muss, abgeschlossen vom Doppelpunkt,</heading>
        </CommentStep>
        <CommentStep id="_2JJX">
          <heading>&lt;font style="color:green"&gt;danach entweder Komponentenname oder Beschriftung.</heading>
        </CommentStep>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JIE"
                         timeout="1000"/>
      </TestCase>
    </TestSet>
    <TestCase id="_3Dn"
              name="Änderungen Fahrzeug - Beispiele für SmartIDs mit Index beziehungsweise regulärem Ausdruck">
      <fallback name="engine">awt</fallback>
      <BasicSequence id="_3Do" name="Neuanlage - SmartID-Beispiele mit Index">
        <ProcedureCall id="_2JJ4" procedure="menü.fahrzeuge dialog"/>
        <TextInputStep clear="true" client="$(client)"
                       component="#VehicleName" id="_3Dt" single="false">
          <text>Test</text>
        </TextInputStep>
        <IfSequence id="_2JJ0" test="&#34;$(engine)&#34; == &#34;web&#34;">
          <TextInputStep clear="true" client="$(client)"
                         component="#VehicleId" id="_2JIp" single="false">
            <text>M6</text>
          </TextInputStep>
        </IfSequence>
        <TextInputStep clear="true" client="$(client)"
                       component="#VehiclePrice" id="_3Dv" single="false">
          <text>9999</text>
        </TextInputStep>
        <CommentStep id="_2JJP">
          <heading>&lt;font style="color:green"&gt;Wenn eine SmartID für mehrere Komponenten gültig ist,</heading>
        </CommentStep>
        <CommentStep id="_2JJO">
          <heading>&lt;font style="color:green"&gt;kann ein Index in spitzen Klammer genutzt werden:</heading>
        </CommentStep>
        <CommentStep id="_2JJa">
          <heading>&lt;font style="color:green"&gt;Der Button "Neu" hat den Index 0.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Button:&lt;0&gt;" event="MOUSE_MPRC"
                        id="_3Dw" modifiers="16"/>
        <IfSequence id="_2JJ+"
                    name="Der Button &#34;OK&#34; hat den Index 3 beim web-Demo, ansonsten 4."
                    test="&#34;$(engine)&#34; == &#34;web&#34;">
          <SetGlobalStep id="_2JK0" local="true" varname="okButtonIndex">
            <default>3</default>
          </SetGlobalStep>
          <ElseSequence id="_2JJ-">
            <SetGlobalStep id="_2JJz" local="true" varname="okButtonIndex">
              <default>4</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <CommentStep id="_2JJc">
          <heading>&lt;font style="color:green"&gt;Der Index kann auch mit kombinierten Erkennungskriterien verwendet werden.</heading>
        </CommentStep>
        <CommentStep id="_2JK1">
          <heading>&lt;font style="color:green"&gt;Für die Erkennungskriterien inkl. Index können Variablen verwendet werden</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#Button:&lt;$(okButtonIndex)&gt;"
                        event="MOUSE_MPRC" id="_3EE" modifiers="16"/>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_1p6y"
                         timeout="8000"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehicleTable@Modell&amp;-1"
                        event="MOUSE_MPRC" id="_3Fh" modifiers="16"/>
        <CheckStringStep client="$(client)" component="#CalculatedPrice"
                         id="_3Dz" regexp="true" timeout="2000">
          <text>(EUR)?9.999.00( &#8364;)?</text>
        </CheckStringStep>
      </BasicSequence>
      <BasicSequence id="_3D+" name="Ändern">
        <CommentStep id="_2JKE">
          <heading>&lt;font style="color:green"&gt;Ein Scope grenzt die Komponentensuche auf Unterelemente der angebenen Container-Komponente ein</heading>
        </CommentStep>
        <CommentStep id="_2JIj">
          <heading>&lt;font style="color:green"&gt;Bei Öffnen eines Dialogs wird der Scope (Arbeitsbereich)</heading>
        </CommentStep>
        <CommentStep id="_2JIk">
          <heading>&lt;font style="color:green"&gt;implizit auf den Dialog gesetzt</heading>
        </CommentStep>
        <CommentStep id="_2JJ5">
          <heading>&lt;font style="color:green"&gt;alternativ kann die ganze Hierarchie der Komponente angegeben werden</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3D-" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#miVehicles"
                        event="MOUSE_MPRC" id="_3E0" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="#VehiclesDialog"
                         id="_3E1"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehiclesTable&amp;0&amp;5"
                        event="MOUSE_MPRC" id="_3E2" modifiers="16"/>
        <TextInputStep clear="true" client="$(client)"
                       component="#VehiclePrice" id="_3E4" single="false">
          <text>7000</text>
        </TextInputStep>
        <MouseEventStep clicks="1" client="$(client)" component="#Ändern"
                        event="MOUSE_MPRC" id="_3E5" modifiers="16"/>
        <CheckStringStep client="$(client)"
                         component="#VehiclesTable&amp;2&amp;5" id="_3E6"
                         regexp="true" timeout="5000">
          <text>(EUR)?7.000.00( &#8364;)?</text>
        </CheckStringStep>
        <MouseEventStep clicks="1" client="$(client)" component="#OK"
                        event="MOUSE_MPRC" id="_3E7" modifiers="16"/>
        <CommentStep id="_2JIl">
          <heading>&lt;font style="color:green"&gt;Bei Schließen eines Dialogs wird der Scope (Arbeitsbereich)</heading>
        </CommentStep>
        <CommentStep id="_2JIm">
          <heading>&lt;font style="color:green"&gt;automatisch zurückgesetzt</heading>
        </CommentStep>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JJd"
                         timeout="8000"/>
      </BasicSequence>
      <BasicSequence id="_3E8"
                     name="Löschen - SmartID-Beispiele mit regulärem Ausdruck">
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3E9" modifiers="16"/>
        <CommentStep id="_2JJg">
          <heading>&lt;font style="color:green"&gt;Für die Beschriftung oder den Komponentennamen kann ein regulärer Ausdruck eingesetzt werden.</heading>
        </CommentStep>
        <CommentStep id="_2JJh">
          <heading>&lt;font style="color:green"&gt;Hierzu wird nach dem &lt;b&gt;#&lt;/b&gt; ein Prozentzeichen &lt;b&gt;%&lt;/b&gt; eingefügt.</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#%MenuItem:Fahrzeuge.*" event="MOUSE_MPRC"
                        id="_2JJf" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="#VehiclesDialog"
                         id="_3EB"/>
        <MouseEventStep clicks="1" client="$(client)"
                        component="#VehiclesTable&amp;0&amp;5"
                        event="MOUSE_MPRC" id="_3EC" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#Löschen"
                        event="MOUSE_MPRC" id="_3ED" modifiers="16"/>
        <IfSequence id="_2JIF" name="web"
                    test="&#34;$(engine)&#34;==&#34;web&#34;">
          <CommentStep id="_2JIK">
            <heading>&lt;font style="color:green"&gt;In der Webanwendung kommt ein extra Dialog</heading>
          </CommentStep>
          <CommentStep id="_2JIJ">
            <heading>&lt;font style="color:green"&gt;um das Löschen zu bestätigen.</heading>
          </CommentStep>
          <SelectionEventStep client="$(client)" component="#Dialog:"
                              detail="OK" event="SELECTION" id="_2JIH"/>
        </IfSequence>
        <MouseEventStep clicks="1" client="$(client)" component="#OK"
                        event="MOUSE_MPRC" id="_3Dx" modifiers="16"/>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JID"/>
        <CommentStep id="_2JJi"/>
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_2JJl" modifiers="16"/>
        <CommentStep id="_2JJj">
          <heading>&lt;font style="color:green"&gt;Wenn die SmartID Sonderzeichen aus regulären Ausdrücken enthält,</heading>
        </CommentStep>
        <CommentStep id="_2JJk">
          <heading>&lt;font style="color:green"&gt;müssen diese mit Backslashes \ geschützt werden</heading>
        </CommentStep>
        <MouseEventStep clicks="1" client="$(client)" component="#%F.*\.\.\."
                        event="MOUSE_MPRC" id="_2JJo" modifiers="16"/>
        <CommentStep id="_2JJs">
          <heading>&lt;font style="color:green"&gt;Der reguläre Ausdruck bezieht sich nicht auf die Klasse.</heading>
        </CommentStep>
        <ComponentWaiter client="$(client)" component="#%Window:V.*"
                         id="_2JJp"/>
        <MouseEventStep clicks="1" client="$(client)" component="#Abbrechen"
                        event="MOUSE_MPRC" id="_2JJq" modifiers="16"/>
        <ComponentWaiter absence="true" client="$(client)"
                         component="#Window:VehiclesDialog" id="_2JJr"/>
      </BasicSequence>
    </TestCase>
    <TestCase id="_3EG"
              name="SmartID-Beispiele mit spezieller Syntax für Tabs und ComboBoxen">
      <comment>Dieser Testfall prüft, ob die Preise eines Zubehörs bereits in die Kalkulation des Preises eines Sondermodell eingerechnet werden.
Zusätzlich wird diese Prüfung für jedes Sondermodell und jedes Fahrzeug ausgeführt, um die Anwendung von Schleifen zu demonstrieren.

Testschritte:
Es wird ein Fahrzeug ausgewählt.
Hierzu wird ein Sondermodell ausgewählt.
Der Endpreis wird gespeichert.
Danach werden die entsprechenden Zubehörteile ausgewählt.
Bei richtiger Funktionalität sollte sich der Endpreis nicht geändert haben, weil die Preise des Zubehörs bereits Teil des Sondermodells sind.
Dieser Vorgang wird für jedes Sondermodell und jedes Fahrzeug wiederholt.</comment>
      <CommentStep id="_2JIg">
        <heading>&lt;font style="color:green"&gt;Für Tabpanels gibt es bei SmartIDs die verkürzte Klasse &lt;b&gt;Tab&lt;/b&gt;,  </heading>
      </CommentStep>
      <CommentStep id="_2JJu">
        <heading>&lt;font style="color:green"&gt;so dass Reiter über &lt;b&gt;#Tab:&lt;i&gt;Reitertext&lt;/i&gt;&lt;/b&gt; angesprochen werden können</heading>
      </CommentStep>
      <MouseEventStep clicks="1" client="$(client)"
                      component="#Tab:Sondermodelle" event="MOUSE_MPRC"
                      id="_3Fk" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="#ComboBox:"
                      event="MOUSE_MPRC" id="_2JJw" modifiers="16"/>
      <CommentStep id="_2JJx">
        <heading>&lt;font style="color:green"&gt;Die Einträge in der Drop-down-Liste können klassisch über &lt;b&gt;#List:@&lt;i&gt;Text des Eintrags&lt;/i&gt;&lt;/b&gt;</heading>
      </CommentStep>
      <CommentStep id="_2JJy">
        <heading>&lt;font style="color:green"&gt;oder alternativ mit &lt;b&gt;#Item:&lt;i&gt;Text des Eintrags&lt;/i&gt;&lt;/b&gt; angesprochen werden</heading>
      </CommentStep>
      <MouseEventStep clicks="1" client="$(client)" component="#Item:Luxus"
                      event="MOUSE_MPRC" id="_2JJ6" modifiers="16"/>
      <MouseEventStep clicks="1" client="$(client)" component="#Tab:Fahrzeuge"
                      event="MOUSE_MPRC" id="_2JJt" modifiers="16"/>
    </TestCase>
  </TestSet>
  <PackageRoot id="_31">
    <Package id="_3Cr" name="dependencies">
      <comment>Package für die Abhängigkeiten.</comment>
      <Dependency id="_3Cs" name="SUT_Gestartet">
        <discriminator>engine</discriminator>
        <variable name="engine">awt</variable>
        <comment>Stellt sicher, dass SUT gestartet wurde.</comment>
        <SetupSequence id="_3Ac" name="SUT starten, wenn notwendig">
          <SetGlobalStep id="_1p6F" varname="client">
            <default>carconfig</default>
          </SetGlobalStep>
          <ClientWaiter client="$(client)" id="_1p6G" local="true"
                        raise="false" resvarname="isSUTRunning" timeout="1">
            <comment>Dieser Knoten prüft, ob das SUT bereits läuft. Das Ergebnis der Prüfung wird in der Variable isSUTRunning gespeichert. Diese Variable enthält entweder true, wenn das SUT läuft oder false, wenn das SUT nicht läuft. Im folgenden IF-Knoten wird diese Variable ausgewertet.</comment>
          </ClientWaiter>
          <IfSequence id="_1p6H" name="SUT starten, wenn notwendig"
                      test="not $(isSUTRunning)">
            <ProcedureCall id="_3Ad" procedure="$(engine).startStop.start"/>
            <ProcedureCall id="_2JIn" procedure="menü.neueVersion"/>
          </IfSequence>
        </SetupSequence>
        <CleanupSequence id="_3Cm" name="SUT schließen">
          <ProcedureCall id="_3D0" procedure="$(engine).startStop.beenden"/>
        </CleanupSequence>
      </Dependency>
      <Dependency forcedcleanup="true" id="_3Cw"
                  name="SUT_Gestartet_Zurückgesetzt">
        <comment>Stellt sicher, dass SUT gestartet und in den Ausgangszustand gesetzt wurde.
</comment>
        <DependencyReference id="_3DA"
                             reference="dependencies.SUT_Gestartet"/>
        <SetupSequence id="_3Aj" name="Reset">
          <ProcedureCall id="_3Ak" procedure="menü.zurücksetzen"/>
        </SetupSequence>
      </Dependency>
    </Package>
    <Package id="_3Fq" name="menü">
      <comment>Prozeduren für Aktionen im Menü.</comment>
      <CommentStep id="_2JGl">
        <heading>&lt;font style="color:green"&gt;Die Menüeinträge in dieser Anwendung haben eindeutige Namen,</heading>
      </CommentStep>
      <CommentStep id="_2JGm">
        <heading>&lt;font style="color:green"&gt;in den folgenden Prozeduren werden die Namen der Komponente benutzt in SmartID Format</heading>
      </CommentStep>
      <CommentStep id="_2JGn">
        <heading>&lt;font style="color:green"&gt;Dieser Teil des Tests ist unabhängig von der Sprache (Text) der UI der SUT </heading>
      </CommentStep>
      <Procedure id="_38o" name="zurücksetzen">
        <comment>Klick auf Datei -&gt; Zurücksetzen um die Ausgangssituation wiederherzustellen.
</comment>
        <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                        event="MOUSE_MPRC" id="_3A0" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#miReset"
                        event="MOUSE_MPRC" id="_38q" modifiers="16"
                        postdelay="500"/>
      </Procedure>
      <Procedure id="_2JJ3" name="fahrzeuge dialog">
        <MouseEventStep clicks="1" client="$(client)" component="#mOptions"
                        event="MOUSE_MPRC" id="_3Dp" modifiers="16"/>
        <MouseEventStep clicks="1" client="$(client)" component="#miVehicles"
                        event="MOUSE_MPRC" id="_3Dq" modifiers="16"/>
        <ComponentWaiter client="$(client)" component="#VehiclesDialog"
                         id="_3Dr"/>
      </Procedure>
      <Procedure id="_3Jj" name="neueVersion">
        <comment>Klick auf Hilfe -&gt; Neue Version um die neue Version zu öffnen.
</comment>
        <MouseEventStep clicks="1" client="$(client)" component="#mHelp"
                        event="MOUSE_MPRC" id="_3Jo" modifiers="16"/>
        <CheckBooleanStep checktype="checked" client="$(client)"
                          component="#miNewVersion" id="_2JIv"
                          resvarname="isChecked"/>
        <IfSequence id="_2JIw" test="not $(isChecked)">
          <MouseEventStep clicks="1" client="$(client)"
                          component="#miNewVersion" event="MOUSE_MPRC"
                          id="_3Jp" modifiers="16"/>
        </IfSequence>
        <CommentStep id="_2JIo">
          <heading>&lt;font style="color:green"&gt;Auch SmartIDs können reguläre Ausdrücke haben. </heading>
        </CommentStep>
        <ComponentWaiter client="$(client)" component="#%.*CarConfig.*"
                         id="_3Jq"/>
      </Procedure>
    </Package>
    <Package id="_2JGo" name="awt">
      <Package id="_3Fr" name="startStop">
        <comment>Prozeduren um die SUT zu starten bzw. zu stoppen.</comment>
        <Procedure id="_33x" name="start">
          <comment>Startet SUT.</comment>
          <IfSequence id="_33z" test="${qftest:windows}">
            <SUTClientStarter client="$(client)"
                              directory="${qftest:dir.version}/demo/carconfig"
                              executable="${qftest:dir.version}/demo/carconfig/CarConfig.cmd"
                              id="_33+">
              <parameter>de</parameter>
            </SUTClientStarter>
            <ElseSequence id="_33-">
              <SUTClientStarter client="$(client)"
                                directory="${qftest:dir.version}/demo/carconfig"
                                executable="${qftest:dir.version}/demo/carconfig/CarConfig.sh"
                                id="_3Fl">
                <parameter>de</parameter>
              </SUTClientStarter>
            </ElseSequence>
          </IfSequence>
          <ClientWaiter client="$(client)" id="_E" timeout="30000"/>
          <ComponentWaiter client="$(client)" component="#JCarConfigurator"
                           id="_3Fm" timeout="30000"/>
        </Procedure>
        <Procedure id="_3C-" name="beenden">
          <comment>Schließt das Hauptfenster.</comment>
          <TryStep id="_3DH" name="läuft SUT?">
            <ClientWaiter client="$(client)" id="_3DI" timeout="500"/>
            <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                            event="MOUSE_MPRC" id="_3Cn" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)" component="#miExit"
                            event="MOUSE_MPRC" id="_3Co" modifiers="16"/>
            <TryStep id="_3Fs" name="warten auf auf programmende">
              <ProcessWaiter client="$(client)" id="_3Cp"/>
              <CatchSequence exception="TestException" id="_3Ft" maxerror="0"
                             name="programm wurde nicht beendet">
                <ClientStopper client="$(client)" id="_3Cq"/>
                <ProcessWaiter client="$(client)" id="_3Fu"/>
              </CatchSequence>
            </TryStep>
            <CatchSequence exception="ClientNotConnectedException" id="_3DJ"
                           maxerror="0"/>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_2JH0" name="fx">
      <Package id="_2JGp" name="startStop">
        <comment>Prozeduren um die SUT zu starten bzw. zu stoppen.</comment>
        <Procedure id="_2JGq" name="start">
          <comment>Startet SUT.</comment>
          <IfSequence id="_1mi7" test="${qftest:windows}">
            <SUTClientStarter client="$(client)"
                              directory="${qftest:dir.version}/demo/carconfigFx"
                              executable="${qftest:dir.version}/demo/carconfig/CarConfig.cmd"
                              id="_1mi8">
              <parameter>de</parameter>
              <parameter>-engine</parameter>
              <parameter>fx</parameter>
            </SUTClientStarter>
            <ElseSequence id="_1mi9">
              <SUTClientStarter client="$(client)"
                                directory="${qftest:dir.version}/demo/carconfigFx"
                                executable="${qftest:dir.version}/demo/carconfig/CarConfig.sh"
                                id="_1miA">
                <parameter>de</parameter>
                <parameter>-engine</parameter>
                <parameter>fx</parameter>
              </SUTClientStarter>
            </ElseSequence>
          </IfSequence>
          <ClientWaiter client="$(client)" id="_1mgA"/>
          <ComponentWaiter client="$(client)" component="#CarConfiguratorFX"
                           id="_1mgB" timeout="60000"/>
        </Procedure>
        <Procedure id="_2JGr" name="beenden">
          <comment>Schließt das Hauptfenster.</comment>
          <TryStep id="_2JGs" name="läuft SUT?">
            <ClientWaiter client="$(client)" id="_2JGt" timeout="500"/>
            <ProcedureCall id="_3D2"
                           procedure="qfs.fx.cleanup.implicitExceptionHandler">
              <variable name="maxDialogs">5</variable>
            </ProcedureCall>
            <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                            event="MOUSE_MPRC" id="_2JGu" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)" component="#miExit"
                            event="MOUSE_MPRC" id="_2JGv" modifiers="16"/>
            <TryStep id="_2JGw" name="warten auf auf programmende">
              <ProcessWaiter client="$(client)" id="_2JGx"/>
              <CatchSequence exception="TestException" id="_2JGy" maxerror="0"
                             name="programm wurde nicht beendet">
                <ClientStopper client="$(client)" id="_2JGz"/>
                <ProcessWaiter client="$(client)" id="_2JG+"/>
              </CatchSequence>
            </TryStep>
            <CatchSequence exception="ClientNotConnectedException" id="_2JG-"
                           maxerror="0"/>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_2JI2" name="win">
      <Package id="_2JI3" name="startStop">
        <comment>Prozeduren um die SUT zu starten bzw. zu stoppen.</comment>
        <Procedure id="_2JI4" name="start">
          <comment>Startet SUT.</comment>
          <SetGlobalStep id="_1xv5" varname="client">
            <default>carconfigWPF</default>
          </SetGlobalStep>
          <TryStep id="_1xuj">
            <ClientWaiter client="$(client)" id="_1xuk" timeout="0"/>
            <CatchSequence exception="ClientNotConnectedException" id="_1xul"
                           maxerror="0">
              <WinClientStarter class="de.qfs.apps.qfwin.QFWin"
                                client="$(client)" id="_1xx0"
                                windowsprogram="${qftest:dir.version}/demo/carConfigWpf/CarConfigWpf.exe">
                <parameter>-lang</parameter>
                <parameter>de</parameter>
              </WinClientStarter>
              <ClientWaiter client="$(client)" id="_1xuw" timeout="30000"/>
              <ClientScriptStep client="$(client)" id="_Q"
                                name="Generische Klasse der System-buttons &#34;Minimize&#34;, &#34;Maximize&#34;, &#34;Close&#34; ändern, so dass der Index der eigentlichen Carconfigurator Buttons für alle Technologien der gleiche ist">
                <code>def getGenericClassName(comp, cl):
    uiaId = comp.getUiaId()
    if uiaId in ["Minimize", "Maximize", "Close"]:
        return "ToggleButton"

resolvers.addResolver("SystemToggleButtons", getGenericClassName, "Uia.Button")</code>
              </ClientScriptStep>
            </CatchSequence>
          </TryStep>
        </Procedure>
        <Procedure id="_2JK2" name="beenden">
          <comment>Schließt das Hauptfenster.</comment>
          <TryStep id="_2JK3" name="läuft SUT?">
            <ClientWaiter client="$(client)" id="_2JK4" timeout="500"/>
            <MouseEventStep clicks="1" client="$(client)" component="#mFile"
                            event="MOUSE_MPRC" id="_2JK6" modifiers="16"/>
            <MouseEventStep clicks="1" client="$(client)" component="#miExit"
                            event="MOUSE_MPRC" id="_2JK7" modifiers="16"/>
            <TryStep id="_2JK8" name="warten auf auf programmende">
              <ProcessWaiter client="$(client)" id="_2JK9"/>
              <CatchSequence exception="TestException" id="_2JKA" maxerror="0"
                             name="programm wurde nicht beendet">
                <ClientStopper client="$(client)" id="_2JKB"/>
                <ProcessWaiter client="$(client)" id="_2JKC"/>
              </CatchSequence>
            </TryStep>
            <CatchSequence exception="ClientNotConnectedException" id="_2JKD"
                           maxerror="0"/>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
    <Package id="_2JH1" name="web">
      <comment>Prozeduren um die SUT zu starten bzw. zu stoppen.</comment>
      <Package id="_2JHn" name="startStop">
        <Procedure id="_3N6" name="start">
          <variable name="connectionMode">Prefer QF-Driver</variable>
          <variable name="useConnectorLoader">False</variable>
          <comment>Startet den Browser und öffnet die Webseite.

@param	connectionMode	Gibt den von QF-Test zu verwendenden Verbindungsmodus für den Browser an. Dieser Parameter ist erforderlich um für die Selenium Demotestfälle den WebDriver Verbindungsmodus zu erzwingen.
@param	useConnectorLoader	Erzwingt das Starten der Web-Engine in einem speziellen Classloader, der es erlaubt, zusätzliche Klassen-Pfade im Unittest-Schritt während der Laufzeit der Engine zu verändern.</comment>
          <IfSequence id="_1pHi" name="Besten Browser bestimmen"
                      test="&#34;$(browsername)&#34;==&#34;&#34;">
            <ProcedureCall id="_1pIL" local="true"
                           procedure="qfs.web.browser.general.getBestBrowser"
                           retvarname="browser">
              <variable name="browserDir">$(browserdir)</variable>
              <variable name="connectionMode">$(connectionMode)</variable>
            </ProcedureCall>
            <ElseSequence id="_1pIM">
              <SetGlobalStep id="_3in" local="true" varname="browser">
                <default>$(browsername)</default>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
          <BasicSequence id="_3NC" name="Web-Engine starten">
            <ServerScriptStep id="_1pGg"
                              name="Option zum Start der Web-Engine mit speziellem Classloader setzen">
              <code>rc.setOption(Options.OPT_WEB_USE_CONNECTOR_LOADER,rc.getBool("useConnectorLoader"))</code>
            </ServerScriptStep>
            <BrowserClientStarter browser="$(browser)" client="$(client)"
                                  connectionmode="$(connectionMode)"
                                  executable="${qftest:java}" id="_3ND"
                                  mozhome="$(browserdir)" openwindow="false"/>
            <ClientWaiter client="$(client)" id="_3NE"/>
          </BasicSequence>
          <BasicSequence id="_3NF" name="Einstellungen für Browser setzen">
            <ProcedureCall id="_3NG"
                           procedure="qfs.qft#qfs.web.browser.settings.doStartupSettings">
              <variable name="client">$(client)</variable>
              <variable name="browser">$(browser)</variable>
              <variable name="browserdir">$(browserdir)</variable>
              <variable name="emptyCache">true</variable>
              <variable name="enableCookies">true</variable>
              <variable name="deleteCookies">true</variable>
              <variable name="locale">${system:user.language}</variable>
            </ProcedureCall>
          </BasicSequence>
          <BasicSequence id="_3NH" name="Browser-Fenster öffnen">
            <BrowserClientStarter browser="$(browser)" client="$(client)"
                                  executable="${qftest:java}" id="_3NI"
                                  openwindow="true"
                                  url="file://${qftest:dir.version}/demo/carconfigWeb/html/CarConfig.htm?lang=de"/>
            <DocumentWaiter client="$(client)" component="genericDocument"
                            id="_3NJ" timeout="60000"/>
          </BasicSequence>
          <ComponentWaiter client="$(client)" component="#mFile_menu"
                           id="_3iK"/>
          <TestStep id="_6tA" name="CustomWebResolver registrieren">
            <ProcedureCall id="_6tB"
                           procedure="qfs.web.ajax.installCustomWebResolver">
              <variable name="resolver">custom</variable>
              <variable name="version"/>
              <variable name="genericClasses">button=Button,
textfield=TextField,
editable=TextField,
label_icon=Label,
label=Label,
menusubitem=MenuItem,
menuitem=MenuItem,
ui-dialog-title=Label:WindowTitle,
ui-dialog-titlebar-close=Closer:WindowCloser,
tree=Tree,
treenode=TreeNode,
treetoggler=Expander:TreeNodeExpander,
treenodespacer=Spacer:TreeNodeSpacer,
dataTable=Table,
dataRow=TableRow,
dataCell=TableCell,
headerRow=TableHeader,
headerCell=TableHeaderCell,
ui-tabs=TabPanel,
TabItem=Item:TabPanelItem,
ui-tabs-panel=Panel:TabPanelContent,
ui-accordion=Accordion,
ui-accordion-header=Item:AccordionItem,
ui-accordion-content=Panel:AccordionContent,
ui-dialog=Window:Dialog,
ui-dialog-buttonpane=Panel,
ui-dialog-content=Panel,
panel=Panel,</variable>
              <variable name="attributesToGenericClasses">id=MenuBar=Menu:MenuBar</variable>
              <variable name="ignoreTags">CENTER,
DIV,
UL@::parent=MenuItem,
ui-dialog-buttonset</variable>
              <variable name="tagsToGenericClasses"/>
              <variable name="ignoreByAttributes"/>
              <variable name="autoIdPatterns"/>
              <variable name="customIdAttributes"/>
              <variable name="interestingByAttributes"/>
              <variable name="attributesToQftFeature"/>
              <variable name="documentJS"/>
            </ProcedureCall>
            <ClientScriptStep client="$(client)" id="_6tC"
                              name="NameResolver fuer Buttons and Panels">
              <code>def getName(node, name):
    theName = node.getAttribute("qft-id")
    if theName:
        return theName

resolvers.addNameResolver2("btnResolver", getName, "Button")
resolvers.addNameResolver2("panelResolver", getName, "Panel")</code>
            </ClientScriptStep>
          </TestStep>
        </Procedure>
        <Procedure id="_3dg" name="beenden">
          <comment>Schließt den Browser.</comment>
          <TryStep id="_3dl" name="bereits beendet? ">
            <ProcessWaiter client="$(client)" id="_3dk" timeout="1"/>
            <CatchSequence exception="ClientNotTerminatedException" id="_3dm"
                           maxerror="0"
                           name="noch nicht beendet -&gt; beenden">
              <TryStep id="_3dz" name="Browserfenster schließen">
                <WindowEventStep client="$(client)" component="CarConfig"
                                 event="WINDOW_CLOSING" id="_3do"/>
                <ProcessWaiter client="$(client)" id="_3dp"/>
                <CatchSequence exception="TestException" id="_3d+"
                               maxerror="0"
                               name="Browserfenster konnte nicht geschlossen werden -&gt; Prozess beenden">
                  <ClientStopper client="$(client)" id="_3e0"/>
                  <ProcessWaiter client="$(client)" id="_3d-"/>
                </CatchSequence>
              </TryStep>
            </CatchSequence>
            <FinallySequence id="_1pGe" name="Server-Optionen zurücksetzen">
              <ServerScriptStep id="_1pGf"
                                name="Option zum Start der Web-Engine mit speziellem Classloader aufheben">
                <code>rc.unsetOption(Options.OPT_WEB_USE_CONNECTOR_LOADER)</code>
              </ServerScriptStep>
            </FinallySequence>
          </TryStep>
        </Procedure>
      </Package>
    </Package>
  </PackageRoot>
  <ExtraSequence id="_5y">
    <SelectionEventStep client="$(client)" component="#SpecialsCombo@Jazz"
                        detail="0" event="SELECTION" id="_2JIT"/>
  </ExtraSequence>
  <CommentStep id="_2JG8">
    <heading>&lt;font style="color:blue"&gt;Hinweis: &lt;font style="color:green"&gt;Fenster und Komponente sind in dieser Suite nicht vorhanden.</heading>
  </CommentStep>
  <CommentStep id="_2JGi">
    <heading>&lt;font style="color:green"&gt;Das Hervorheben der Komponente funkioniert weiterhin,</heading>
  </CommentStep>
  <CommentStep id="_2JJe">
    <heading>&lt;font style="color:green"&gt;die Funktion "Komponente finden" ist jedoch hinfällig, da es keinen zugehörigen Komponentenknoten gibt.</heading>
  </CommentStep>
  <WindowList id="_61"/>
</RootStep>
