<!-- ........................................................................
     QFS Test Report 1.0 DTD

     Copyright 2002 Quality First Software GmbH
         All Rights Reserved.

     Permission to use, copy, modify and distribute the Test Report 1.0 DTD
     and its accompanying documentation for any purpose and without fee is
     hereby granted in perpetuity, provided that the above copyright notice
     and this paragraph appear in all copies.  The copyright holders make no
     representation about the suitability of the DTD for any purpose.

     It is provided "as is" without expressed or implied warranty.
......................................................................... -->

<!-- This is the driver file for version 1.0 of the Report DTD.

     Please use this formal public identifier to identify it:

     "-//QFS//DTD Test Report 1.0//EN"
-->
<!ENTITY % Report.version "-//QFS//DTD Test Report 1.0//EN">

<!-- Use this URI to identify the default namespace:

         "http://www.qfs.de/2002/report"
-->
<!ENTITY % Report.ns "http://www.qfs.de/2002/report">

<!-- ........................................................................
     This DTD defines a generic structure for XML test reports. It is
     currently taylored to QF-Test report generation but is intended to
     serve as the base for possible future integration of results of other
     kinds like unit or load tests.

     This file should be considered work in progress. The structure and
     attributes have not been finalized yet and may change incompatibly in
     future versions.
......................................................................... -->



<!-- ........................................................................
     Common attribute definitions
......................................................................... -->

<!-- State attributes
     state    The actual state of a node
     vstate    The "visible" state of a node, the maximum of the node's state
                and the visible states of its child nodes. May be less
                than the node's state, e.g. in case of a caught exception.
     pstate     The "propagated" state. The state of the node that has
                propagated to the root of the tree, i.e. the minimum of the
                node's state and the visible states of all ancestors.

     In all cases 0 = no error, 1 = warning, 2 = error, 3 = fatal error /
     exception.
-->
<!ENTITY % State.attrib
    "state    (0|1|2|3)    '0'
     vstate    (0|1|2|3)    '0'
     pstate    (0|1|2|3)    '0'"
>

<!--.........................................................................
     Node hierarchy
..........................................................................-->

<!-- report-summary is the root node of a test report summary. It represents one
     test-run execution of one or more test-suites.
-->
<!ELEMENT report-summary
     (summary?, (test-suite*))
>

<!-- report-summary attributes:
     result        Total result of the whole test-run.
            0 = no error, 1 = warning, 2 = error, 3 = fatal error / exception.
     duration        Total time spent during the whole test-run (in ms).
     execution-date    Execution start date of the whole test-run.
     end-date        Execution end date of the whole test-run.
     sourcedir        Root directory of executed test-suites.
-->
<!ATTLIST report-summary
     result        (0|1|2|3)    #REQUIRED
     duration        CDATA        #IMPLIED
     execution-date    CDATA        #IMPLIED
     end-date        CDATA        #IMPLIED
     sourcedir        CDATA        #IMPLIED
>

<!-- test-suite is the root node of a test report. It is a composite that
     either serves as container for several test-suites, or represents one
     test-run.
-->
<!ELEMENT test-suite
     (comment?, summary?, (test-suite* | test*))
>

<!-- .................................................................... -->

<!-- test-suite attributes:
     State attributes.
     Common attributes:

     type        The type of the test-suite: "composite" stands for a
            meta suite that contains more test-suites, "qftest"
            and "JUnit" are actual test-runs.
     name        Identifier for the test-suite, e.g. the filename of
            the original qftest test-suite.

     Source test-suite attributes:

     company        Company identifer.
     department        Department identifer.
     project        Project identifer.
     author        The author of the test-suite.
     creation-date    Creation date of the test-sutie

     Common test-run attrbiutes:

     execution-date    Execution date of the test-run.
     host        Machine on which the test was run.
     os            Operating system of the host.
     os-version        Version of the operating system.

     Type-specific attributes:
     java-version    Version of the Java machine.
     qftest-version    Version of qftest
-->
<!ATTLIST test-suite
     %State.attrib;
     type        (composite|qftest|JUnit)    #REQUIRED
     name        CDATA        #IMPLIED
     company        CDATA        #IMPLIED
     department        CDATA        #IMPLIED
     project        CDATA        #IMPLIED
     author        CDATA        #IMPLIED
     creation-date    CDATA        #IMPLIED
     executed-by    CDATA        #IMPLIED
     execution-date    CDATA        #IMPLIED
     host        CDATA        #IMPLIED
     os-version        CDATA        #IMPLIED
     java-version    CDATA        #IMPLIED
     qftest-version    CDATA        #IMPLIED
>

<!-- .................................................................... -->

<!-- test is another composite that contains more tests, sequences and
     procedures. For qftest tests represent "Test" nodes.
-->
<!ELEMENT test
     (comment?, summary?, (test | sequence | procedure)*)>

<!-- test attributes
     State attributes.
     name        Identifier for the test.
     id            Id of the respective Test node.
-->
<!ATTLIST test
     %State.attrib;
     name        CDATA        #IMPLIED
     id            CDATA        #IMPLIED
>

<!-- .................................................................... -->

<!-- A sequence can contain test-run-specific nodes which are not defined
     yet. For qftest sequences represent "Sequence" nodes and can contain
     further tests, sequences and procedures.
-->
<!ELEMENT sequence
     (comment?, summary?, (test | sequence | procedure)*)>

<!-- sequence attributes
     State attributes.
     name        Identifier for the sequence.
     id            Id of the respective Sequence node.
-->
<!ATTLIST sequence
     %State.attrib;
     name        CDATA        #IMPLIED
     id            CDATA        #IMPLIED
>

<!-- .................................................................... -->

<!-- A procedure can contain test-run-specific nodes which are not defined
     yet. For qftest procedures represent "Procedure" nodes and can contain
     further tests, sequences and procedures.
-->

<!ELEMENT procedure
     (comment?, summary?, (test | sequence | procedure)*)>

<!-- procedure attributes
     State attributes.
     name        Identifier for the procedure.
     id            Id of the respective Procedure(call) node.
-->
<!ATTLIST procedure
     %State.attrib;
     name        CDATA        #IMPLIED
     id            CDATA        #IMPLIED
>

<!-- .................................................................... -->

<!-- All major nodes and check nodes can contain an optional comment.
-->
<!ELEMENT comment ANY >

<!-- .................................................................... -->

<!-- All major nodes should contain a summary node which may contain lists of
     checks, exceptions, errors and warnings.
-->
<!ELEMENT summary
     (checks?, exceptions?, errors?, warnings?)>

<!-- summary attributes:
     duration        Time spent executing the node (in ms).
     time        The start time of the node
     exceptions        Number of exceptions that occured.
     errors        Number of errors that occured.
     warnings        Number of warnings that occured.
-->
<!ATTLIST summary
     duration        CDATA        #IMPLIED
     time        CDATA        #IMPLIED
     exceptions        CDATA        #IMPLIED
     errors        CDATA        #IMPLIED
     warnings        CDATA        #IMPLIED
>

<!-- .................................................................... -->

<!-- checks is simply a container for check nodes
-->
<!ELEMENT checks (check*)>

<!-- A check node represents one explicit check, e.g. a CheckStringStep node
     in qftest. It can contain comment a and a message.
-->
<!ELEMENT check (comment?, message?)>

<!-- check attributes:
     State attributes.
-->
<!ATTLIST check
     %State.attrib;
>

<!-- .................................................................... -->

<!-- exceptions is simply a container for exception nodes
-->
<!ELEMENT exceptions (exception*)>

<!-- An exception node represents a fatal error or exception.  It can contain
     a comment and a message.
-->
<!ELEMENT exception (comment?, message?)>

<!-- exception attributes:
     State attributes.
-->
<!ATTLIST exception
     %State.attrib;
>

<!-- .................................................................... -->

<!-- errors is simply a container for error nodes
-->
<!ELEMENT errors (error*)>

<!-- A error node represents one error. It can contain a comment and a
     message.
-->
<!ELEMENT error (comment?, message?)>

<!-- error attributes:
     State attributes.
-->
<!ATTLIST error
     %State.attrib;
>

<!-- .................................................................... -->

<!-- warnings is simply a container for warning nodes
-->
<!ELEMENT warnings (warning*)>

<!-- A warning node represents one warning. It can contain a comment and a
     message.
-->
<!ELEMENT warning (comment?, message?)>

<!-- warning attributes:
     State attributes.
-->
<!ATTLIST warning
     %State.attrib;
>

<!-- .................................................................... -->

<!-- A message node holds a plain text message.
-->
<!ELEMENT message (#PCDATA) >
