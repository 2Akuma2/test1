
fullVersion = getVersionWithHotfixWithoutPostfix("${params.tag}")

replace "${adito.complete.final.version}" with ${fullVersion} in ao/addendum/assemblydesigner/buildresources/ADITOdesigner.conf

maven('.', 'clean install -Dmaven.repo.local=$HOME/.m2_builds/' + getPipelineVersion().m2Folder + ' -T 1C -e ' +
                 '-P adito.maven.resources,adito.maven.javadoc,adito.production ' +
                 '-DJOB_NAME=${JOB_NAME} ' +
                 '-Dadito.build.version=\"' + getAditoMajorVerson() + '\" -Dadito.build.suffix=\"' + buildSuffix + '\"')
                

withCredentials([
   sshUserPrivateKey(
       credentialsId: "ea4c430c-9650-4d51-899c-1d702ecad71e",
       keyFileVariable: 'keyFileVar')
]) {
          sh """
                rm -rf adito-designer
                export GIT_SSH_COMMAND="ssh -i ${keyFileVar}"
                git clone -b "${params.tag}" ${env.ADITO_DESIGNER_REPO_URL_SSH}
           """
}


maven('adito-designer', 'clean install -Dmaven.repo.local=$HOME/.m2_builds/' + getPipelineVersion().m2Folder + ' -T 1C -e -DskipTests')
sh """rm -rf adito-designer"""









def maven(String pWorkingDir, String pParams)
{
  configFileProvider([configFile(fileId: 'adito-maven-settings-install4j8', variable: 'MAVEN_SETTINGS'),
                      configFile(fileId: 'adito-default-maven-toolchains', variable: 'MAVEN_TOOLCHAINS')]) {
    if (isUnix())
      sh "cd ${pWorkingDir} && mvn -s ${MAVEN_SETTINGS} -t ${MAVEN_TOOLCHAINS} ${pParams}"
    else
      bat(/mvn -s ${MAVEN_SETTINGS} -t ${MAVEN_TOOLCHAINS} ${pParams}/)
  }
}



